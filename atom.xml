<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LinXunFeng‘s Blog</title>
  
  
  <link href="http://linxunfeng.top/atom.xml" rel="self"/>
  
  <link href="http://linxunfeng.top/"/>
  <updated>2020-08-22T14:18:43.876Z</updated>
  <id>http://linxunfeng.top/</id>
  
  <author>
    <name>LinXunFeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分享 - Flutter打造好用的打印工具类</title>
    <link href="http://linxunfeng.top/2020/09/11/Share/%E5%88%86%E4%BA%AB%20-%20Flutter%E6%89%93%E9%80%A0%E5%A5%BD%E7%94%A8%E7%9A%84%E6%89%93%E5%8D%B0%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://linxunfeng.top/2020/09/11/Share/%E5%88%86%E4%BA%AB%20-%20Flutter%E6%89%93%E9%80%A0%E5%A5%BD%E7%94%A8%E7%9A%84%E6%89%93%E5%8D%B0%E5%B7%A5%E5%85%B7%E7%B1%BB/</id>
    <published>2020-09-11T00:00:00.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>如果我们可以在调用函数时拿到当前调用堆栈，就可以取到一系列想要的数据。</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><h2 id="一、思考"><a href="#一、思考" class="headerlink" title="一、思考"></a>一、思考</h2><p>做 <code>iOS</code> 开发的同学都知道，我们在平时开发过程中，经常会用到非常实用的自定义打印功能，方便我们快速定位是在哪个控制器，哪一行代码。</p><p> 在 <code>OC</code> 和 <code>Swift</code> 中都可以很轻松实现，因为系统本来就提供了用于日志输出的预处理宏，只要我们拿来拼接就可以了，这里以 <code>Swift</code> 的打印为例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">LogType</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> error = <span class="string">"❤️ ERROR"</span></span><br><span class="line">    <span class="keyword">case</span> warning = <span class="string">"💛 WARNING"</span></span><br><span class="line">    <span class="keyword">case</span> info = <span class="string">"💙 INFO"</span></span><br><span class="line">    <span class="keyword">case</span> debug = <span class="string">"💚 DEBUG"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> log = <span class="type">Logger</span>.shared</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">Logger</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> logDateFormatter: <span class="type">DateFormatter</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> f = <span class="type">DateFormatter</span>()</span><br><span class="line">        f.dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span></span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">error</span>&lt;T&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> message : T,</span></span></span><br><span class="line"><span class="function"><span class="params">        file : StaticString = #file,</span></span></span><br><span class="line"><span class="function"><span class="params">        function : StaticString = #function,</span></span></span><br><span class="line"><span class="function"><span class="params">        line : UInt = #line</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        <span class="type">LXFLog</span>(message, type: .error, file : file, function: function, line: line)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">warning</span>&lt;T&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> message : T,</span></span></span><br><span class="line"><span class="function"><span class="params">        file : StaticString = #file,</span></span></span><br><span class="line"><span class="function"><span class="params">        function : StaticString = #function,</span></span></span><br><span class="line"><span class="function"><span class="params">        line : UInt = #line</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        <span class="type">LXFLog</span>(message, type: .warning, file : file, function: function, line: line)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">info</span>&lt;T&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> message : T,</span></span></span><br><span class="line"><span class="function"><span class="params">        file : StaticString = #file,</span></span></span><br><span class="line"><span class="function"><span class="params">        function : StaticString = #function,</span></span></span><br><span class="line"><span class="function"><span class="params">        line : UInt = #line</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        <span class="type">LXFLog</span>(message, type: .info, file : file, function: function, line: line)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">debug</span>&lt;T&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="number">_</span> message : T,</span></span></span><br><span class="line"><span class="function"><span class="params">        file : StaticString = #file,</span></span></span><br><span class="line"><span class="function"><span class="params">        function : StaticString = #function,</span></span></span><br><span class="line"><span class="function"><span class="params">        line : UInt = #line</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        <span class="type">LXFLog</span>(message, type: .debug, file : file, function: function, line: line)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK:- 自定义打印方法</span></span><br><span class="line"><span class="comment">// target -&gt; Build Settings 搜索 Other Swift Flags</span></span><br><span class="line"><span class="comment">// 设置Debug 添加 -D DEBUG</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LXFLog</span>&lt;T&gt;<span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> message : T,</span></span></span><br><span class="line"><span class="function"><span class="params">    type: LogType,</span></span></span><br><span class="line"><span class="function"><span class="params">    file : StaticString = #file,</span></span></span><br><span class="line"><span class="function"><span class="params">    function : StaticString = #function,</span></span></span><br><span class="line"><span class="function"><span class="params">    line : UInt = #line</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line">    <span class="keyword">let</span> time = <span class="type">Logger</span>.logDateFormatter.string(from: <span class="type">Date</span>())</span><br><span class="line">    <span class="keyword">let</span> fileName = (file.description <span class="keyword">as</span> <span class="type">NSString</span>).lastPathComponent</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(time) \(type.rawValue) \(fileName):(\(line))-\(message)"</span>)</span><br><span class="line">    #endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用及打印结果：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">log.debug(<span class="string">"models count -- \(models.count)"</span>)</span><br><span class="line">log.warning(<span class="string">"models count -- \(models.count)"</span>)</span><br><span class="line">log.info(<span class="string">"models count -- \(models.count)"</span>)</span><br><span class="line">log.error(<span class="string">"models count -- \(models.count)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">💚 DEBUG XXXViewController.swift:(79)-models count -- 10</span></span><br><span class="line"><span class="comment">💛 WARNING XXXViewController.swift:(80)-models count -- 10</span></span><br><span class="line"><span class="comment">💙 INFO XXXViewController.swift:(81)-models count -- 10</span></span><br><span class="line"><span class="comment">❤️ ERROR XXXViewController.swift:(82)-models count -- 10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>OC</code> 和 <code>Swift</code> 的预处理宏对应表</p><table><thead><tr><th>OC</th><th>Swift</th><th></th></tr></thead><tbody><tr><td>__FILE__</td><td>#file</td><td>打印当前文件路径</td></tr><tr><td>__LINE__</td><td>#line</td><td>打印当前行号，整数</td></tr><tr><td>__FUNCTION__</td><td>#function</td><td>打印当前函数或方法</td></tr></tbody></table><p>但是在 <code>Dart</code> 中并没有提供这些功能，但是这个功能对我们来说确实又非常需要，那有什么办法实现它呢？</p><center><br>  <span style="font-size:300px; text-alignment:center">🤔</span><br></center><p>我们回想在开发过程中，是不是发现只要一不小心抛异常，就可以看到类似如下的打印内容，而且还能清楚的知道异常是在哪个文件和哪一行的代码造成的。</p><p><img src= "/img/loading.gif" data-src="/images/2020/06/Flutter-打印好用的Debug日志/抛异常.png" alt=""></p><blockquote><p>所以如果我们可以在调用函数时拿到当前调用堆栈，就可以取到一系列想要的数据。</p></blockquote><h2 id="二、实践"><a href="#二、实践" class="headerlink" title="二、实践"></a>二、实践</h2><p>在 <code>dart:core</code> 中提供了 <code>堆栈跟踪(StackTrace)</code>，可以通过 <code>StackTrace.current</code> 取到当前的堆栈信息，打印如下图所示，会发现这不好拿到我们想要的信息。</p><p><img src= "/img/loading.gif" data-src="/images/2020/06/Flutter-打印好用的Debug日志/StackTrace.png" alt=""></p><p>这里我用到了官方开发的一个包 <a href="https://pub.dev/packages/stack_trace" target="_blank" rel="noopener">stack_trace</a>，它可以将堆栈信息变得更多人性化，并方便我们查看堆栈信息和获取想要的数据。</p><p><strong>ps: <code>stack_trace</code> 在 <code>Flutter</code> 环境下直接导包即可使用，而在纯 <code>Dart</code> 下需要将其添加为依赖于<code>pubspec.yaml</code>中。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">stack_trace:</span> <span class="string">^1.9.3</span></span><br></pre></td></tr></table></figure><p>那下面我们来试试 <a href="https://pub.dev/packages/stack_trace" target="_blank" rel="noopener">stack_trace</a> 的威力吧<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:stack_trace/stack_trace.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 StackTrace 对象转换成 Chain 对象</span></span><br><span class="line"><span class="comment">// 当然，这里也可以直接用 Chain.current();</span></span><br><span class="line"><span class="comment">// final chain = Chain.current();</span></span><br><span class="line"><span class="keyword">final</span> chain = Chain.forTrace(StackTrace.current);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(chain);</span><br></pre></td></tr></table></figure></p><p>打印内容：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">flutter: package:flutter_test1/main.dart <span class="number">79</span>:<span class="number">17</span>       _MyHomePageState.test_print</span><br><span class="line">package:flutter_test1/main.dart <span class="number">38</span>:<span class="number">5</span>                 _MyHomePageState._incrementCounter</span><br><span class="line">package:flutter/src/material/ink_well.dart <span class="number">779</span>:<span class="number">19</span>    _InkResponseState._handleTap</span><br><span class="line">package:flutter/src/material/ink_well.dart <span class="number">862</span>:<span class="number">36</span>    _InkResponseState.build.&lt;fn&gt;</span><br><span class="line">package:flutter/src/gestures/recognizer.dart <span class="number">182</span>:<span class="number">24</span>  GestureRecognizer.invokeCallback</span><br><span class="line">package:flutter/src/gestures/tap.dart <span class="number">504</span>:<span class="number">11</span>         TapGestureRecognizer.handleTapUp</span><br><span class="line">package:flutter/src/gestures/tap.dart <span class="number">282</span>:<span class="number">5</span>          BaseTapGestureRecognizer._checkUp</span><br><span class="line">package:flutter/src/gestures/tap.dart <span class="number">254</span>:<span class="number">7</span>          BaseTapGestureRecognizer.acceptGesture</span><br><span class="line">package:flutter/src/gestures/arena.dart <span class="number">156</span>:<span class="number">27</span>       GestureArenaManager.sweep</span><br><span class="line">package:flutter/src/gestures/binding.dart <span class="number">222</span>:<span class="number">20</span>     GestureBinding.handleEvent</span><br><span class="line">package:flutter/src/gestures/binding.dart <span class="number">198</span>:<span class="number">22</span>     GestureBinding.dispatchEvent</span><br><span class="line">package:flutter/src/gestures/binding.dart <span class="number">156</span>:<span class="number">7</span>      GestureBinding._handle&lt;…&gt;</span><br></pre></td></tr></table></figure><p>工具代码雏形：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:stack_trace/stack_trace.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 StackTrace 对象转换成 Chain 对象</span></span><br><span class="line"><span class="comment">// 当然，这里也可以直接用 Chain.current();</span></span><br><span class="line"><span class="keyword">final</span> chain = Chain.forTrace(StackTrace.current);</span><br><span class="line"><span class="comment">// 拿出其中一条信息</span></span><br><span class="line"><span class="keyword">final</span> frames = chain.toTrace().frames;</span><br><span class="line"><span class="keyword">final</span> frame = frames[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"所在文件：<span class="subst">$&#123;frame.uri&#125;</span> 所在行 <span class="subst">$&#123;frame.line&#125;</span> 所在列 <span class="subst">$&#123;frame.column&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// flutter: 所在文件：package:flutterlog/main.dart 所在行 55 所在列 23</span></span><br></pre></td></tr></table></figure><p><code>Frame</code> 类的属性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="markdown">A single stack frame. Each frame points to a precise location in Dart code.</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Frame</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">The URI of the file in which the code is located.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">This URI will usually have the scheme <span class="code">`dart`</span>, <span class="code">`file`</span>, <span class="code">`http`</span>, or <span class="code">`https`</span>.</span></span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Uri</span> uri;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">The line number on which the code location is located.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">This can be null, indicating that the line number is unknown or</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">unimportant.</span></span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> line;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// <span class="markdown">The name of the member in which the code location occurs.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">Anonymous closures are represented as <span class="code">`&lt;fn&gt;`</span> in this member string.</span></span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> member;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>uri</code> : 获取代码所在文件的路径</li><li><code>line</code> : 获取代码所在行</li><li><code>member</code> : 获取所在方法</li></ul><p>打印看一下 :</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uri</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;frame.uri.toString()&#125;</span>"</span>);  <span class="comment">// package:flutter_test1/main.dart</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// member</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;frame.member&#125;</span>"</span>); <span class="comment">// _MyHomePageState.scheduleAsync.&lt;fn&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// line</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;frame.line&#125;</span>"</span>); <span class="comment">// 97</span></span><br></pre></td></tr></table></figure><h2 id="三、呈上代码"><a href="#三、呈上代码" class="headerlink" title="三、呈上代码"></a>三、呈上代码</h2><p>下面我做了一点封装，直接拿走即可使用，完整的代码和示例请到GitHub上<a href="https://github.com/LinXunFeng/flutter_log" target="_blank" rel="noopener">【查看】</a>。</p><p>代码：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// log.dart</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> FLogMode &#123;</span><br><span class="line">  debug,    <span class="comment">// 💚 DEBUG</span></span><br><span class="line">  warning,  <span class="comment">// 💛 WARNING</span></span><br><span class="line">  info,     <span class="comment">// 💙 INFO</span></span><br><span class="line">  error,    <span class="comment">// ❤️ ERROR</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> FLog(<span class="built_in">dynamic</span> msg, &#123; FLogMode mode = FLogMode.debug &#125;) &#123;</span><br><span class="line">  <span class="keyword">if</span> (kReleaseMode) &#123; <span class="comment">// release模式不打印</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> chain = Chain.current(); <span class="comment">// Chain.forTrace(StackTrace.current);</span></span><br><span class="line">  <span class="comment">// 将 core 和 flutter 包的堆栈合起来（即相关数据只剩其中一条）</span></span><br><span class="line">  chain = chain.foldFrames((frame) =&gt; frame.isCore || frame.package == <span class="string">"flutter"</span>);</span><br><span class="line">  <span class="comment">// 取出所有信息帧</span></span><br><span class="line">  <span class="keyword">final</span> frames = chain.toTrace().frames;</span><br><span class="line">  <span class="comment">// 找到当前函数的信息帧</span></span><br><span class="line">  <span class="keyword">final</span> idx = frames.indexWhere((element) =&gt; element.member == <span class="string">"FLog"</span>);</span><br><span class="line">  <span class="keyword">if</span> (idx == <span class="number">-1</span> || idx+<span class="number">1</span> &gt;= frames.length) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用当前函数的函数信息帧</span></span><br><span class="line">  <span class="keyword">final</span> frame = frames[idx+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> modeStr = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">switch</span>(mode) &#123;</span><br><span class="line">    <span class="keyword">case</span> FLogMode.debug:</span><br><span class="line">      modeStr = <span class="string">"💚 DEBUG"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> FLogMode.warning:</span><br><span class="line">      modeStr = <span class="string">"💛 WARNING"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> FLogMode.info:</span><br><span class="line">      modeStr = <span class="string">"💙 INFO"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> FLogMode.error:</span><br><span class="line">      modeStr = <span class="string">"❤️ ERROR"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"<span class="subst">$modeStr</span> <span class="subst">$&#123;frame.uri.toString().split(<span class="string">"/"</span>).last&#125;</span>(<span class="subst">$&#123;frame.line&#125;</span>) - <span class="subst">$msg</span> "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接使用FLog</span></span><br><span class="line">FLog(<span class="string">"flutter_log demo"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mode：打印模式（默认值为debug）</span></span><br><span class="line">FLog(<span class="string">"flutter_log demo"</span>, mode: FLogMode.debug);</span><br><span class="line">FLog(<span class="string">"flutter_log demo"</span>, mode: FLogMode.warning);</span><br><span class="line">FLog(<span class="string">"flutter_log demo"</span>, mode: FLogMode.info);</span><br><span class="line">FLog(<span class="string">"flutter_log demo"</span>, mode: FLogMode.error);</span><br></pre></td></tr></table></figure><p>打印效果如下所示：</p><p><img src= "/img/loading.gif" data-src="/images/2020/06/Flutter-打印好用的Debug日志/打印效果.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;如果我们可以在调用函数时拿到当前调用堆栈，就可以取到一系列想要的数据。&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="Share" scheme="http://linxunfeng.top/categories/Share/"/>
    
    
    <category term="Dart" scheme="http://linxunfeng.top/tags/Dart/"/>
    
    <category term="Flutter" scheme="http://linxunfeng.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter - 解决混合开发iOS脚本打包遇到的问题</title>
    <link href="http://linxunfeng.top/2020/08/12/Flutter/Flutter%20-%20%E8%A7%A3%E5%86%B3%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91iOS%E8%84%9A%E6%9C%AC%E6%89%93%E5%8C%85%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://linxunfeng.top/2020/08/12/Flutter/Flutter%20-%20%E8%A7%A3%E5%86%B3%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91iOS%E8%84%9A%E6%9C%AC%E6%89%93%E5%8C%85%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-12T00:00:00.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>使用Xcode手动打包是正常的，但是使用脚本打包会报错</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><p>使用 <code>Xcode</code> 手动打包是正常的，但是使用脚本打包会报错，错误如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The following build commands failed:</span><br><span class="line">PhaseScriptExecution [CP-User]\ Run\ Flutter\ Build\ Script .../Script-C3A097A8FE12FF5F875B057C.sh</span><br><span class="line"></span><br><span class="line">flutter build ios --release</span><br><span class="line">then re-run Archive from Xcode.</span><br><span class="line">Command PhaseScriptExecution failed with a nonzero exit code</span><br></pre></td></tr></table></figure><h2 id="定位错误"><a href="#定位错误" class="headerlink" title="定位错误"></a>定位错误</h2><p><img src= "/img/loading.gif" data-src="/images/2020/08/Flutter-解决混合开发iOS脚本打包遇到的问题/01.png" alt=""></p><p>到 <code>Flutter</code> 环境目录下，按图上所示地址找到 <code>xcode_backend.sh</code>，也可以直接看 <a href="https://github.com/flutter/flutter/blob/bcc42901ad6bb3ec644be225b5f9cd998852e0ef/packages/flutter_tools/bin/xcode_backend.sh#L90-L101" target="_blank" rel="noopener">官方脚本链接</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Archive builds (ACTION=install) should always run <span class="keyword">in</span> release mode.</span></span><br><span class="line">if [[ "$ACTION" == "install" &amp;&amp; "$build_mode" != "release" ]]; then</span><br><span class="line">  EchoError "========================================================================"</span><br><span class="line">  EchoError "ERROR: Flutter archive builds must be run in Release mode."</span><br><span class="line">  EchoError ""</span><br><span class="line">  EchoError "To correct, ensure FLUTTER_BUILD_MODE is set to release or run:"</span><br><span class="line">  EchoError "flutter build ios --release"</span><br><span class="line">  EchoError ""</span><br><span class="line">  EchoError "then re-run Archive from Xcode."</span><br><span class="line">  EchoError "========================================================================"</span><br><span class="line">  exit -1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>可以看到，官方脚本的说明里面给出两个解决方案</p><blockquote><p>方案一：直接设置 <code>FLUTTER_BUILD_MODE</code> 为 <code>release</code></p><p>方案二：先运行 <code>flutter build ios --release</code> ，再使用 <code>Xcode</code> 去打包</p></blockquote><p>这里我们是用 <code>Jenkins</code> 脚本进行打包，所以方案二不适用，方案一更加方便些</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置Flutter的编译模式为release</span></span><br><span class="line">export FLUTTER_BUILD_MODE=release</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行原有项目的打包脚本</span></span><br><span class="line">./script/build_iOS.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;使用Xcode手动打包是正常的，但是使用脚本打包会报错&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="Flutter" scheme="http://linxunfeng.top/categories/Flutter/"/>
    
    
    <category term="Dart" scheme="http://linxunfeng.top/tags/Dart/"/>
    
    <category term="Flutter" scheme="http://linxunfeng.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter - 混合开发</title>
    <link href="http://linxunfeng.top/2020/07/12/Flutter/Flutter%20-%20%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    <id>http://linxunfeng.top/2020/07/12/Flutter/Flutter%20-%20%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/</id>
    <published>2020-07-12T00:00:00.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>目前大多数公司都有自己开发多年的项目，不可能直接用 <code>Flutter</code> 从头开发一套，那样不实现，除非是小项目，因此只能是在原有的基础上用 <code>Flutter</code> 来开发新业务或重构旧业务，而这里就需要用到 <code>Flutter</code> 的 <code>混合开发</code></p><p>+<a id="more"></a></p><The rest of contents | 余下全文><blockquote><p>目前大多数公司都有自己开发多年的项目，不可能直接用 <code>Flutter</code> 从头开发一套，那样不实现，除非是小项目，因此只能是在原有的基础上用 <code>Flutter</code> 来开发新业务或重构旧业务，而这里就需要用到 <code>Flutter</code> 的 <code>混合开发</code></p></blockquote><h3 id="一、创建Flutter模块"><a href="#一、创建Flutter模块" class="headerlink" title="一、创建Flutter模块"></a>一、创建Flutter模块</h3><p>使用混合开发就不能像之前一样直接上来就创建一个 <code>Flutter</code> 项目，而是要使用 <code>Flutter模板</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> flutter_module_lxf 可以随便你命名</span></span><br><span class="line">flutter create --template module flutter_module_lxf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --template 可以替换为 -t</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> flutter create -t module flutter_module_lxf</span></span><br></pre></td></tr></table></figure><p>创建出来的 <code>Flutter</code> 模块依然是可以像之前创建的<code>Flutter项目</code> 一样打开和运行的。 </p><p>目录下有也有 <code>ios</code> 和 <code>android</code> 目录，只不过前面加了个点 ，成了点目录。</p><p><img src= "/img/loading.gif" data-src="/images/2020/07/Flutter-混合开发/混合开发iOS01.png" alt=""></p><h2 id="二、iOS"><a href="#二、iOS" class="headerlink" title="二、iOS"></a>二、iOS</h2><h3 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h3><blockquote><p>通过 <code>Cocoapods</code> ，将 <code>Flutter</code> 模块编译成一个库，再到原生项目中进行引入和使用即可</p></blockquote><p>在 <code>Podfile</code> 中添加两行配置</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定我们刚刚创建的 Flutter 模块的路径</span></span><br><span class="line">flutter_application_path = <span class="string">'../flutter_module_lxf'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接脚本文件的路径: .ios/Flutter/podhelper.rb</span></span><br><span class="line">load File.join(flutter_application_path, <span class="string">'.ios'</span>, <span class="string">'Flutter'</span>, <span class="string">'podhelper.rb'</span>)</span><br></pre></td></tr></table></figure><p>在每个需要引用 <code>Flutter</code> 的 <code>Target</code> 下，都需要添加一行配置</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install_all_flutter_pods(flutter_application_path)</span><br></pre></td></tr></table></figure><p>添加后如下所示：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flutter_application_path = <span class="string">'../flutter_module_lxf'</span></span><br><span class="line">load File.join(flutter_application_path, <span class="string">'.ios'</span>, <span class="string">'Flutter'</span>, <span class="string">'podhelper.rb'</span>)</span><br><span class="line"></span><br><span class="line">use_frameworks!</span><br><span class="line">target <span class="string">'LXFFlutterHybridDemo'</span> <span class="keyword">do</span></span><br><span class="line">  </span><br><span class="line">  install_all_flutter_pods(flutter_application_path)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>添加完成后，执行一次 <code>pod install</code></p><p>混合开发混合开发<img src= "/img/loading.gif" data-src="/images/2020/07/Flutter-混合开发/混合开发iOS02.png" alt=""></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>两个步骤</p><ol><li>获取 Flutter引擎 <code>FlutterEngine</code></li><li>通过 <code>FlutterEngine</code> 创建 <code>FlutterViewController</code></li></ol></blockquote><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p><code>AppDelegate</code> 类中声明一个 <code>FlutterEngine</code> 变量，在 <code>didFinishLaunchingWithOptions</code> 方法中启动 <code>Flutter引擎</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AppDelegate.swift</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Flutter</span><br><span class="line"></span><br><span class="line"><span class="meta">@UIApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 创建 Flutter引擎</span></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> flutterEngine = <span class="type">FlutterEngine</span>(name: <span class="string">"lxf"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class="keyword">Any</span>]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 启动 Flutter引擎</span></span><br><span class="line">        flutterEngine.run()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>ViewController</code> 中添加一个按钮，点击弹出 <code>Flutter模块</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewController.swift</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> btn = <span class="type">UIButton</span>(type: .custom)</span><br><span class="line">  btn.frame = <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">200</span>, width: <span class="number">200</span>, height: <span class="number">44</span>)</span><br><span class="line">  btn.backgroundColor = .black</span><br><span class="line">  btn.addTarget(<span class="keyword">self</span>, action: #selector(showFlutterVc), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">  btn.setTitle(<span class="string">"弹出Flutter模块"</span>, <span class="keyword">for</span>: .normal)</span><br><span class="line">  <span class="keyword">self</span>.view.addSubview(btn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">showFlutterVc</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 创建FlutterViewController</span></span><br><span class="line">  <span class="comment">// 这里的 engine 可以传 nil，Flutter会帮我们自动创建一个引擎，但是性能较差</span></span><br><span class="line">  <span class="keyword">let</span> flutterVc = <span class="type">FlutterViewController</span>(engine: fetchFlutterEngine(), nibName: <span class="literal">nil</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">  <span class="keyword">self</span>.present(flutterVc, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetchFlutterEngine</span><span class="params">()</span></span> -&gt; <span class="type">FlutterEngine</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span>).flutterEngine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/images/2020/07/Flutter-混合开发/混合开发iOS04.jpg" alt=""></p><p>如果遇到报 <code>Command PhaseScriptExecution failed with a nonzero exit code</code> 错误，如下图所示：</p><p><img src= "/img/loading.gif" data-src="/images/2020/07/Flutter-混合开发/混合开发iOS03.png" alt=""></p><p>请先用 <code>Android Studio</code> 或 <code>VSCode</code> 打开 <code>Flutter模块</code> 项目并运行到iOS设备上，让其帮我们对iOS项目进行一些初始化配置。成功运行后就可以关闭 <code>Flutter模块</code> 项目的运行了，接着再用 <code>Xcode</code> 打开原生项目运行即可。</p><h4 id="修改初始路由"><a href="#修改初始路由" class="headerlink" title="修改初始路由"></a>修改初始路由</h4><p>官方文档里面提到，修改初始路由，需要在 <code>Flutter引擎</code> 在 <code>run</code> 之前，通过 <code>invokeMethod</code> 调用 <code>setInitialRoute</code> 方法进行设置，代码如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改初始路由</span></span><br><span class="line">flutterEngine.navigationChannel.invokeMethod(<span class="string">"setInitialRoute"</span>, arguments: <span class="string">"/other"</span>)</span><br><span class="line"><span class="comment">// 启动 Flutter引擎</span></span><br><span class="line">flutterEngine.run()</span><br></pre></td></tr></table></figure><p>但是，我发现这样写并没有起任何作用，在 <code>Flutter</code> 的官方 <code>issue</code> 上也有人提到这个问题： <a href="https://github.com/flutter/flutter/issues/59895" target="_blank" rel="noopener">【setInitialRoute is broken for iOS add-to-app #59895】</a>，目前只能官方进行修复和调整 <code>API</code></p><p>临时可以使用如下方式实现：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flutterVc = <span class="type">FlutterViewController</span>(project: <span class="type">FlutterDartProject</span>(), nibName: <span class="literal">nil</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">flutterVc.setInitialRoute(<span class="string">"/other"</span>)</span><br><span class="line"><span class="keyword">self</span>.present(flutterVc, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>虽然这么写可以实现这个功能，但是会有明显的类似卡顿的现象，因为使用这种方式去创建 <code>FlutterViewController</code> 之前，会隐式创建和启动一个 <code>FlutterEngine</code>，而我们弹出 <code>FlutterViewController</code> 时 <code>FlutterEngine</code> 还没加载完毕，所以我们会看到先弹出了一个透明的界面，再显示 <code>/other</code> 路由对应的界面视图。</p><h4 id="使用-FlutterAppDelegate"><a href="#使用-FlutterAppDelegate" class="headerlink" title="使用 FlutterAppDelegate"></a>使用 FlutterAppDelegate</h4><p>使用 <code>FlutterAppDelegate</code>这个不是必要的操作，但是如果你想让 <code>Flutter模块</code> 也能使用原生的功能的话，建议使用</p><blockquote><p> 原生功能</p><ul><li>处理 <code>openURL</code> 的回调</li><li>列表视图在点击状态栏后滚到顶部</li></ul></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">FlutterAppDelegate</span></span></span><br></pre></td></tr></table></figure><p>更具体的使用，请阅读 <a href="https://flutter.dev/docs/development/add-to-app/ios/add-flutter-screen?tab=no-engine-vc-swift-tab#using-the-flutterappdelegate" target="_blank" rel="noopener">官方文档</a></p><h2 id="三、Android"><a href="#三、Android" class="headerlink" title="三、Android"></a>三、Android</h2><p>修改安卓项目 根目录下的 <code>settings.gradle</code> 文件 </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// settings.gradle</span></span><br><span class="line"></span><br><span class="line">include <span class="string">':app'</span>                                    <span class="comment">// assumed existing content</span></span><br><span class="line">setBinding(<span class="keyword">new</span> Binding([<span class="string">gradle:</span> <span class="keyword">this</span>]))                                <span class="comment">// new</span></span><br><span class="line">evaluate(<span class="keyword">new</span> File(                                                     <span class="comment">// new</span></span><br><span class="line">  settingsDir.parentFile,                                              <span class="comment">// new</span></span><br><span class="line">  <span class="comment">// 这里的 flutter_module_lxf 请修改为你自己创建的Flutter模板目录名称</span></span><br><span class="line">  <span class="string">'flutter_module_lxf/.android/include_flutter.groovy'</span>                 <span class="comment">// new</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/images/2020/07/Flutter-混合开发/混合开发iOS09.png" alt=""></p><p>修改安卓项目 <code>app</code> 目录下的 <code>build.gradle</code> 文件 </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/build.gradle</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 配置flutter依赖</span></span><br><span class="line">  implementation project(<span class="string">':flutter'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在编译的时候遇到如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Default interface methods are only supported starting with Android N (--min-api 24): void androidx.lifecycle.DefaultLifecycleObserver.onCreate(androidx.lifecycle.LifecycleOwner)</span><br></pre></td></tr></table></figure><p>请确认是否指定了使用 <code>Java 8</code> 进行编译 <a href="https://flutter.dev/docs/development/add-to-app/android/project-setup#java-8-requirement" target="_blank" rel="noopener">【官方文档 -  Java 8 requirement】</a></p><p>修改安卓项目  <code>app</code> 目录下的 <code>build.gradle</code> 文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; app&#x2F;build.gradle</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">  compileOptions &#123;</span><br><span class="line">      sourceCompatibility 1.8</span><br><span class="line">      targetCompatibility 1.8</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/images/2020/07/Flutter-混合开发/混合开发iOS08.png" alt=""></p><p>修改 <code>app/src/main/AndroidManifest.xml</code> 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// app/src/main/AndroidManifest.xml</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:name</span>=<span class="string">"io.flutter.embedding.android.FlutterActivity"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:configChanges</span>=<span class="string">"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:hardwareAccelerated</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:windowSoftInputMode</span>=<span class="string">"adjustResize"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/images/2020/07/Flutter-混合开发/混合开发iOS10.png" alt=""></p><p>添加一个按钮，点击弹出 <code>Flutter模块</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  activity_main.xml  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/btn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"弹出Flutter模块"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"#000000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:onClick</span>=<span class="string">"btnClick"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivity.java</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btnClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    startActivity(</span><br><span class="line">        FlutterActivity.createDefaultIntent(<span class="keyword">this</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、调试与热重载"><a href="#四、调试与热重载" class="headerlink" title="四、调试与热重载"></a>四、调试与热重载</h2><blockquote><p>由于当前我们是使用原生开发工具(如：Xcode)来运行项目，每次修改我们的<br> <code>Flutter模块</code> 的代码，也就需要重新运行才能看到效果，不像之前按下 <code>Cmd + s</code> 就能进行热重载。这样 <code>Flutter模块</code> 的开发效率极其低下，那有没有办法可以让我们像之前开发 <code>Flutter</code> 项目时那样进行 <code>热重载</code> 呢？答案是有的</p></blockquote><p><code>Flutter</code> 官方提供了 <code>flutter attach</code> ，以辅助我们开发，到终端下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter attach</span><br></pre></td></tr></table></figure><p>如果当前有多个设备，会提示我们需要指定 <code>attach</code> 哪个设备</p><p><img src= "/img/loading.gif" data-src="/images/2020/07/Flutter-混合开发/混合开发iOS05.png" alt=""></p><p>按要求加上指定参数即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter attach -d FE305309-9E79-418D-BA3F-7EFECF2980BC</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/images/2020/07/Flutter-混合开发/混合开发iOS06.png" alt=""></p><p>如图，这样就关联上了，你在 <code>dart</code> 文件里面对界面进行任何修改后，按 <code>r</code> 进行热重载，按 <code>R</code> 进行热启动。</p><p>如果你使用的是 <code>Android Studio</code>，可以直接选择对应的设备后，点击右边的 <code>Flutter Attach</code> 按钮，执行成功后就可以跟之前一样按 <code>Cmd + s</code> 进行热重载了。</p><p><img src= "/img/loading.gif" data-src="/images/2020/07/Flutter-混合开发/混合开发iOS07.png" alt=""></p><h2 id="五、资料"><a href="#五、资料" class="headerlink" title="五、资料"></a>五、资料</h2><ul><li><p>GitHub</p><p><a href="https://github.com/LinXunFeng/LXFFlutterHybridDemo" target="_blank" rel="noopener">LXFFlutterHybridDemo</a></p></li><li><p>官方文档</p><p><a href="https://flutter.dev/docs/development/add-to-app" target="_blank" rel="noopener">add-to-app</a> | <a href="https://flutter.dev/docs/development/add-to-app/ios" target="_blank" rel="noopener">add-to-app/ios</a> | <a href="https://flutter.dev/docs/development/add-to-app/android" target="_blank" rel="noopener">add-to-app/android</a> |  <a href="https://flutter.dev/docs/development/add-to-app/debugging" target="_blank" rel="noopener">Debugging &amp; hot reload</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;目前大多数公司都有自己开发多年的项目，不可能直接用 &lt;code&gt;Flutter&lt;/code&gt; 从头开发一套，那样不实现，除非是小项目，因此只能是在原有的基础上用 &lt;code&gt;Flutter&lt;/code&gt; 来开发新业务或重构旧业务，而这里就需要用到 &lt;code&gt;Flutter&lt;/code&gt; 的 &lt;code&gt;混合开发&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="Flutter" scheme="http://linxunfeng.top/categories/Flutter/"/>
    
    
    <category term="Dart" scheme="http://linxunfeng.top/tags/Dart/"/>
    
    <category term="Flutter" scheme="http://linxunfeng.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter - 打印好用的Debug日志</title>
    <link href="http://linxunfeng.top/2020/06/26/Flutter/Flutter%20-%20%E6%89%93%E5%8D%B0%E5%A5%BD%E7%94%A8%E7%9A%84Debug%E6%97%A5%E5%BF%97/"/>
    <id>http://linxunfeng.top/2020/06/26/Flutter/Flutter%20-%20%E6%89%93%E5%8D%B0%E5%A5%BD%E7%94%A8%E7%9A%84Debug%E6%97%A5%E5%BF%97/</id>
    <published>2020-06-26T00:35:00.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>做 <code>iOS</code> 开发时这个功能很常用， 在 <code>OC</code> 和 <code>Swift</code> 中都可以很轻松实现，因为系统本来就提供了用于日志输出的预处理宏，只要我们拿来拼接就可以了，但是在 <code>Dart</code> 中并不提供这些，那有什么办法实现它呢？</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><h2 id="一、思考"><a href="#一、思考" class="headerlink" title="一、思考"></a>一、思考</h2><p>做 <code>iOS</code> 开发时这个功能很常用， 在 <code>OC</code> 和 <code>Swift</code> 中都可以很轻松实现，因为系统本来就提供了用于日志输出的预处理宏，只要我们拿来拼接就可以了，但是在 <code>Dart</code> 中并不提供这些，那有什么办法实现它呢？</p><p>我们回想在开发过程中，是不是发现只要一不小心抛异常，就可以看到类似如下的打印内容，而且还能清楚的知道异常是在哪个文件和哪一行的代码造成的。</p><p><img src= "/img/loading.gif" data-src="/images/2020/06/Flutter-打印好用的Debug日志/抛异常.png" alt=""></p><blockquote><p>所以如果我们可以在调用函数时拿到当前调用堆栈，就可以取到一系列想要的数据。</p></blockquote><h2 id="二、实践"><a href="#二、实践" class="headerlink" title="二、实践"></a>二、实践</h2><p>在 <code>dart:core</code> 中提供了 <code>堆栈跟踪(StackTrace)</code>，可以通过 <code>StackTrace.current</code> 取到当前的堆栈信息，打印如下图所示，会发现这不好拿到我们想要的信息。</p><p><img src= "/img/loading.gif" data-src="/images/2020/06/Flutter-打印好用的Debug日志/StackTrace.png" alt=""></p><p>这里我用到了官方开发的一个包 <a href="https://pub.dev/packages/stack_trace" target="_blank" rel="noopener">stack_trace</a>，它可以将堆栈信息变得更多人性化，并方便我们查看堆栈信息和获取想要的数据。</p><p><strong>ps: <code>stack_trace</code> 在 <code>Flutter</code> 环境下直接导包即可使用，而在纯 <code>Dart</code> 下需要将其添加为依赖于<code>pubspec.yaml</code>中。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">stack_trace:</span> <span class="string">^1.9.3</span></span><br></pre></td></tr></table></figure><p>那下面我们来试试 <a href="https://pub.dev/packages/stack_trace" target="_blank" rel="noopener">stack_trace</a> 的威力吧<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:stack_trace/stack_trace.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 StackTrace 对象转换成 Chain 对象</span></span><br><span class="line"><span class="comment">// 当然，这里也可以直接用 Chain.current();</span></span><br><span class="line"><span class="keyword">final</span> chain = Chain.forTrace(StackTrace.current);</span><br><span class="line"><span class="comment">// 拿出其中一条信息</span></span><br><span class="line"><span class="keyword">final</span> frames = chain.toTrace().frames;</span><br><span class="line"><span class="keyword">final</span> frame = frames[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"所在文件：<span class="subst">$&#123;frame.uri&#125;</span> 所在行 <span class="subst">$&#123;frame.line&#125;</span> 所在列 <span class="subst">$&#123;frame.column&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// flutter: 所在文件：package:flutterlog/main.dart 所在行 55 所在列 23</span></span><br></pre></td></tr></table></figure></p><h2 id="三、呈上代码"><a href="#三、呈上代码" class="headerlink" title="三、呈上代码"></a>三、呈上代码</h2><p>下面我做了一点封装，直接拿走即可使用，打印效果如下所示：</p><p>完整的代码和示例请到GitHub上<a href="https://github.com/LinXunFeng/flutter_log" target="_blank" rel="noopener">【查看】</a>。</p><p><img src= "/img/loading.gif" data-src="/images/2020/06/Flutter-打印好用的Debug日志/打印效果.png" alt=""></p><p>代码：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// log.dart</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> FLogMode &#123;</span><br><span class="line">  debug,    <span class="comment">// 💚 DEBUG</span></span><br><span class="line">  warning,  <span class="comment">// 💛 WARNING</span></span><br><span class="line">  info,     <span class="comment">// 💙 INFO</span></span><br><span class="line">  error,    <span class="comment">// ❤️ ERROR</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> FLog(<span class="built_in">dynamic</span> msg, &#123; FLogMode mode = FLogMode.debug &#125;) &#123;</span><br><span class="line">  <span class="keyword">if</span> (kReleaseMode) &#123; <span class="comment">// release模式不打印</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> chain = Chain.current(); <span class="comment">// Chain.forTrace(StackTrace.current);</span></span><br><span class="line">  <span class="comment">// 将 core 和 flutter 包的堆栈合起来（即相关数据只剩其中一条）</span></span><br><span class="line">  chain = chain.foldFrames((frame) =&gt; frame.isCore || frame.package == <span class="string">"flutter"</span>);</span><br><span class="line">  <span class="comment">// 取出所有信息帧</span></span><br><span class="line">  <span class="keyword">final</span> frames = chain.toTrace().frames;</span><br><span class="line">  <span class="comment">// 找到当前函数的信息帧</span></span><br><span class="line">  <span class="keyword">final</span> idx = frames.indexWhere((element) =&gt; element.member == <span class="string">"FLog"</span>);</span><br><span class="line">  <span class="keyword">if</span> (idx == <span class="number">-1</span> || idx+<span class="number">1</span> &gt;= frames.length) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用当前函数的函数信息帧</span></span><br><span class="line">  <span class="keyword">final</span> frame = frames[idx+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> modeStr = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">switch</span>(mode) &#123;</span><br><span class="line">    <span class="keyword">case</span> FLogMode.debug:</span><br><span class="line">      modeStr = <span class="string">"💚 DEBUG"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> FLogMode.warning:</span><br><span class="line">      modeStr = <span class="string">"💛 WARNING"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> FLogMode.info:</span><br><span class="line">      modeStr = <span class="string">"💙 INFO"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> FLogMode.error:</span><br><span class="line">      modeStr = <span class="string">"❤️ ERROR"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"<span class="subst">$modeStr</span> <span class="subst">$&#123;frame.uri.toString().split(<span class="string">"/"</span>).last&#125;</span>(<span class="subst">$&#123;frame.line&#125;</span>) - <span class="subst">$msg</span> "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;做 &lt;code&gt;iOS&lt;/code&gt; 开发时这个功能很常用， 在 &lt;code&gt;OC&lt;/code&gt; 和 &lt;code&gt;Swift&lt;/code&gt; 中都可以很轻松实现，因为系统本来就提供了用于日志输出的预处理宏，只要我们拿来拼接就可以了，但是在 &lt;code&gt;Dart&lt;/code&gt; 中并不提供这些，那有什么办法实现它呢？&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="Flutter" scheme="http://linxunfeng.top/categories/Flutter/"/>
    
    
    <category term="Dart" scheme="http://linxunfeng.top/tags/Dart/"/>
    
    <category term="Flutter" scheme="http://linxunfeng.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Dart - 抽象类的实例化</title>
    <link href="http://linxunfeng.top/2020/06/07/Flutter/Dart-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96/"/>
    <id>http://linxunfeng.top/2020/06/07/Flutter/Dart-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96/</id>
    <published>2020-06-07T11:27:00.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>抽象类不能用于创建实例，但是有没有发现，<code>Dart</code> 提供的 <code>Map</code> 和 <code>List</code> 就是抽象类，却可以直接使用它们创建出一个实例对象</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><h2 id="一、抽象类的使用"><a href="#一、抽象类的使用" class="headerlink" title="一、抽象类的使用"></a>一、抽象类的使用</h2><p><code>Dart</code> 抽象类可以只声明方法，也可以有具体的方法实现，但是不能直接用抽象类来创建实例，只能被继承使用或者充当接口。</p><p>定义一个抽象类 <code>Animal</code><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 仅声明eat方法</span></span><br><span class="line">  <span class="keyword">void</span> eat();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 声明方法，且有具体实现</span></span><br><span class="line">  <span class="keyword">void</span> sleep() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"睡觉"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继承使用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> eat() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"喵喵吃"</span>);</span><br><span class="line">    sleep();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以不实现 sleep 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>充当接口<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> eat() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"吃"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 必须实现 sleep 方法</span></span><br><span class="line">  <span class="keyword">void</span> sleep() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'睡'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实例化<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> animal = Animal();</span><br><span class="line"><span class="comment">// 抽象类实例化会报错</span></span><br><span class="line"><span class="comment">// Error: The class 'Test' is abstract and can't be instantiated.</span></span><br></pre></td></tr></table></figure></p><blockquote><ul><li>抽象类不能实例化。</li><li>继承: 子类比较实现抽象方法，子类可以不重写抽象类中已实现的方法。</li><li>接口: 必须实现抽象类中声明的所有方法</li></ul></blockquote><h2 id="二、抽象类的实例化"><a href="#二、抽象类的实例化" class="headerlink" title="二、抽象类的实例化"></a>二、抽象类的实例化</h2><p>上面提到了抽象类不能用于创建实例，但是有没有发现，<code>Dart</code> 提供的 <code>Map</code> 和 <code>List</code> 就是抽象类，却可以直接使用它们创建出一个实例对象<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> list = <span class="built_in">List</span>();</span><br><span class="line"><span class="keyword">final</span> dict = <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;();</span><br></pre></td></tr></table></figure><br>我们来看一下 <code>Map</code> 的源码：<br><img src= "/img/loading.gif" data-src="/images/2020/06/Dart-抽象类的实例化/Map源码.png" alt="Map源码"></p><p><code>Map</code> 的确是抽象类，不过此时我们也注意到了，在 <code>Map</code> 这个抽象类中，定义了一个工厂构造方法，<strong>这就是使抽象类可实例化的关键所在，因为工厂方法可以返回一个实例对象，但这个对象的类型不一定就是当前类!</strong></p><p>在这个地方，<code>Map</code> 的工厂方法并没有具体的实现，而只是在工厂构造方法前加了一个关键字 <code>external</code>。<br><code>external</code> 关键字可以让方法的声明与实现分离，即 可以由外部来帮我们完成具体的方法实现，那外部如何才能关联到该声明的方法呢？这里就需要用到注解 <code>@patch</code>，使外部的方法实现与该声明的方法绑定</p><blockquote><p><code>external</code> 可以分离方法的声明与实现<br><code>@patch</code> 关联某个类中用 <code>external</code> 修饰的方法的实现</p></blockquote><p>根据如下路径可以找到 <code>Map</code> 的具体实现源码<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flutter/bin/cache/dart-sdk/lib/_internal/vm/lib/map_patch.dart</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@patch</span></span><br><span class="line"><span class="keyword">factory</span> <span class="built_in">Map</span>() =&gt; <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;();</span><br></pre></td></tr></table></figure></p><p>可以看到，这里使用了 <code>LinkedHashMap</code> 来实现 <code>Map</code> 。</p><p>我们再去看一下 <code>LinkedHashMap</code> 的实现源码，路径如下：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flutter/bin/cache/dart-sdk/lib/collection/linked_hash_map.dart</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">external</span> <span class="keyword">factory</span> LinkedHashMap(</span><br><span class="line">    &#123;<span class="built_in">bool</span> <span class="built_in">Function</span>(K, K)? equals,</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">Function</span>(K)? hashCode,</span><br><span class="line">    <span class="built_in">bool</span> <span class="built_in">Function</span>(<span class="built_in">dynamic</span>)? isValidKey&#125;);</span><br></pre></td></tr></table></figure><br>这里我们又发现 <code>LinkedHashMap</code> 也仅仅只是声明，找到具体实现</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flutter/bin/cache/dart-sdk/lib/_internal/vm/lib/collection_patch.dart</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@patch</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@patch</span></span><br><span class="line">  <span class="keyword">factory</span> LinkedHashMap(</span><br><span class="line">      &#123;<span class="built_in">bool</span> equals(K key1, K key2)?,</span><br><span class="line">      <span class="built_in">int</span> hashCode(K key)?,</span><br><span class="line">      <span class="built_in">bool</span> isValidKey(potentialKey)?&#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isValidKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (hashCode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (equals == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> _InternalLinkedHashMap&lt;K, V&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        hashCode = _defaultHashCode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (identical(identityHashCode, hashCode) &amp;&amp;</span><br><span class="line">            identical(identical, equals)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> _CompactLinkedIdentityHashMap&lt;K, V&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        equals ??= _defaultEquals;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      hashCode ??= _defaultHashCode;</span><br><span class="line">      equals ??= _defaultEquals;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> _CompactLinkedCustomHashMap&lt;K, V&gt;(equals, hashCode, isValidKey);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>LinkedHashMap</code>的工厂构造方法返回的实例类型是 <code>_InternalLinkedHashMap</code> 或 <code>_CompactLinkedCustomHashMap</code> ，这里我们再看一下这两个类的实现源码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flutter/bin/cache/dart-sdk/lib/_internal/vm/lib/compact_hash.dart</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@pragma</span>(<span class="string">"vm:entry-point"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_InternalLinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">_HashVMBase</span></span></span><br><span class="line"><span class="class">    <span class="title">with</span></span></span><br><span class="line"><span class="class">        <span class="title">MapMixin</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">_LinkedHashMapMixin</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">_HashBase</span>,</span></span><br><span class="line"><span class="class">        <span class="title">_OperatorEqualsAndHashCode</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  _InternalLinkedHashMap() &#123;</span><br><span class="line">    _index = <span class="keyword">new</span> Uint32List(_HashBase._INITIAL_INDEX_SIZE);</span><br><span class="line">    _hashMask = _HashBase._indexSizeToHashMask(_HashBase._INITIAL_INDEX_SIZE);</span><br><span class="line">    _data = <span class="keyword">new</span> <span class="built_in">List</span>.filled(_HashBase._INITIAL_INDEX_SIZE, <span class="keyword">null</span>);</span><br><span class="line">    _usedData = <span class="number">0</span>;</span><br><span class="line">    _deletedKeys = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CompactLinkedIdentityHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">_HashFieldBase</span></span></span><br><span class="line"><span class="class">    <span class="title">with</span></span></span><br><span class="line"><span class="class">        <span class="title">MapMixin</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">_LinkedHashMapMixin</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">_HashBase</span>,</span></span><br><span class="line"><span class="class">        <span class="title">_IdenticalAndIdentityHashCode</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  _CompactLinkedIdentityHashMap() : <span class="keyword">super</span>(_HashBase._INITIAL_INDEX_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CompactLinkedCustomHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">_HashFieldBase</span></span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">MapMixin</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">_LinkedHashMapMixin</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">_HashBase</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _equality;</span><br><span class="line">  <span class="keyword">final</span> _hasher;</span><br><span class="line">  <span class="keyword">final</span> _validKey;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TODO(koda): Ask gbracha why I cannot have fields _equals/_hashCode.</span></span><br><span class="line">  <span class="built_in">int</span> _hashCode(e) =&gt; _hasher(e);</span><br><span class="line">  <span class="built_in">bool</span> _equals(e1, e2) =&gt; _equality(e1, e2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> containsKey(<span class="built_in">Object</span>? o) =&gt; _validKey(o) ? <span class="keyword">super</span>.containsKey(o) : <span class="keyword">false</span>;</span><br><span class="line">  V? <span class="keyword">operator</span> [](<span class="built_in">Object</span>? o) =&gt; _validKey(o) ? <span class="keyword">super</span>[o] : <span class="keyword">null</span>;</span><br><span class="line">  V? remove(<span class="built_in">Object</span>? o) =&gt; _validKey(o) ? <span class="keyword">super</span>.remove(o) : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  _CompactLinkedCustomHashMap(<span class="keyword">this</span>._equality, <span class="keyword">this</span>._hasher, validKey)</span><br><span class="line">      : _validKey = (validKey != <span class="keyword">null</span>) ? validKey : <span class="keyword">new</span> _TypeTest&lt;K&gt;().test,</span><br><span class="line">        <span class="keyword">super</span>(_HashBase._INITIAL_INDEX_SIZE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它们都是一个普通的类，没有工厂构造方法，也就是说 <code>Map</code> 中的 <code>external factory Map();</code> 最终返回的最终实例类型为 <code>_InternalLinkedHashMap</code> 或 <code>_CompactLinkedCustomHashMap</code></p><p>我们可以做一个简单的验证<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> map = <span class="built_in">Map</span>();</span><br><span class="line"><span class="built_in">print</span>(map.runtimeType);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="comment">// _InternalLinkedHashMap&lt;dynamic, dynamic&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们来试着来实例化一个抽象类吧<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> eat();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> sleep() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"睡觉"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Animal() &#123;</span><br><span class="line">    <span class="keyword">return</span> Cat();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> eat() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"吃"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> sleep() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'睡'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> animal = Animal();</span><br><span class="line"><span class="built_in">print</span>(animal.runtimeType); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果: Cat</span></span><br></pre></td></tr></table></figure><p>可能会有同学要问了，这里用的是接口的方式，可以用继承的方式吗？<br><strong>很遗憾不行，因为在抽象类中定义了工厂构造方法后，在子类中不能定义除工厂构造方法外的其它构造方法了，会报错~</strong></p><p>总结一下：</p><blockquote><p>抽象类无法直接创建实例，但是可以通过实现工厂构造方法来间接实现抽象类的实例化！</p></blockquote><h2 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h2><p>那饶了这么一大圈，为什么不直接在声明的时候就给它实现了呢？🤔<br>这样做的好处就是：</p><blockquote><ul><li>复用同一套API的声明</li><li>可以针对不同的平台做不同的实现</li></ul></blockquote><p>而 <code>针对不同的平台做不同的实现</code> 这一点在下方给出的源码中可以看出</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flutter/bin/cache/dart-sdk/lib/io/file_system_entity.dart</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">_FileSystemWatcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">external</span> <span class="keyword">static</span> Stream&lt;FileSystemEvent&gt; _watch(</span><br><span class="line">      <span class="built_in">String</span> path, <span class="built_in">int</span> events, <span class="built_in">bool</span> recursive);</span><br><span class="line">  <span class="keyword">external</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">get</span> isSupported;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flutter/bin/cache/dart-sdk/lib/_internal/vm/bin/file_patch.dart</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@patch</span></span><br><span class="line"><span class="keyword">static</span> Stream&lt;FileSystemEvent&gt; _watch(</span><br><span class="line">    <span class="built_in">String</span> path, <span class="built_in">int</span> events, <span class="built_in">bool</span> recursive) &#123;</span><br><span class="line">  <span class="keyword">if</span> (Platform.isLinux) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> _InotifyFileSystemWatcher(path, events, recursive)._stream;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (Platform.isWindows) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> _Win32FileSystemWatcher(path, events, recursive)._stream;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (Platform.isMacOS) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> _FSEventStreamFileSystemWatcher(path, events, recursive)</span><br><span class="line">        ._stream;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemException(</span><br><span class="line">      <span class="string">"File system watching is not supported on this platform"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;抽象类不能用于创建实例，但是有没有发现，&lt;code&gt;Dart&lt;/code&gt; 提供的 &lt;code&gt;Map&lt;/code&gt; 和 &lt;code&gt;List&lt;/code&gt; 就是抽象类，却可以直接使用它们创建出一个实例对象&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="Flutter" scheme="http://linxunfeng.top/categories/Flutter/"/>
    
    
    <category term="Dart" scheme="http://linxunfeng.top/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>解决SecurityEnvSDK与SGMain的冲突问题</title>
    <link href="http://linxunfeng.top/2020/03/14/%E8%A7%A3%E5%86%B3SecurityEnvSDK%E4%B8%8ESGMain%E7%9A%84%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/"/>
    <id>http://linxunfeng.top/2020/03/14/%E8%A7%A3%E5%86%B3SecurityEnvSDK%E4%B8%8ESGMain%E7%9A%84%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-14T13:21:00.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>报错是说有重复类，解决的办法比较简单粗暴，就是把在Xcode里全文搜索<br><code>-framework &quot;SecurityEnvSDK&quot;</code>，接着全文替换为空字符串就可以了。</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在集成友盟统计和阿里百川之后项目报如下错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">duplicate symbol '_OBJC_CLASS_$_tdvSFHFKeychainUtils' in:</span><br><span class="line">    /Users/.../Pods/UMCSecurityPlugins/thirdparties/SecurityEnvSDK.framework/SecurityEnvSDK(SecurityEnvSDK99999999.o)</span><br><span class="line">    /Users/.../阿里百川/WXFrameworks/SGMain.framework/SGMain(SGMain99999999.o)</span><br><span class="line">duplicate symbol '_OBJC_METACLASS_$_tdvSFHFKeychainUtils' in:</span><br><span class="line">    /Users/.../Pods/UMCSecurityPlugins/thirdparties/SecurityEnvSDK.framework/SecurityEnvSDK(SecurityEnvSDK99999999.o)</span><br><span class="line">    /Users/.../阿里百川/WXFrameworks/SGMain.framework/SGMain(SGMain99999999.o)</span><br><span class="line">duplicate symbol '_OBJC_CLASS_$_SGDataCollectionLock' in:</span><br><span class="line">    /Users/.../Pods/UMCSecurityPlugins/thirdparties/SecurityEnvSDK.framework/SecurityEnvSDK(SecurityEnvSDK99999999.o)</span><br><span class="line">    /Users/.../阿里百川/WXFrameworks/SGMain.framework/SGMain(SGMain99999999.o)</span><br><span class="line">duplicate symbol '_OBJC_METACLASS_$_SGDataCollectionLock' in:</span><br><span class="line">    /Users/.../Pods/UMCSecurityPlugins/thirdparties/SecurityEnvSDK.framework/SecurityEnvSDK(SecurityEnvSDK99999999.o)</span><br><span class="line">    /Users/.../阿里百川/WXFrameworks/SGMain.framework/SGMain(SGMain99999999.o)</span><br></pre></td></tr></table></figure><blockquote><p> 报错是说有重复类，解决的办法比较简单粗暴，就是把在Xcode里全文搜索<br> <code>-framework &quot;SecurityEnvSDK&quot;</code>，接着全文替换为空字符串就可以了。</p></blockquote><p>虽然解决这个问题的方式很简单，但是每次 <code>pod install</code> 后都要做一遍该操作，这就很无语了 。</p><p>那有什么办法可以让我们不用自己去做这个烦琐的事情呢？</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ol><li><p>首先要搞清楚，上面的操作原理是怎么回事？其它很简单，就是将下面这两个文件中 <code>OTHER_LDFLAGS</code> 所在行的内容里，把 <code>-framework &quot;SecurityEnvSDK&quot;</code> 置为空字符串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pods/Target Support Files/Pods-项目名/Pods-项目名.debug.xcconfig</span><br><span class="line">Pods/Target Support Files/Pods-项目名/Pods-项目名.release.xcconfig</span><br></pre></td></tr></table></figure></li><li><p>有什么办法可以让我们在适当的时候去执行这个置空字符串的操作？<br><code>Cocoapods</code> 提供了一个很好用的 <code>Hook</code> 就是 <code>post_install</code>，这个钩子的作用就是方便我们在执行 <code>pod install</code> 之后去做一些其它配置，这里我们就用它来搞事情。</p></li></ol><p><code>Podfile</code> 文件中使用的是 <code>ruby</code> 语言，<code>ruby</code> 执行终端命令的代码如下所示：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">post_install do |installer|</span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">command</span> = <span class="string">"echo 'hello world'"</span></span></span><br><span class="line">  command = "终端命令"</span><br><span class="line">  system(command)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><br>OK，现在开始搞事！</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>在项目的目录，即与<code>Pods</code>平级目录中，新建一个文件，名为 <code>fix.py</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ...</span><br><span class="line">├── Podfile</span><br><span class="line">├── Podfile.lock</span><br><span class="line">├── Pods</span><br><span class="line">│   ├── ...</span><br><span class="line">│   └── ...</span><br><span class="line">└── fix.py</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>fix.py</code> 中粘贴如下内容<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys, os, getopt, codecs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_current_file_name</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""获取当前文件名称"""</span></span><br><span class="line">    <span class="keyword">return</span> os.path.split(__file__)[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_all_str</span><span class="params">(file_path, for_str, to_str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    全文搜索替换或单行替换</span></span><br><span class="line"><span class="string">    :param file_path: 文件路径</span></span><br><span class="line"><span class="string">    :param for_str: 要被替换的内容</span></span><br><span class="line"><span class="string">    :param to_str: 替换之后的内容</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">        <span class="comment"># 文件不存在</span></span><br><span class="line">        print(<span class="string">'文件不存在'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    bak_file_path = file_path+<span class="string">".bak"</span></span><br><span class="line">    <span class="keyword">with</span> codecs.open(file_path, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f, codecs.open(bak_file_path, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f_w:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"OTHER_LDFLAGS"</span> <span class="keyword">in</span> line <span class="keyword">and</span> for_str <span class="keyword">in</span> line:</span><br><span class="line">                line = line.replace(for_str, to_str)</span><br><span class="line">            f_w.write(line)</span><br><span class="line"></span><br><span class="line">    os.remove(file_path)</span><br><span class="line">    os.rename(bak_file_path, file_path)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">throwParamError</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"请正确输入命令： %s -p 项目名称"</span> % get_current_file_name())</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">    project_name = <span class="string">""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opts, args = getopt.getopt(argv, <span class="string">"p:"</span>, [<span class="string">"project="</span>])</span><br><span class="line">    <span class="keyword">except</span> getopt.GetoptError:</span><br><span class="line">        throwParamError()</span><br><span class="line">    <span class="keyword">for</span> opt, arg <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="comment"># print("opt -- ", opt)</span></span><br><span class="line">        <span class="comment"># print("arg -- ", arg)</span></span><br><span class="line">        <span class="keyword">if</span> opt <span class="keyword">in</span> (<span class="string">'-p'</span>, <span class="string">'--project'</span>):</span><br><span class="line">            project_name = arg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> len(project_name):</span><br><span class="line">        throwParamError()</span><br><span class="line">    </span><br><span class="line">    path_str = <span class="string">"Pods/Target Support Files/Pods-%s/Pods-%s.%s.xcconfig"</span></span><br><span class="line">    xcconfig_debug_path = path_str % (project_name, project_name, <span class="string">"debug"</span>)</span><br><span class="line">    xcconfig_release_path = path_str % (project_name, project_name, <span class="string">"release"</span>)</span><br><span class="line">    <span class="comment"># print(xcconfig_debug_path)</span></span><br><span class="line">    <span class="comment"># print(xcconfig_release_path)</span></span><br><span class="line">    be_fixed_str = <span class="string">'-framework "SecurityEnvSDK"'</span></span><br><span class="line">    replace_all_str(xcconfig_debug_path,  be_fixed_str, <span class="string">''</span>)</span><br><span class="line">    replace_all_str(xcconfig_release_path,  be_fixed_str, <span class="string">''</span>)</span><br><span class="line">    print(<span class="string">"%s is fixed successfully"</span> %project_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure></li><li>打开 <code>Podfile</code>，在内容最后添加如下内容<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">post_install <span class="keyword">do</span> <span class="params">|installer|</span></span><br><span class="line">  <span class="comment"># 解决SecurityEnvSDK与SGMain的冲突问题</span></span><br><span class="line">  command = <span class="string">"python fix.py -p 项目名称"</span></span><br><span class="line">  system(command)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li>执行<code>pod install</code></li></ol><p>好了，现在开始就又可以继续愉快的搬砖了~</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>相关代码文件可以到这里下载，如果觉得不错，不妨给个 <code>Star</code> 鼓励一下<br><a href="https://github.com/LinXunFeng/fix_confict_SecurityEnvSDK_SGMain" target="_blank" rel="noopener">https://github.com/LinXunFeng/fix_confict_SecurityEnvSDK_SGMain</a></p>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;报错是说有重复类，解决的办法比较简单粗暴，就是把在Xcode里全文搜索&lt;br&gt;&lt;code&gt;-framework &amp;quot;SecurityEnvSDK&amp;quot;&lt;/code&gt;，接着全文替换为空字符串就可以了。&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="iOS" scheme="http://linxunfeng.top/categories/iOS/"/>
    
    
    <category term="Cocoapods" scheme="http://linxunfeng.top/tags/Cocoapods/"/>
    
    <category term="iOS" scheme="http://linxunfeng.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>解决Transporter一直卡正在验证的问题</title>
    <link href="http://linxunfeng.top/2020/03/12/%E8%A7%A3%E5%86%B3Transporter%E4%B8%80%E7%9B%B4%E5%8D%A1%E6%AD%A3%E5%9C%A8%E9%AA%8C%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://linxunfeng.top/2020/03/12/%E8%A7%A3%E5%86%B3Transporter%E4%B8%80%E7%9B%B4%E5%8D%A1%E6%AD%A3%E5%9C%A8%E9%AA%8C%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-12T22:16:00.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>苹果的上传应用工具 <code>Transporter</code> 虽然挺好用，但是估计也不少人跟我一样遇到过这样的问题，就是一直卡在 <code>正在验证</code>，不采取点措施估计能一直卡下去~</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><blockquote><p>苹果的上传应用工具 <code>Transporter</code> 虽然挺好用，但是估计也不少人跟我一样遇到过这样的问题，就是一直卡在 <code>正在验证</code>，不采取点措施估计能一直卡下去~</p></blockquote><p><img src= "/img/loading.gif" data-src="/images/2020/03/解决Transporter一直卡正在验证的问题/正在验证APP.jpg" alt="正在验证APP"></p><p>其实原因很简单，就是 <code>/User/当前登录用户/Library/Caches/com.apple.amp.itmstransporter</code> 这个目录里的文件不全，一直处于下载更新的状态。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>科学上网前提下，在终端下执行  <code>Transporter</code> 包内的 <code>iTMSTransporter</code>，<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Transporter.app/Contents/itms/bin/iTMSTransporter</span><br></pre></td></tr></table></figure><br>因为国外服务器（<code>contentdelivery.itunes.apple.com:443</code>）对我们来说会很慢，所以这个过程最好弄下科学环境。</p><p>直到出现这个命令说明界面就可以了<br><img src= "/img/loading.gif" data-src="/images/2020/03/解决Transporter一直卡正在验证的问题/iTMSTransporter.png" alt=""></p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>适用人群</p><ul><li>没有科学环境</li><li>速度要求高的</li><li>比较懒的</li></ul><p>可以使用 <code>transporter_fix</code><br>GitHub地址：<a href="https://github.com/LinXunFeng/transporter_fix" target="_blank" rel="noopener">https://github.com/LinXunFeng/transporter_fix</a><br>执行文件下载地址：<a href="https://github.com/LinXunFeng/transporter_fix/releases" target="_blank" rel="noopener">点我下载</a>，下载后双击运行即可。</p><p><img src= "/img/loading.gif" data-src="/images/2020/03/解决Transporter一直卡正在验证的问题/transporter_fix.png" alt=""></p><p>比较懒的朋友看到这就可以了，要求速度快的就继续往下看</p><p><strong>重点</strong></p><ul><li><code>transporter_fix</code> 默认是从 <code>github</code> 上下载 <code>com.apple.amp.itmstransporter.zip</code> 到同目录级别的 <code>files</code> 目录下。</li><li>如果 <code>files</code> 目录下已存在 <code>com.apple.amp.itmstransporter.zip</code> ，则不会重新下载。</li></ul><p>所以，如果当前正常网络对 <code>github</code> 不给力，可以到<a href="https://www.lanzous.com/b0aqkmhpg" target="_blank" rel="noopener">这里</a>，找个离当前日期最近的压缩包，下载下来后改名为 <code>com.apple.amp.itmstransporter.zip</code>，存放 <code>files</code> 目录下即可</p><p><img src= "/img/loading.gif" data-src="/images/2020/03/解决Transporter一直卡正在验证的问题/itmstransporter压缩包存放位置.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;苹果的上传应用工具 &lt;code&gt;Transporter&lt;/code&gt; 虽然挺好用，但是估计也不少人跟我一样遇到过这样的问题，就是一直卡在 &lt;code&gt;正在验证&lt;/code&gt;，不采取点措施估计能一直卡下去~&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="iOS" scheme="http://linxunfeng.top/categories/iOS/"/>
    
    
    <category term="iOS" scheme="http://linxunfeng.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>FQ-Terminal下的代理工具ProxyChains-NG</title>
    <link href="http://linxunfeng.top/2019/01/01/Others/FQ-Terminal%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7ProxyChains-NG/"/>
    <id>http://linxunfeng.top/2019/01/01/Others/FQ-Terminal%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7ProxyChains-NG/</id>
    <published>2019-01-01T17:11:51.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>是不是你也遇到过，在 <code>Shadowsocks</code> 使用 <code>全局</code> 模式下，终端依旧无法 <code>ping</code> 通谷歌？这是因为 <code>Shadowsocks</code> 仅针对代理应用软件，但是一些终端下执行的命令是无法代理的。所以本篇就来介绍一下如何使你的终端也走代理进行访问。  </p><a id="more"></a><The rest of contents | 余下全文><blockquote><p>是不是你也遇到过，在 <code>Shadowsocks</code> 使用 <code>全局</code> 模式下，终端依旧无法 <code>ping</code> 通谷歌？这是因为 <code>Shadowsocks</code> 仅针对代理应用软件，但是一些终端下执行的命令是无法代理的。所以本篇就来介绍一下如何使你的终端也走代理进行访问。</p></blockquote><h2 id="方案一：终端下的all-proxy"><a href="#方案一：终端下的all-proxy" class="headerlink" title="方案一：终端下的all_proxy"></a>方案一：终端下的all_proxy</h2><blockquote><p>这里以 <code>zshrc</code> + <code>Shadowsocks</code> 为例</p><ul><li><p>打开 <code>Shadowsocks</code>，模式选为 <code>PAC自动模式</code> 或 <code>全局模式</code> </p></li><li><p>如果不是使用 <code>.zshrc</code> 就 编辑 <code>~/.bashrc</code>，下面的同理</p></li></ul></blockquote><h3 id="1、打开-zshrc"><a href="#1、打开-zshrc" class="headerlink" title="1、打开 .zshrc"></a>1、打开 <code>.zshrc</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="2、添加命令"><a href="#2、添加命令" class="headerlink" title="2、添加命令"></a>2、添加命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias proxy='export all_proxy=socks5://127.0.0.1:1086'</span><br><span class="line">alias unproxy='unset all_proxy'</span><br></pre></td></tr></table></figure><h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h3><p>先应用一下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>终端下敲入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy</span><br></pre></td></tr></table></figure><p>这样就应用上代理了，使用 <code>curl</code> 获取一下 <code>cip.cc</code> 来查看当前所使用的 <code>ip</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl cip.cc</span><br></pre></td></tr></table></figure><p>如果不想使用代理了，就使用如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unproxy</span><br></pre></td></tr></table></figure><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p>这种方式我个人是亲测无效的，不知道是不是我人品问题，还是我的 MAC 有问题，有兴趣的小伙伴可以试试。</p><h2 id="方案二：ProxyChains-NG"><a href="#方案二：ProxyChains-NG" class="headerlink" title="方案二：ProxyChains-NG"></a>方案二：ProxyChains-NG</h2><p>proxychains-ng是proxychains的加强版，主要有以下功能和不足：</p><ul><li>支持http/https/socks4/socks5</li><li>支持认证</li><li>远端dns查询</li><li>多种代理模式</li><li>不支持udp/icmp转发</li><li>少部分程序和在后台运行的可能无法代理</li></ul><p>详情可见 <a href="https://github.com/rofl0r/proxychains-ng" target="_blank" rel="noopener">GitHub地址</a></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>这里以 <code>MAC</code> + <code>homebrew</code> 为例，如果你还没有安装的话可以参考下方命令，详细可见官网 <a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">Homebrew</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将命令粘贴至终端并回车进行安装</span></span><br><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><h3 id="关闭SIP"><a href="#关闭SIP" class="headerlink" title="关闭SIP"></a>关闭SIP</h3><p>macOS 10.11 后下由于开启了 SIP（System Integrity Protection） 会导致命令行下 proxychains-ng 代理的模式失效，如果你要使用 proxychains-ng 这种简单的方法，就需要先关闭 SIP。</p><p>具体的关闭方法如下：</p><ul><li>部分关闭 SIP</li></ul><blockquote><p>重启Mac，按住Option键进入启动盘选择模式，再按⌘ + R进入Recovery模式。<br>实用工具（Utilities）-&gt; 终端（Terminal）。<br>输入命令<code>csrutil enable --without debug</code>运行。<br>重启进入系统后，终端里输入 csrutil status，结果中如果有 Debugging Restrictions: disabled 则说明关闭成功。</p></blockquote><ul><li>完全关闭 SIP</li></ul><blockquote><p>重启Mac，按住Option键进入启动盘选择模式，再按⌘ + R进入Recovery模式。<br>实用工具（Utilities）-&gt; 终端（Terminal）。<br>输入命令<code>csrutil disable</code>运行。<br>重启进入系统后，终端里输入 csrutil status，结果中如果有 System Integrity Protection status:disabled. 则说明关闭成功。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install proxychains-ng</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>使用 Homebrew 安装完成后的配置文件路径为 <code>/usr/local/etc/proxychains.conf</code></p><p>打开它，找到 <code>[ProxyList]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line">socks5  127.0.0.1 1086</span><br></pre></td></tr></table></figure><p>proxychains-ng支持多种代理模式,默认是选择 strict_chain。</p><ul><li>dynamic_chain ：动态模式,按照代理列表顺序自动选取可用代理</li><li>strict_chain ：严格模式,严格按照代理列表顺序使用代理，所有代理必须可用</li><li>round_robin_chain ：轮询模式，自动跳过不可用代理</li><li>random_chain ：随机模式,随机使用代理</li></ul><p>给proxychains4增加一个别名，在 ~/.zshrc或~/.bashrc末尾加入如下行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias pc='proxychains4'</span><br></pre></td></tr></table></figure><p>这样就可以使用 <code>pc</code> 来 指代 <code>proxychains4</code>，简化输入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pc curl cip.cc</span><br></pre></td></tr></table></figure><p>如果你使用 <code>iTerm</code> 的话可以配置快捷键来实现前缀补全功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 iTerm -&gt; Preferences -&gt; Profiles -&gt; Keys 中，新建一个快捷键，例如 ⌥ + p ，Action 选择 Send Hex Code，键值为 0x1 0x70 0x63 0x20 0xd，保存生效。</span><br></pre></td></tr></table></figure><p>更多的Hex Code可以到 <a href="https://manytricks.com/keycodes/" target="_blank" rel="noopener">manytricks</a> 上查找。</p><p>使用场景：敲了一长串的命令后想使用代理功能时，就可以直接使用快捷键 <code>⌥ + p</code> ，这样就会自动在命令的最前面加上 <code>pc</code> </p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 curl cip.cc</span><br><span class="line"></span><br><span class="line">// 如果你设置了别名的话可以使用 pc 指代 proxychains4</span><br><span class="line">pc curl cip.cc</span><br></pre></td></tr></table></figure><p>可以看到这就代理上了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IP: xxx.xxx.xxx.xxx</span><br><span class="line">地址: 美国  加利福尼亚州  洛杉矶</span><br><span class="line">运营商: it7.net</span><br><span class="line"></span><br><span class="line">数据二: 美国</span><br><span class="line"></span><br><span class="line">数据三: 美国加利福尼亚洛杉矶</span><br><span class="line"></span><br><span class="line">URL: http:&#x2F;&#x2F;www.cip.cc&#x2F;xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;是不是你也遇到过，在 &lt;code&gt;Shadowsocks&lt;/code&gt; 使用 &lt;code&gt;全局&lt;/code&gt; 模式下，终端依旧无法 &lt;code&gt;ping&lt;/code&gt; 通谷歌？这是因为 &lt;code&gt;Shadowsocks&lt;/code&gt; 仅针对代理应用软件，但是一些终端下执行的命令是无法代理的。所以本篇就来介绍一下如何使你的终端也走代理进行访问。  &lt;/p&gt;</summary>
    
    
    
    <category term="Others" scheme="http://linxunfeng.top/categories/Others/"/>
    
    
    <category term="FQ" scheme="http://linxunfeng.top/tags/FQ/"/>
    
    <category term="Terminal" scheme="http://linxunfeng.top/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title>Swift 掌控Moya的网络请求、数据解析与缓存</title>
    <link href="http://linxunfeng.top/2018/10/27/Swift-%E6%8E%8C%E6%8E%A7Moya%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E3%80%81%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E4%B8%8E%E7%BC%93%E5%AD%98/"/>
    <id>http://linxunfeng.top/2018/10/27/Swift-%E6%8E%8C%E6%8E%A7Moya%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E3%80%81%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E4%B8%8E%E7%BC%93%E5%AD%98/</id>
    <published>2018-10-27T23:41:37.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <ul><li><code>Moya</code> 在Swift开发中起着重要的网络交互作用，但是还有不如之处，比如网络不可用时，返回的 <code>Response</code> 为 <code>nil</code>，这时还得去解析相应的 <code>Error</code></li><li><code>Codable</code> 可以帮助我们快速的解析数据，但是一旦声明的属性类型与json中的不一致，将无法正常解析; 而且对于模型中自定义属性名的处理也十分繁琐</li></ul><p>+<a id="more"></a></p><The rest of contents | 余下全文><ul><li><code>Moya</code> 在Swift开发中起着重要的网络交互作用，但是还有不如之处，比如网络不可用时，返回的 <code>Response</code> 为 <code>nil</code>，这时还得去解析相应的 <code>Error</code></li><li><code>Codable</code> 可以帮助我们快速的解析数据，但是一旦声明的属性类型与json中的不一致，将无法正常解析; 而且对于模型中自定义属性名的处理也十分繁琐</li></ul><p>解决的方案有很多，不过我比较习惯使用 <code>MoyaMapper</code> ，不仅可以解决上述问题，还提供了多种<code>模型转换</code>、<code>数据互转</code>、<code>多种数据类型任意存储</code>的便捷方法。掌控Moya的网络请求、数据解析与缓存简直易如反掌。</p><blockquote><p><code>MoyaMapper</code>是基于Moya和SwiftyJSON封装的工具，以Moya的plugin的方式来实现间接解析，支持RxSwift</p><p> GitHub: <a href="https://github.com/MoyaMapper/MoyaMapper" target="_blank" rel="noopener">MoyaMapper</a></p><p>📖 详细的使用请查看手册 <a href="https://moyamapper.github.io/" target="_blank" rel="noopener">https://MoyaMapper.github.io</a></p></blockquote><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>支持<code>json</code> 转 <code>Model</code> 自动映射 与 自定义映射</li><li>无视 <code>json</code> 中值的类型，<code>Model</code> 中属性声明的是什么类型，它就是什么类型</li><li>支持 <code>Data</code> <code>字典</code> <code>JSON</code> <code>json字符串</code> <code>Model</code> 互转</li><li>插件方式，全方位保障<code>Moya.Response</code>，拒绝各种网络问题导致 <code>Response</code> 为 <code>nil</code>，将各式各样的原因导致的数据加载失败进行统一处理，开发者只需要关注 <code>Response</code></li><li>可选 - 支持数据随意缓存( <code>JSON</code> 、 <code>Number</code> 、<code>String</code>、 <code>Bool</code>、 <code>Moya.Response</code> )</li><li>可选 - 支持网络请求缓存</li></ul><h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><h5 id="一、插件注入"><a href="#一、插件注入" class="headerlink" title="一、插件注入"></a>一、插件注入</h5><p>附：<a href="https://moyamapper.github.io/plugin/" target="_blank" rel="noopener">插件 MoyaMapperPlugin 的详细使用</a></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/10/Swift-掌控Moya的网络请求、数据解析与缓存/success-obj.png" alt=""></p><p>1、定义适用于项目接口的 <code>ModelableParameterType</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// statusCodeKey、tipStrKey、 modelKey 可以任意指定级别的路径，如： "error&gt;used"</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NetParameter</span> : <span class="title">ModelableParameterType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> successValue = <span class="string">"000"</span></span><br><span class="line">    <span class="keyword">var</span> statusCodeKey = <span class="string">"retStatus"</span></span><br><span class="line">    <span class="keyword">var</span> tipStrKey = <span class="string">"retMsg"</span></span><br><span class="line">    <span class="keyword">var</span> modelKey = <span class="string">"retBody"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、在 <code>MoyaProvider</code> 中使用 <code>MoyaMapperPlugin</code> 插件，并指定 <code>ModelableParameterType</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lxfNetTool = <span class="type">MoyaProvider</span>&lt;<span class="type">LXFNetworkTool</span>&gt;(plugins: [<span class="type">MoyaMapperPlugin</span>(<span class="type">NetParameter</span>())])</span><br></pre></td></tr></table></figure><p>❗ 使用 <code>MoyaMapperPlugin</code> 插件是整个 <code>MoyaMapper</code>  的核心所在！</p><h5 id="二、Model声明"><a href="#二、Model声明" class="headerlink" title="二、Model声明"></a>二、Model声明</h5><blockquote><p><code>Model</code> 需遵守 <code>Modelable</code> 协议</p><ul><li><code>MoyaMapper</code> 支持模型自动映射 和 自定义映射</li><li>不需要考虑源json数据的真实类型，这里统一按 <code>Model</code> 中属性声明的类型进行转换</li></ul></blockquote><p>1、一般情况下如下写法即可</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CompanyModel</span>: <span class="title">Modelable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> catchPhrase : <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、如果自定义映射，则可以实现方法 <code>mutating func mapping(_ json: JSON)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CompanyModel</span>: <span class="title">Modelable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> catchPhrase : <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="number">_</span> json: JSON)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = json[<span class="string">"nickname"</span>].stringValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、支持模型嵌套</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserModel</span>: <span class="title">Modelable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> id : <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> company : <span class="type">CompanyModel</span> = <span class="type">CompanyModel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="三、Response-解析"><a href="#三、Response-解析" class="headerlink" title="三、Response 解析"></a>三、Response 解析</h5><blockquote><p>1、以下示例皆使用了 <code>MoyaMapperPlugin</code> ，所以不需要指定 <code>解析路径</code></p><p>2、如果没有使用 <code>MoyaMapperPlugin</code> 则需要指定 <code>解析路径</code>，否则无法正常解析</p><p>ps:  <code>解析路径</code> 可以使用 <code>a&gt;b</code> 这种形式来解决多级路径的问题</p></blockquote><p>解析方法如下列表所示</p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:left">描述 (支持RxSwift)</th></tr></thead><tbody><tr><td style="text-align:center">toJSON</td><td style="text-align:left">Response 转 JSON ( <a href="https://moyamapper.github.io/core/toJSON/" target="_blank" rel="noopener">toJSON</a>   <a href="https://moyamapper.github.io/rx/toJSON/" target="_blank" rel="noopener">rx.toJSON</a>)</td></tr><tr><td style="text-align:center">fetchString</td><td style="text-align:left">获取指定路径的字符串( <a href="https://moyamapper.github.io/core/fetchString/" target="_blank" rel="noopener">fetchString</a>   <a href="https://moyamapper.github.io/rx/fetchString/" target="_blank" rel="noopener">rx.fetchString</a>)</td></tr><tr><td style="text-align:center">fetchJSONString</td><td style="text-align:left">获取指定路径的原始json字符串 ( <a href="https://moyamapper.github.io/core/fetchJSONString/" target="_blank" rel="noopener">fetchJSONString</a>   <a href="https://moyamapper.github.io/rx/fetchJSONString/" target="_blank" rel="noopener">rx.fetchJSONString</a> )</td></tr><tr><td style="text-align:center">mapResult</td><td style="text-align:left">Response -&gt; MoyaMapperResult   <code>(Bool, String)</code> ( <a href="https://moyamapper.github.io/core/mapResult/" target="_blank" rel="noopener">mapResult</a>   <a href="https://moyamapper.github.io/rx/mapResult/" target="_blank" rel="noopener">rx.mapResult</a> )</td></tr><tr><td style="text-align:center">mapObject</td><td style="text-align:left">Response -&gt; Model ( <a href="https://moyamapper.github.io/core/mapObject/" target="_blank" rel="noopener">mapObject</a>   <a href="https://moyamapper.github.io/rx/mapObject/" target="_blank" rel="noopener">rx.mapObject</a>)</td></tr><tr><td style="text-align:center">mapObjResult</td><td style="text-align:left">Response -&gt; (MoyaMapperResult, Model) ( <a href="https://moyamapper.github.io/core/mapObjResult/" target="_blank" rel="noopener">mapObjResult</a>   <a href="https://moyamapper.github.io/rx/mapObjResult/" target="_blank" rel="noopener">rx.mapObjResult</a>)</td></tr><tr><td style="text-align:center">mapArray</td><td style="text-align:left">Response -&gt; [Model] ( <a href="https://moyamapper.github.io/core/mapArray/" target="_blank" rel="noopener">mapArray</a>  <a href="https://moyamapper.github.io/rx/mapArray/" target="_blank" rel="noopener">rx.mapArray</a>)</td></tr><tr><td style="text-align:center">mapArrayResult</td><td style="text-align:left">Response -&gt; (MoyaMapperResult, [Model]) ( <a href="https://moyamapper.github.io/core/mapArrayResult/" target="_blank" rel="noopener">mapArrayResult</a>   <a href="https://moyamapper.github.io/rx/mapArrayResult/" target="_blank" rel="noopener">rx.mapArrayResult</a>)</td></tr></tbody></table><p>❗除了 <code>fetchJSONString</code> 的默认解析路径是<code>根路径</code>之外，其它方法的默认解析路径为插件对象中的 <code>modelKey</code></p><p>如果接口请求后 <code>json</code> 的数据结构与下图类似，则使用 <code>MoyaMapper</code> 是最合适不过了</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/10/Swift-掌控Moya的网络请求、数据解析与缓存/success-obj.png" alt=""></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Normal</span></span><br><span class="line"><span class="keyword">let</span> model = response.mapObject(<span class="type">MMModel</span>.<span class="keyword">self</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"name -- \(model.name)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"github -- \(model.github)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印json</span></span><br><span class="line"><span class="built_in">print</span>(response.fetchJSONString())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rx</span></span><br><span class="line">rxRequest.mapObject(<span class="type">MMModel</span>.<span class="keyword">self</span>)</span><br><span class="line">    .subscribe(onSuccess: &#123; (model) <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"name -- \(model.name)"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"github -- \(model.github)"</span>)</span><br><span class="line">    &#125;).disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>附： <a href="https://moyamapper.github.io/core/fetchJSONString/" target="_blank" rel="noopener">fetchJSONString的详细使用</a></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/10/Swift-掌控Moya的网络请求、数据解析与缓存/success-array.png" alt=""></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Normal</span></span><br><span class="line"><span class="keyword">let</span> models = response.mapArray(<span class="type">MMModel</span>.<span class="keyword">self</span>)</span><br><span class="line"><span class="keyword">let</span> name = models[<span class="number">0</span>].name</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"count -- \(models.count)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"name -- \(name)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 json 模型数组中第一个的name</span></span><br><span class="line"><span class="built_in">print</span>(response.fetchString(keys: [<span class="number">0</span>, <span class="string">"name"</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rx</span></span><br><span class="line">rxRequest.mapArray(<span class="type">MMModel</span>.<span class="keyword">self</span>)</span><br><span class="line">    .subscribe(onSuccess: &#123; models <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> name = models[<span class="number">0</span>].name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"count -- \(models.count)"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"name -- \(name)"</span>)</span><br><span class="line">    &#125;).disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>附：<a href="https://moyamapper.github.io/core/mapArray/" target="_blank" rel="noopener">mapArray的详细使用说明</a></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/10/Swift-掌控Moya的网络请求、数据解析与缓存/fail.png" alt=""></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Normal</span></span><br><span class="line"><span class="keyword">let</span> (isSuccess, tipStr) = response.mapResult()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"isSuccess -- \(isSuccess)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"tipStr -- \(tipStr)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rx</span></span><br><span class="line">rxRequest.mapResult()</span><br><span class="line">    .subscribe(onSuccess: &#123; (isSuccess, tipStr) <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"isSuccess -- \(isSuccess)"</span>) <span class="comment">// 是否为 "000"</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"retMsg -- \(retMsg)"</span>) <span class="comment">// "缺少必要参数"</span></span><br><span class="line">    &#125;).disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>附：<a href="https://moyamapper.github.io/core/mapResult/" target="_blank" rel="noopener">mapResult的详细使用说明</a></p><h2 id="统一处理网络请求结果"><a href="#统一处理网络请求结果" class="headerlink" title="统一处理网络请求结果"></a>统一处理网络请求结果</h2><blockquote><p>在APP的实际使用过程中，会遇到各种各样的网络请求结果，如:服务器挂了、手机无网络，此时 <code>Moya</code> 返回的 <code>Response</code> 为 nil，这样我们就不得不去判断 <code>Error</code>。但是使用 <code>MoyaMapperPlugin</code> 就可以让我们只关注 <code>Response</code></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MoyaMapperPlugin 的初始化方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>&lt;<span class="type">T</span>: <span class="type">ModelableParameterType</span>&gt;(</span><br><span class="line">    <span class="number">_</span> type: <span class="type">T</span>,</span><br><span class="line">    transformError: <span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type : <span class="type">ModelableParameterType</span>  用于定义字段路径，做为全局解析数据的依据</span><br><span class="line">transformError : <span class="type">Bool</span>  是否当网络请求失败时，自动转换请求结果，默认为 <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>当请求失败的时候，此时的 <code>result.response</code> 为 <code>nil</code>，根据<code>transformError</code>是否为<code>true</code> 判断是否创建一个自定义的 <code>response</code> 并返回出去。</li></ul><p>➡ 本来可以请求到的数据内容</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/10/Swift-掌控Moya的网络请求、数据解析与缓存/success-obj.png" alt=""></p><p>➡ 现在关闭网络，再请求数据</p><ul><li><p>正常情况下，即不做任何不处理的时候， <code>Response</code> 为 <code>nil</code> </p></li><li><p>经过 <code>MoyaMapperPlugin</code> 处理的后可得到转换后的 <code>Response</code> ，如图</p></li></ul><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/10/Swift-掌控Moya的网络请求、数据解析与缓存/plugin.png" alt=""></p><p>这里将请求失败进行了统一处理，无论是服务器还是自身网络的问题，<code>retStatus</code> 都为 MMStatusCode.loadFail，但是 errorDescription 会保持原来的样子并赋值给 <code>retMsg</code>。</p><blockquote><ul><li><code>retStatus</code> 值会从枚举 <code>MMStatusCode</code> 中取  <code>loadFail.rawValue</code> ，即 <code>700</code> </li><li>取 类型为 <code>ModelableParameterType</code>  的 <code>type</code> 中 <code>statusCodeKey</code> 所指定的值 为键名，<code>retMsg</code>也同理</li></ul></blockquote><p>ps: 这个时候可以通过判断 <code>retStatus</code> 或 <code>response.statusCode</code> 是否与 <code>MMStatusCode.loadFail.rawValue</code> 相同来判断是否显示加载失败的空白页占位图</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MMStatusCode</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> cache = <span class="number">230</span></span><br><span class="line">    <span class="keyword">case</span> loadFail = <span class="number">700</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举 <code>MMStatusCode</code> 中除了 <code>loadFail</code> ，还有 <code>cache</code>，我们已经知道 <code>loadFail</code> 在数据加载失败的时候会出现，那 <code>cache</code> 是在什么时候出来呢？不急，看下一节就知道了。</p><h2 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h2><h5 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 缓存</span><br><span class="line">@discardableResult</span><br><span class="line">MMCache.shared.cache&#96;XXX&#96;(value : XXX, key: String, cacheContainer: MMCache.CacheContainer &#x3D; .RAM)  -&gt; Bool</span><br><span class="line">&#x2F;&#x2F; 取舍</span><br><span class="line">MMCache.shared.fetch&#96;XXX&#96;Cache(key: String, cacheContainer: MMCache.CacheContainer &#x3D; .RAM)</span><br></pre></td></tr></table></figure><p>缓存成功会返回一个 <code>Bool</code> 值，这里可不接收</p><table><thead><tr><th>XXX 所支持类型</th><th></th></tr></thead><tbody><tr><td>Bool</td><td>-</td></tr><tr><td>Float</td><td>-</td></tr><tr><td>Double</td><td>-</td></tr><tr><td>String</td><td>-</td></tr><tr><td>JSON</td><td>-</td></tr><tr><td>Modelable</td><td>[Modelable]</td></tr><tr><td>Moya.Response</td><td>-</td></tr><tr><td>Int</td><td>UInt</td></tr><tr><td>Int8</td><td>UInt8</td></tr><tr><td>Int16</td><td>UInt16</td></tr><tr><td>Int32</td><td>UInt32</td></tr><tr><td>Int64</td><td>UInt64</td></tr></tbody></table><blockquote><p>其中，除了 <code>Moya.Response</code> 之外，其它类型皆是通过 <code>JSON</code> 来实现缓存</p></blockquote><p>所以，如果你想清除这些类型的缓存，只需要调用如下方法即可</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@discardableResult</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeJSONCache</span><span class="params">(<span class="number">_</span> key: String, cacheContainer: MMCache.CacheContainer = .RAM)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@discardableResult</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeAllJSONCache</span><span class="params">(cacheContainer: MMCache.CacheContainer = .RAM)</span></span> -&gt; <span class="type">Bool</span></span><br></pre></td></tr></table></figure><p>清除 <code>Moya.Response</code> 则使用如下两个方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@discardableResult</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeResponseCache</span><span class="params">(<span class="number">_</span> key: String)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@discardableResult</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeAllResponseCache</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></span><br></pre></td></tr></table></figure><p>再来看看MMCache.CacheContainer</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CacheContainer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">RAM</span> <span class="comment">// 只缓存于内存的容器</span></span><br><span class="line">    <span class="keyword">case</span> hybrid <span class="comment">// 缓存于内存与磁盘的容器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这两种容器互不相通，即 即使key相同，使用 <code>hybrid</code> 来缓存后，再通过 <code>RAM</code> 取值是取不到的。</p></blockquote><ul><li>RAM : 仅缓存于内存之中，缓存的数据在APP使用期间一直存在</li><li>hybrid ：缓存于内存与磁盘中，APP重启后也可以获取到数据</li></ul><h5 id="二、缓存网络请求"><a href="#二、缓存网络请求" class="headerlink" title="二、缓存网络请求"></a>二、缓存网络请求</h5><p>内部缓存过程：</p><ol><li>APP首次启动并进行网络请求，网络数据将缓存起来</li><li>APP再次启动并进行网络请求时，会先返回缓存的数据，等请求成功后再返回网络数据</li><li>其它情况只会加载网络数据</li><li>每次成功请求到数据后，都会对缓存的数据进行更新</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Normal</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacheRequest</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> target: Target, </span></span></span><br><span class="line"><span class="function"><span class="params">    cacheType: MMCache.CacheKeyType = .<span class="keyword">default</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">    callbackQueue: DispatchQueue? = <span class="literal">nil</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">    progress: Moya.ProgressBlock? = <span class="literal">nil</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">    completion: @escaping Moya.Completion</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> -&gt; <span class="type">Cancellable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Rx</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacheRequest</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> target: Base.Target, </span></span></span><br><span class="line"><span class="function"><span class="params">    callbackQueue: DispatchQueue? = <span class="literal">nil</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">    cacheType: MMCache.CacheKeyType = .<span class="keyword">default</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> -&gt; <span class="type">Observable</span>&lt;<span class="type">Response</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>实际上是对 <code>Moya</code> 请求后的 <code>Response</code> 进行缓存。 其实与 <code>Moya</code> 自带的方法相比较只多了一个参数 <code>cacheType: MMCache.CacheKeyType</code> ，定义着缓存中的 <code>key</code> ，默认为 <code>default</code> </p></blockquote><p>下面是 <code>MMCache.CacheKeyType</code> 的定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> let cacheKey &#x3D; [method]baseURL&#x2F;path</span><br><span class="line"> </span><br><span class="line"> - default : cacheKey + &quot;?&quot; + parameters</span><br><span class="line"> - base : cacheKey</span><br><span class="line"> - custom : cacheKey + &quot;?&quot; + customKey</span><br><span class="line"> *&#x2F;</span><br><span class="line">public enum CacheKeyType &#123;</span><br><span class="line">    case &#96;default&#96;</span><br><span class="line">    case base</span><br><span class="line">    case custom(String)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果你想缓存<code>多页</code>列表数据的<code>最新一页</code>数据，此时使用 <code>default</code> 是不合适的，因为 <code>default</code> 使用的 <code>key</code> 包含了 <code>pageIndex</code>，这样就达不到只缓存 <code>最新一页数据</code> 的目的， 所以这里应该使用 <code>base</code> 或者 <code>custom(String)</code> </p></blockquote><p>我们可以来试一下带缓存的请求</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * APP第一次启动并进行网络请求，网络数据将缓存起来</span></span><br><span class="line"><span class="comment"> * APP再次启动并进行网络请求时，会先加载缓存，再加载网络数据</span></span><br><span class="line"><span class="comment"> * 其它情况只会加载网络数据</span></span><br><span class="line"><span class="comment"> * 每次成功请求到数据都会进行数据更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">lxfNetTool.rx.cacheRequest(.data(type: .all, size: <span class="number">10</span>, index: <span class="number">1</span>))</span><br><span class="line">    .subscribe(onNext: &#123; response <span class="keyword">in</span></span><br><span class="line">        log.debug(<span class="string">"statusCode -- \(response.statusCode)"</span>)</span><br><span class="line">    &#125;).disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统方式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">let _ = lxfNetTool.cacheRequest(.data(type: .all, size: 10, index: 1)) &#123; result in</span></span><br><span class="line"><span class="comment">    guard let resp = result.value else &#123; return &#125;</span></span><br><span class="line"><span class="comment">    log.debug("statusCode -- \(resp.statusCode)")</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 首次使用APP</span><br><span class="line">statusCode -- 200</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭并重新打开APP，再请求一下</span><br><span class="line">statusCode -- 230</span><br><span class="line">statusCode -- 200</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 然后再请求一下</span><br><span class="line">statusCode -- 200</span><br></pre></td></tr></table></figure><p>这里的 <code>230</code> 就是 <code>MMStatusCode.cache.rawValue</code></p><h2 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h2><ul><li>默认安装</li></ul><p>MoyaMapper默认只安装Core下的文件<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'MoyaMapper'</span></span><br></pre></td></tr></table></figure></p><ul><li><p>RxSwift拓展</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'MoyaMapper/Rx'</span></span><br></pre></td></tr></table></figure></li><li><p>缓存拓展</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'MoyaMapper/MMCache'</span></span><br></pre></td></tr></table></figure></li><li><p>Rx缓存</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'MoyaMapper/RxCache'</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Moya&lt;/code&gt; 在Swift开发中起着重要的网络交互作用，但是还有不如之处，比如网络不可用时，返回的 &lt;code&gt;Response&lt;/code&gt; 为 &lt;code&gt;nil&lt;/code&gt;，这时还得去解析相应的 &lt;code&gt;Error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Codable&lt;/code&gt; 可以帮助我们快速的解析数据，但是一旦声明的属性类型与json中的不一致，将无法正常解析; 而且对于模型中自定义属性名的处理也十分繁琐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="iOS" scheme="http://linxunfeng.top/categories/iOS/"/>
    
    
    <category term="iOS" scheme="http://linxunfeng.top/tags/iOS/"/>
    
    <category term="Swift" scheme="http://linxunfeng.top/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 优雅的适配大小</title>
    <link href="http://linxunfeng.top/2018/10/24/Swift-%E4%BC%98%E9%9B%85%E7%9A%84%E9%80%82%E9%85%8D%E5%A4%A7%E5%B0%8F/"/>
    <id>http://linxunfeng.top/2018/10/24/Swift-%E4%BC%98%E9%9B%85%E7%9A%84%E9%80%82%E9%85%8D%E5%A4%A7%E5%B0%8F/</id>
    <published>2018-10-24T20:44:50.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <blockquote><p>在日常开发中常常会对设备进行一定的适配，为了方便在多个项目里统一管理和使用，所以封装并开源了<code>SwiftyFitsize</code>这个库，可用于适配视图及字体大小，同时也支持 xib 和 storyboard</p></blockquote><p>GitHub: <a href="https://github.com/LinXunFeng/SwiftyFitsize" target="_blank" rel="noopener">SwiftyFitsize</a></p><p>+<a id="more"></a></p><The rest of contents | 余下全文><blockquote><p>在日常开发中常常会对设备进行一定的适配，为了方便在多个项目里统一管理和使用，所以封装并开源了<code>SwiftyFitsize</code>这个库，可用于适配视图及字体大小，同时也支持 xib 和 storyboard</p></blockquote><p>GitHub: <a href="https://github.com/LinXunFeng/SwiftyFitsize" target="_blank" rel="noopener">SwiftyFitsize</a></p><p>最终的效果如下图所示</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/10/Swift-优雅的适配大小/exhibition.png" alt="效果图"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用Cocoapods安装，或手动拖入项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#39;SwiftyFitsize&#39;</span><br></pre></td></tr></table></figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>SwiftyFitsize</code>在默认状况下所使用的参照宽度为<code>iphone6</code>的<code>375</code><br>如果设计图所选用设备的宽度与默认值不同，可以在<code>AppDelegate</code>下初始化所参照的宽度</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SwiftyFitsize</span>.reference(width: <span class="number">414</span>)</span><br></pre></td></tr></table></figure><p>下面列出一些设备对应的分辨率，方便查找</p><table><thead><tr><th>设备</th><th>逻辑分辨率(point)</th><th>设备分辨率(pixel)</th></tr></thead><tbody><tr><td>SE</td><td>320x568</td><td>640x1136</td></tr><tr><td>6(S)／7／8</td><td>375x667</td><td>750x1334</td></tr><tr><td>6(S)+／7+／8+</td><td>414x736</td><td>1080x1920</td></tr><tr><td>X(S)</td><td>375x812</td><td>1125x2436</td></tr><tr><td>XR</td><td>414x896</td><td>828x1792</td></tr><tr><td>XS Max</td><td>414x896</td><td>1242x2688</td></tr></tbody></table><p>使用也是非常方便的，只需要在<code>Number</code>、<code>UIFont</code>、<code>CGPoint</code>、<code>CGSize</code>、<code>UIEdgeInsetsMake</code>这些类型的值后面加上<code>~</code>即可<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span>~</span><br><span class="line"><span class="type">UIFont</span>.systemFont(ofSize: <span class="number">14</span>)~</span><br><span class="line"><span class="type">CGPoint</span>(x: <span class="number">10</span>, y: <span class="number">10</span>)~</span><br><span class="line"><span class="type">CGSize</span>(width: <span class="number">100</span>, height: <span class="number">100</span>)~</span><br><span class="line"><span class="type">CGRect</span>(x: <span class="number">10</span>, y: <span class="number">10</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)~</span><br><span class="line"><span class="type">UIEdgeInsetsMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)~</span><br></pre></td></tr></table></figure></p><h5 id="xib-storyboard-字体适配"><a href="#xib-storyboard-字体适配" class="headerlink" title="xib / storyboard 字体适配"></a>xib / storyboard 字体适配</h5><p>支持控件 <code>UILabel</code> <code>UIButton</code> <code>UITextView</code> <code>UITextField</code></p><p><img src= "/img/loading.gif" data-src="https://github.com/LinXunFeng/SwiftyFitsize/raw/master/Screenshots/xib-font.png" alt="xib-font"></p><h5 id="xib-storyboard-约束适配"><a href="#xib-storyboard-约束适配" class="headerlink" title="xib / storyboard 约束适配"></a>xib / storyboard 约束适配</h5><p><img src= "/img/loading.gif" data-src="https://github.com/LinXunFeng/SwiftyFitsize/raw/master/Screenshots/xib-constraint.png" alt="xib-font"></p><p>##### </p><p>注：<code>~</code>请不要相互嵌套使用，如</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CGPoint</span>(x: <span class="number">10</span>~, y: <span class="number">10</span>~)~</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;blockquote&gt;
&lt;p&gt;在日常开发中常常会对设备进行一定的适配，为了方便在多个项目里统一管理和使用，所以封装并开源了&lt;code&gt;SwiftyFitsize&lt;/code&gt;这个库，可用于适配视图及字体大小，同时也支持 xib 和 storyboard&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/LinXunFeng/SwiftyFitsize&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SwiftyFitsize&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="iOS" scheme="http://linxunfeng.top/categories/iOS/"/>
    
    
    <category term="iOS" scheme="http://linxunfeng.top/tags/iOS/"/>
    
    <category term="Swift" scheme="http://linxunfeng.top/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS-面向协议封装全屏旋转功能</title>
    <link href="http://linxunfeng.top/2018/09/15/iOS-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E5%B0%81%E8%A3%85%E5%85%A8%E5%B1%8F%E6%97%8B%E8%BD%AC%E5%8A%9F%E8%83%BD/"/>
    <id>http://linxunfeng.top/2018/09/15/iOS-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E5%B0%81%E8%A3%85%E5%85%A8%E5%B1%8F%E6%97%8B%E8%BD%AC%E5%8A%9F%E8%83%BD/</id>
    <published>2018-09-15T18:05:45.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <blockquote><p>关于使用面向协议来封装功能的实战可以参考我上篇文章 <a href="/2018/04/07/iOS-面向协议方式封装空白页功能/">【iOS-面向协议方式封装空白页功能】</a>，这里就不再赘述，我们直接进入使用阶段吧。<br>本篇文章只有一个目的，那就是只要遵守协议，一行代码随意切换全屏～</p></blockquote><p>如果对面向协议有疑问的同学可以看下我之前的两篇文章</p><p><a href="/2017/09/12/iOS-Swift-面向协议编程（一）/">iOS - Swift 面向协议编程（一）</a> </p><p><a href="/2017/09/12/iOS-Swift-面向协议编程（二）/">iOS - Swift 面向协议编程（二）</a></p><p>+<a id="more"></a></p><The rest of contents | 余下全文><blockquote><p>关于使用面向协议来封装功能的实战可以参考我上篇文章 <a href="/2018/04/07/iOS-面向协议方式封装空白页功能/">【iOS-面向协议方式封装空白页功能】</a>，这里就不再赘述，我们直接进入使用阶段吧。<br>本篇文章只有一个目的，那就是只要遵守协议，一行代码随意切换全屏～</p></blockquote><p>如果对面向协议有疑问的同学可以看下我之前的两篇文章</p><p><a href="/2017/09/12/iOS-Swift-面向协议编程（一）/">iOS - Swift 面向协议编程（一）</a> </p><p><a href="/2017/09/12/iOS-Swift-面向协议编程（二）/">iOS - Swift 面向协议编程（二）</a></p><h2 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h2><table><thead><tr><th>Name</th><th>Link</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://github.com/LinXunFeng/LXFProtocolTool" target="_blank" rel="noopener">LXFProtocolTool</a></td></tr><tr><td>Wiki</td><td><a href="https://github.com/LinXunFeng/LXFProtocolTool/wiki" target="_blank" rel="noopener">Wiki首页</a></td></tr><tr><td>本文 Demo</td><td><a href="https://github.com/LinXunFeng/LXFProtocolTool/tree/master/Example/LXFProtocolTool/Demo/LXFFullScreenable" target="_blank" rel="noopener">LXFFullScreenable</a></td></tr></tbody></table><p>使用Cocoapods的方式来安装即可</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'LXFProtocolTool/FullScreenable'</span></span><br></pre></td></tr></table></figure><h2 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h2><p>在AppDelegate中实现如下方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?)</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">UIApplication</span>.shared.lxf.currentVcOrientationMask</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、使用案例"><a href="#二、使用案例" class="headerlink" title="二、使用案例"></a>二、使用案例</h2><blockquote><p>方法与属性的调用都需要命名空间加上 <code>lxf</code>，如<code>isFullScreen</code> -&gt; <code>lxf.isFullScreen</code></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isFullScreen : 获取当前遵守协议者是否为全屏状态</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">switchFullScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    isEnter: Bool? = <span class="literal">nil</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    specifiedView: UIView? = <span class="literal">nil</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    superView: UIView? = <span class="literal">nil</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    config: FullScreenableConfig? = <span class="literal">nil</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    completed: <span class="params">(<span class="params">(<span class="number">_</span> isFullScreen: Bool)</span></span></span></span>-&gt;<span class="type">Void</span>)? = <span class="literal">nil</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><table><thead><tr><th>Name</th><th>Type</th><th>Desc</th></tr></thead><tbody><tr><td>isEnter</td><td><code>Bool?</code></td><td>是否进入全屏</td></tr><tr><td>specifiedView</td><td><code>UIView?</code></td><td>指定即将全屏的视图</td></tr><tr><td>superView</td><td><code>UIView?</code></td><td>作为退出全屏后specifiedView的父视图</td></tr><tr><td>config</td><td><code>FullScreenableConfig?</code></td><td>配置</td></tr><tr><td>completed</td><td><code>((_ isFullScreen: Bool)-&gt;Void)?</code></td><td>进入/退出 全屏后的回调</td></tr></tbody></table><blockquote><p>当<code>switchFullScreen</code>的调用者为<code>UIView</code>时，如果<code>specifiedView</code>为<code>nil</code>会自动填写，<code>superView</code>也是如此</p></blockquote><blockquote><p><code>switchFullScreen</code>方法不推荐直接使用，不过当遵守协议者为<code>UIViewController</code>时，可以通过使用默认参数来切换屏幕方向<code>lxf.switchFullScreen()</code></p></blockquote><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/09/iOS-面向协议封装全屏旋转功能/lxf_FullScreenable_1.gif" alt="lxf_FullScreenable_1"></p><p>以下分两种情况说明</p><h3 id="UIViewController"><a href="#UIViewController" class="headerlink" title="UIViewController"></a>UIViewController</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">enterFullScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    specifiedView: UIView,</span></span></span><br><span class="line"><span class="function"><span class="params">    config: FullScreenableConfig? = <span class="literal">nil</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    completed: FullScreenableCompleteType? = <span class="literal">nil</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exitFullScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    superView: UIView,</span></span></span><br><span class="line"><span class="function"><span class="params">    config: FullScreenableConfig? = <span class="literal">nil</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    completed: FullScreenableCompleteType? = <span class="literal">nil</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>以上两个方法是对<code>switchFullScreen</code>的抽离，使调用时对参数的传递更加清晰</p></blockquote><p>1、遵守协议 <code>FullScreenable</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LXFFullScreenableController</span>: <span class="title">UIViewController</span>, <span class="title">FullScreenable</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>2、指定视图进入全屏<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxf.enterFullScreen(specifiedView: cyanView)</span><br></pre></td></tr></table></figure></p><p>3、指定视图退出全屏，并添加到当前控制器的<code>view</code>上<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxf.exitFullScreen(superView: <span class="keyword">self</span>.view)</span><br></pre></td></tr></table></figure></p><h4 id="🔥自动进入-退出全屏"><a href="#🔥自动进入-退出全屏" class="headerlink" title="🔥自动进入|退出全屏"></a>🔥自动进入|退出全屏</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">autoFullScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    specifiedView: UIView,</span></span></span><br><span class="line"><span class="function"><span class="params">    superView: UIView,</span></span></span><br><span class="line"><span class="function"><span class="params">    config: FullScreenableConfig? = <span class="literal">nil</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><ul><li>控制器可以调用该方法来注册自动进入或退出全屏，各控制器之间互不影响。</li><li><code>view</code>手动进入全屏会屏蔽当前控制器的自动全屏功能，退出方可恢复</li></ul><h3 id="UIView"><a href="#UIView" class="headerlink" title="UIView"></a>UIView</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">enterFullScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    specifiedView: UIView? = <span class="literal">nil</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    config: FullScreenableConfig? = <span class="literal">nil</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    completed: FullScreenableCompleteType? = <span class="literal">nil</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exitFullScreen</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    superView: UIView? = <span class="literal">nil</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    config: FullScreenableConfig? = <span class="literal">nil</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    completed: FullScreenableCompleteType? = <span class="literal">nil</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>以上两个方法是对<code>switchFullScreen</code>的抽离，使调用时对参数的传递更加清晰</p></blockquote><p>1、遵守协议 <code>FullScreenable</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LXFFullScreenView</span>: <span class="title">UIButton</span>, <span class="title">FullScreenable</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cyanView = <span class="type">LXFFullScreenView</span>()</span><br></pre></td></tr></table></figure><p>2、进入全屏</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyanView.lxf.enterFullScreen()</span><br></pre></td></tr></table></figure><p>3、退出全屏<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyanView.lxf.exitFullScreen()</span><br></pre></td></tr></table></figure></p><blockquote><p>这里是对遵守了<code>FullScreenable</code>协议的视图进入全屏切换，由于代码内部已经经过自动视图填写，所以直接调用相应的方法即可，当然也可以自己指定<code>specifiedView</code>和<code>superView</code></p></blockquote><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/09/iOS-面向协议封装全屏旋转功能/lxf_FullScreenable_2.gif" alt="lxf_FullScreenable_2"></p><h2 id="三、FullScreenableConfig说明"><a href="#三、FullScreenableConfig说明" class="headerlink" title="三、FullScreenableConfig说明"></a>三、FullScreenableConfig说明</h2><blockquote><p>上述的方法都有一个<code>config</code>参数，默认为nil，即为默认配置</p></blockquote><p>相关属性说明<br>| Name                       | Type                     | Desc                           | Default        |<br>| ————————– | ———————— | —————————— | ————– |<br>| animateDuration            | <code>Double</code>                 | 进入/退出 全屏时的旋转动画时间 | 0.25           |<br>| enterFullScreenOrientation | <code>UIInterfaceOrientation</code> | 进入全屏时的初始方向           | landscapeRight |</p><p>这里我们把动画时间设置为<code>1s</code>，初始方向为<code>左</code>后来看看效果<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FullScreenableConfig</span>(</span><br><span class="line">    animateDuration: <span class="number">1</span>,</span><br><span class="line">    enterFullScreenOrientation : .landscapeLeft</span><br><span class="line">)</span><br></pre></td></tr></table></figure><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cyanView.lxf.enterFullScreen(config: diyConfig)</span><br><span class="line">cyanView.lxf.exitFullScreen(config: diyConfig)</span><br></pre></td></tr></table></figure></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/09/iOS-面向协议封装全屏旋转功能/lxf_FullScreenable_3.gif" alt="lxf_FullScreenable_3"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里相关的说明已罗列完毕，有什么不清楚的可以下载<a href="https://github.com/LinXunFeng/LXFProtocolTool/tree/master/Example/LXFProtocolTool/Demo/LXFFullScreenable" target="_blank" rel="noopener">Demo</a>看看，或者在文章下方留言提问</p><p><a href="https://github.com/LinXunFeng/LXFProtocolTool" target="_blank" rel="noopener">LXFProtocolTool</a> 主要是通过协议的方式来方便快捷地实现一些的实用功能，除了本文提及的全屏旋转功能外还有其它实用功能的封装，具体内容可以到 <a href="https://github.com/LinXunFeng/LXFProtocolTool/wiki" target="_blank" rel="noopener">Wiki首页</a>  查找。如果你有什么想实现的功能也可以提出来，喜欢的就给个Star鼓励下我吧 🚀 🚀 🚀，感谢支持！</p>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;blockquote&gt;
&lt;p&gt;关于使用面向协议来封装功能的实战可以参考我上篇文章 &lt;a href=&quot;/2018/04/07/iOS-面向协议方式封装空白页功能/&quot;&gt;【iOS-面向协议方式封装空白页功能】&lt;/a&gt;，这里就不再赘述，我们直接进入使用阶段吧。&lt;br&gt;本篇文章只有一个目的，那就是只要遵守协议，一行代码随意切换全屏～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果对面向协议有疑问的同学可以看下我之前的两篇文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2017/09/12/iOS-Swift-面向协议编程（一）/&quot;&gt;iOS - Swift 面向协议编程（一）&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2017/09/12/iOS-Swift-面向协议编程（二）/&quot;&gt;iOS - Swift 面向协议编程（二）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="iOS" scheme="http://linxunfeng.top/categories/iOS/"/>
    
    
    <category term="iOS" scheme="http://linxunfeng.top/tags/iOS/"/>
    
    <category term="Swift" scheme="http://linxunfeng.top/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>AppRTC实战</title>
    <link href="http://linxunfeng.top/2018/06/07/AppRTC%E5%AE%9E%E6%88%98/"/>
    <id>http://linxunfeng.top/2018/06/07/AppRTC%E5%AE%9E%E6%88%98/</id>
    <published>2018-06-07T22:49:36.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>记录AppRTC的搭建过程，实现iOS、Android、Browser同异设备的视频通信</p><a id="more"></a><The rest of contents | 余下全文><blockquote><p>1、记录AppRTC的搭建过程，实现iOS、安卓、browser同异设备的视频通信<br>2、以下直接以root身份进行操作，所有的需要下载的文件均放置于<code>/root</code>目录下，需要的话，可以自行决定存放位置，但是要注意修改相关的配置路径～</p></blockquote><h2 id="一、设备配置"><a href="#一、设备配置" class="headerlink" title="一、设备配置"></a>一、设备配置</h2><ul><li>阿里云ESC服务器 Ubuntu 16.04 64位</li><li>腾讯云域名</li></ul><h2 id="二、相关环境"><a href="#二、相关环境" class="headerlink" title="二、相关环境"></a>二、相关环境</h2><h3 id="1、JDK"><a href="#1、JDK" class="headerlink" title="1、JDK"></a>1、JDK</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add-apt-repository ppa:openjdk-r/ppa </span><br><span class="line">apt-get update </span><br><span class="line">apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><h3 id="2、nodejs"><a href="#2、nodejs" class="headerlink" title="2、nodejs"></a>2、nodejs</h3><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs官网</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 这里的版本8.x可以按自己的需求去修改</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -</span><br><span class="line">apt-get install -y nodejs</span><br></pre></td></tr></table></figure><br>至此已经安装了最新版的nodejs和npm了,可以使用<code>-v</code>来查看当前版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>安装<code>grunt-cli</code>，后面需要<code>grunt</code>来构建房间服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install grunt-cli</span><br></pre></td></tr></table></figure><h3 id="3、python与python-webtest"><a href="#3、python与python-webtest" class="headerlink" title="3、python与python-webtest"></a>3、python与python-webtest</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python </span><br><span class="line">apt-get install python-webtest</span><br></pre></td></tr></table></figure><h3 id="libevent"><a href="#libevent" class="headerlink" title="libevent"></a>libevent</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-cache search libevent</span><br><span class="line">apt-get install libevent-dev</span><br></pre></td></tr></table></figure><hr><h2 id="三、Room-Server-房间服务器"><a href="#三、Room-Server-房间服务器" class="headerlink" title="三、Room Server 房间服务器"></a>三、Room Server 房间服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone  https:&#x2F;&#x2F;github.com&#x2F;webrtc&#x2F;apprtc.git   </span><br><span class="line">cd apprtc</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="1、配置-constants-py"><a href="#1、配置-constants-py" class="headerlink" title="1、配置 constants.py"></a>1、配置 constants.py</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当前目录 -- apprtc</span></span><br><span class="line">vim src/app_engine/constants.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这部分为 添加</span></span><br><span class="line">TURN_BASE_URL = <span class="string">'https://linxunfeng.top'</span> <span class="comment"># 修改为你自己当前服务器的域名，下面的亦是如此</span></span><br><span class="line">TURN_URL_TEMPLATE = <span class="string">'%s/turn.php?username=%s&amp;key=%s'</span> <span class="comment">#如果turn.php未实现，可使用默认配置</span></span><br><span class="line">CEOD_KEY = <span class="string">'lxf'</span> <span class="comment"># 这个很重要，后面配置turn时需要用到</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这部分为 修改</span></span><br><span class="line">ICE_SERVER_BASE_URL = <span class="string">'https://linxunfeng.top'</span></span><br><span class="line">ICE_SERVER_URL_TEMPLATE = <span class="string">'%s/iceconfig.php?key=%s'</span> <span class="comment">#如果iceconfig.php未实现，可用默认配置，但是Android Apk会有问题</span></span><br><span class="line">ICE_SERVER_API_KEY = os.environ.get(<span class="string">'ICE_SERVER_API_KEY'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dictionary keys in the collider instance info constant.</span></span><br><span class="line">WSS_INSTANCE_HOST_KEY = <span class="string">'linxunfeng.top:8089'</span> <span class="comment">#信令服务器端口号8089  </span></span><br><span class="line">WSS_INSTANCE_NAME_KEY = <span class="string">'vm_name'</span></span><br><span class="line">WSS_INSTANCE_ZONE_KEY = <span class="string">'zone'</span></span><br><span class="line">WSS_INSTANCES = [&#123;</span><br><span class="line">    WSS_INSTANCE_HOST_KEY: <span class="string">'linxunfeng.top:8089'</span>,</span><br><span class="line">    WSS_INSTANCE_NAME_KEY: <span class="string">'wsserver-std'</span>,</span><br><span class="line">    WSS_INSTANCE_ZONE_KEY: <span class="string">'us-central1-a'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    WSS_INSTANCE_HOST_KEY: <span class="string">'linxunfeng.top:8089'</span>,</span><br><span class="line">    WSS_INSTANCE_NAME_KEY: <span class="string">'wsserver-std-2'</span>,</span><br><span class="line">    WSS_INSTANCE_ZONE_KEY: <span class="string">'us-central1-f'</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="2、编译"><a href="#2、编译" class="headerlink" title="2、编译"></a>2、编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当前目录 -- apprtc</span></span><br><span class="line">grunt build</span><br></pre></td></tr></table></figure><p>编译好后<code>apprtc</code>目录下就会多出一个名为<code>out</code>的目录，里面存放的就是编译好的<code>room server</code></p><h3 id="3、GoogleAppEngine的安装与配置"><a href="#3、GoogleAppEngine的安装与配置" class="headerlink" title="3、GoogleAppEngine的安装与配置"></a>3、GoogleAppEngine的安装与配置</h3><p>官网：<a href="https://cloud.google.com/appengine/downloads#Google_App_Engine_SDK_for_Python" target="_blank" rel="noopener">GoogleAppEngine</a></p><p>可以在此路径找最新版本</p><blockquote><p>GoogleAppEngine -&gt; Python -&gt; Download and install the original App Engine SDK for Python.</p></blockquote><p>目前最新版本为：<a href="https://storage.googleapis.com/appengine-sdks/featured/google_appengine_1.9.70.zip" target="_blank" rel="noopener">google_appengine_1.9.70.zip</a></p><ul><li>下载 GoogleAppEngine</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://storage.googleapis.com/appengine-sdks/featured/google_appengine_1.9.70.zip</span><br></pre></td></tr></table></figure><ul><li>解压</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip google_appengine_1.9.70.zip</span><br></pre></td></tr></table></figure><ul><li>设置环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH="$PATH:/root/google_appengine/"</span><br></pre></td></tr></table></figure><ul><li>应用环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="4、开启-Room-Server"><a href="#4、开启-Room-Server" class="headerlink" title="4、开启 Room Server"></a>4、开启 Room Server</h3><ul><li>基本命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当前路径 -- /root/google_appengine</span></span><br><span class="line">./dev_appserver.py --host=linxunfeng.top ../apprtc/out/app_engine/</span><br></pre></td></tr></table></figure><p><strong>如果你使用的是阿里云服务器，这里就不能用域名<code>linxunfeng.top</code>来启动<code>room server</code>，而是使用本地网卡地址</strong>，否则就会提示</p><blockquote><p>raise BindError(‘Unable to bind %s:%s’ % self.bind_addr)<br>google.appengine.tools.devappserver2.wsgi_server.BindError: Unable to bind linxunfeng.top:8080</p></blockquote><ul><li>查看网卡</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@xxx:~/google_appengine# ifconfig</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:16:3e:08:b4:02  </span><br><span class="line">          inet addr:172.18.141.108  Bcast:172.18.143.255  Mask:255.255.240.0</span><br><span class="line">          ...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dev_appserver.py --host=172.18.141.108 ../apprtc/out/app_engine/</span><br></pre></td></tr></table></figure><p>这样就好了吗？不，虽然没有报错，但是你用浏览器打开你的域名看看…<br>这里直接给出最终命令，具体原因看 <a href="#1、Request-host-is-not-whitelist-enabled">疑难杂症 - 1</a></p><ul><li>最终命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./dev_appserver.py --enable_host_checking=false --host=172.18.141.108 ../apprtc/out/app_engine/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果想直接后台运行，则使用如下命令</span></span><br><span class="line">nohup ./dev_appserver.py --enable_host_checking=false --host=172.18.141.108 ../apprtc/out/app_engine/ &amp;</span><br></pre></td></tr></table></figure><ul><li>访问 room server</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;域名:8080</span><br></pre></td></tr></table></figure><h2 id="四、Collider-Server-信令服务器"><a href="#四、Collider-Server-信令服务器" class="headerlink" title="四、Collider Server 信令服务器"></a>四、Collider Server 信令服务器</h2><h3 id="1、拷贝collider源码"><a href="#1、拷贝collider源码" class="headerlink" title="1、拷贝collider源码"></a>1、拷贝collider源码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当前路径 -- /root</span></span><br><span class="line">mkdir -p goWorkspace/src</span><br></pre></td></tr></table></figure><p>把<code>apprtc/src/collider/</code>目录下的三个目录（collider、collidermain、collidertest）复制到<code>goWorkspace/src/</code>目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -rf apprtc/src/collider/* /goWorkspace/src</span><br></pre></td></tr></table></figure><h3 id="2、修改代码"><a href="#2、修改代码" class="headerlink" title="2、修改代码"></a>2、修改代码</h3><ul><li>修改房间服务器的地址</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> goWorkspace/src/collidermain/main.go</span></span><br><span class="line">var roomSrv = flag.String("room-server", "https://域名", "The origin of the room server")</span><br></pre></td></tr></table></figure><ul><li>修改网站证书路径</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> goWorkspace/src/collider/collider.go</span></span><br><span class="line"></span><br><span class="line">e = server.ListenAndServeTLS("/etc/letsencrypt/live/域名/fullchain.pem", "/etc/letsencrypt/live/域名/privkey.pem")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如：</span></span><br><span class="line">e = server.ListenAndServeTLS("/etc/letsencrypt/live/linxunfeng.top/fullchain.pem", "/etc/letsencrypt/live/linxunfeng.top/privkey.pem")</span><br></pre></td></tr></table></figure><p>相关的SSL证书<code>fullchain.pem</code>和<code>privkey.pem</code>在后面的nginx配置中会提到，这里先写上</p><h3 id="3、安装与配置环境"><a href="#3、安装与配置环境" class="headerlink" title="3、安装与配置环境"></a>3、安装与配置环境</h3><ul><li>下载GO语言环境</li></ul><p>FQ 到 <a href="https://golang.org/dl/" target="_blank" rel="noopener">GO官网</a>上下载最新版本</p><p>当前最新版本：<a href="https://dl.google.com/go/go1.10.2.linux-amd64.tar.gz" target="_blank" rel="noopener">go1.10.2.linux-amd64.tar.gz</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当前路径 -- /root</span></span><br><span class="line">wget https://dl.google.com/go/go1.10.2.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><ul><li>修改profile</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>打开<code>profile</code>后添加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=/root/go</span><br><span class="line">export GOPATH=/root/goWorkspace</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure><ul><li>应用环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="4、编译"><a href="#4、编译" class="headerlink" title="4、编译"></a>4、编译</h3><p>进入目录 <code>goWorkspace/src/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get collidermain</span><br><span class="line">go install collidermain</span><br></pre></td></tr></table></figure><p>这里的编译过程需要翻墙，如果无法翻墙，请看以下内容，如果可以则直接跳至第5小点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当前路径 -- /root/goWorkspace/src</span></span><br><span class="line">mkdir -p golang.org/x </span><br><span class="line">cd golang.org/x/</span><br><span class="line">git clone https://github.com/golang/net</span><br></pre></td></tr></table></figure><p><code>git clone</code>成功后再执行上面的两行编译命令</p><h3 id="5、开启-Collider-Server"><a href="#5、开启-Collider-Server" class="headerlink" title="5、开启 Collider Server"></a>5、开启 Collider Server</h3><p>进入<code>goWorkspace</code>下的<code>bin</code>目录，执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当前路径 -- /root/goWorkspace/bin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -tls=<span class="literal">true</span> : 指需要数字证书</span></span><br><span class="line">./collidermain -port=8089 -tls=true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果想直接后台运行，则使用如下命令</span></span><br><span class="line">nohup ./collidermain -port=8089 -tls=true &amp;</span><br></pre></td></tr></table></figure><h2 id="五、STUN-TURN服务器"><a href="#五、STUN-TURN服务器" class="headerlink" title="五、STUN\TURN服务器"></a>五、STUN\TURN服务器</h2><h3 id="1、安装coturn"><a href="#1、安装coturn" class="headerlink" title="1、安装coturn"></a>1、安装<code>coturn</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install coturn</span><br></pre></td></tr></table></figure><h3 id="2、修改配置"><a href="#2、修改配置" class="headerlink" title="2、修改配置"></a>2、修改配置</h3><ul><li>coturn</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/coturn</span><br></pre></td></tr></table></figure><p>把TURNSERVER_ENABLED=1的注释去掉</p><ul><li>turnserver.conf</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/turnserver.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">listening-device=eth0 #此处eth0是电脑网卡名称</span><br><span class="line">listening-port=3478 #turn服务器的端口号</span><br><span class="line">relay-device=eth0 #此处eth0是电脑网卡名称</span><br><span class="line">min-port=49152</span><br><span class="line">max-port=65535</span><br><span class="line">Verbose</span><br><span class="line">fingerprint</span><br><span class="line">lt-cred-mech</span><br><span class="line">use-auth-secret</span><br><span class="line">static-auth-secret=lxf #此处要和房间服务器配置时constants.py文件中的CODE_KEY保持一致。</span><br><span class="line">user=lxf:0x8638170519dd1309044bca55319ff929</span><br><span class="line">user=lxf:lxf</span><br><span class="line">stale-nonce</span><br><span class="line">cert=/usr/local/etc/turn_server_cert.pem</span><br><span class="line">pkey=/usr/local/etc/turn_server_pkey.pem</span><br><span class="line">no-loopback-peers</span><br><span class="line">no-multicast-peers</span><br><span class="line">mobility</span><br><span class="line">no-cli</span><br></pre></td></tr></table></figure><p>上述文件中 0x8638170519dd1309044bca55319ff929： </p><p><code>turnadmin -k -u lxf -r north.gov -p lxf</code></p><blockquote><p>-k 表示生成一个long-term credential key<br>-u 表示用户名<br>-p 表示密码<br>-r 表示Realm域</p></blockquote><p>coturn的证书生成（即配置文件中cert和pkey)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:2048 -keyout /usr/local/etc/turn_server_pkey.pem -out /usr/local/etc/turn_server_cert.pem -days 99999 -nodes</span><br></pre></td></tr></table></figure><h3 id="3、启动coturn服务器"><a href="#3、启动coturn服务器" class="headerlink" title="3、启动coturn服务器"></a>3、启动coturn服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service coturn start</span><br></pre></td></tr></table></figure><p>用浏览器打开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;域名:3478</span><br></pre></td></tr></table></figure></p><p>显示如下内容则说明成功开启服务</p><blockquote><p>TURN Server<br>use https connection for the admin session</p></blockquote><h2 id="六、配置nginx服务器"><a href="#六、配置nginx服务器" class="headerlink" title="六、配置nginx服务器"></a>六、配置nginx服务器</h2><h3 id="1、生成SSL证书"><a href="#1、生成SSL证书" class="headerlink" title="1、生成SSL证书"></a>1、生成SSL证书</h3><p>这里使用let’s encrypt颁发的免费SSL证书 <a href="https://certbot.eff.org" target="_blank" rel="noopener">certbot.eff.org</a></p><ul><li>安装软件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  </span><br><span class="line">apt-get install software-properties-common  </span><br><span class="line">add-apt-repository ppa:certbot/certbot  </span><br><span class="line">apt-get update </span><br><span class="line">apt-get install python-certbot-nginx</span><br></pre></td></tr></table></figure><ul><li>生成证书</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot --nginx certonly</span><br></pre></td></tr></table></figure><p>SSL证书生成的目录为：<code>/etc/letsencrypt/live/域名/</code>，里面存放着四个文件<code>cert.pem,chain.pem,fullchain.pem,privkey.pem</code></p><h3 id="2、安装php和php-fpm"><a href="#2、安装php和php-fpm" class="headerlink" title="2、安装php和php-fpm"></a>2、安装php和php-fpm</h3><ul><li>安装php和php-fpm</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php  </span><br><span class="line">apt-get install php7.0-fpm</span><br></pre></td></tr></table></figure><h3 id="3、安装与配置nginx"><a href="#3、安装与配置nginx" class="headerlink" title="3、安装与配置nginx"></a>3、安装与配置nginx</h3><ul><li>安装nginx</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><ul><li>修改nginx配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>将下面的<code>linxunfeng.top</code>修改为你自己的域名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">upstream roomserver &#123;</span><br><span class="line">       server linxunfeng.top:8080;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">       listen 80 ;</span><br><span class="line">       server_name linxunfeng.top; </span><br><span class="line">       return  301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        #listen 80 default_server;</span><br><span class="line">        #listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">        # SSL configuration</span><br><span class="line">        #</span><br><span class="line">        # listen 443 ssl default_server;</span><br><span class="line">        # listen [::]:443 ssl default_server;</span><br><span class="line">        listen 443;</span><br><span class="line">        #</span><br><span class="line">        # Note: You should disable gzip for SSL traffic.</span><br><span class="line">        # See: https://bugs.debian.org/773332</span><br><span class="line">        #</span><br><span class="line">        # Read up on ssl_ciphers to ensure a secure configuration.</span><br><span class="line">        # See: https://bugs.debian.org/765782</span><br><span class="line">        #</span><br><span class="line">        # Self signed certs generated by the ssl-cert package</span><br><span class="line">        # Don't use them in a production server!</span><br><span class="line">        #</span><br><span class="line">        # include snippets/snakeoil.conf;</span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line"></span><br><span class="line">        # Add index.php to the list if you are using PHP</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name linxunfeng.top; # 添加域名，如不添加，生成SSL证书时可能会有问题</span><br><span class="line"></span><br><span class="line">        #location / &#123;</span><br><span class="line">                # First attempt to serve request as file, then</span><br><span class="line">                # as directory, then fall back to displaying a 404.</span><br><span class="line">        #       try_files $uri $uri/ =404;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">                include snippets/fastcgi-php.conf;</span><br><span class="line">        #</span><br><span class="line">        #       # With php7.0-cgi alone:</span><br><span class="line">        #       fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        #       # With php7.0-fpm:</span><br><span class="line">                fastcgi_pass unix:/run/php/php7.0-fpm.sock;</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123; </span><br><span class="line">                proxy_pass http://roomserver$request_uri;</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate /etc/letsencrypt/live/linxunfeng.top/fullchain.pem;</span><br><span class="line">        ssl_certificate_key /etc/letsencrypt/live/linxunfeng.top/privkey.pem;</span><br><span class="line">        </span><br><span class="line">        # deny access to .htaccess files, if Apache's document root</span><br><span class="line">        # concurs with nginx's one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #       deny all;</span><br><span class="line">        #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="turn-php-与-iceconfig-php"><a href="#turn-php-与-iceconfig-php" class="headerlink" title="turn.php 与 iceconfig.php"></a>turn.php 与 iceconfig.php</h3><p>在<code>/var/www/html/</code>目录下创建两个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch turn.php iceconfig.php</span><br></pre></td></tr></table></figure><h4 id="turn-php"><a href="#turn-php" class="headerlink" title="turn.php"></a>turn.php</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $request_username = $_GET[<span class="string">"username"</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($request_username)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"username == null"</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $request_key = $_GET[<span class="string">"key"</span>];</span><br><span class="line">    $time_to_live = <span class="number">600</span>;</span><br><span class="line">    $timestamp = time() + $time_to_live;<span class="comment">//失效时间</span></span><br><span class="line">    $response_username = $timestamp.<span class="string">":"</span>.$_GET[<span class="string">"username"</span>];</span><br><span class="line">    $response_key = $request_key;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($response_key)) &#123;</span><br><span class="line">        $response_key = <span class="string">"code_key"</span>;</span><br><span class="line">    &#125; <span class="comment">//constants.py中CEOD_KEY</span></span><br><span class="line">    $response_password = getSignature($response_username, $response_key);</span><br><span class="line">    $jsonObj = <span class="keyword">new</span> Response();</span><br><span class="line">    $jsonObj-&gt;username = $response_username;</span><br><span class="line">    $jsonObj-&gt;password = $response_password;</span><br><span class="line">    $jsonObj-&gt;ttl = <span class="number">86400</span>;</span><br><span class="line">    <span class="comment">//此处需配置自己的服务器</span></span><br><span class="line">    $jsonObj-&gt;uris= <span class="keyword">array</span>(<span class="string">"stun:linxunfeng.top:3478"</span>,<span class="string">"turn:linxunfeng.top:3478?transport=udp"</span>,<span class="string">"turn:linxunfeng.top?transport=tcp"</span>);</span><br><span class="line">    <span class="keyword">echo</span> json_encode($jsonObj);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用HMAC-SHA1算法生成签名值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $str 源串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $key 密钥</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 签名值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSignature</span><span class="params">($str, $key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $signature = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (function_exists(<span class="string">'hash_hmac'</span>)) &#123;</span><br><span class="line">        $signature = base64_encode(hash_hmac(<span class="string">"sha1"</span>, $str, $key, <span class="keyword">true</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $blocksize = <span class="number">64</span>;</span><br><span class="line">        $hashfunc = <span class="string">'sha1'</span>;</span><br><span class="line">        <span class="keyword">if</span> (strlen($key) &gt; $blocksize) &#123;</span><br><span class="line">            $key = pack(<span class="string">'H*'</span>, $hashfunc($key));</span><br><span class="line">        &#125;</span><br><span class="line">        $key = str_pad($key, $blocksize, chr(<span class="number">0x00</span>));</span><br><span class="line">        $ipad = str_repeat(chr(<span class="number">0x36</span>), $blocksize);</span><br><span class="line">        $opad = str_repeat(chr(<span class="number">0x5c</span>), $blocksize);</span><br><span class="line">        $hmac = pack(</span><br><span class="line"><span class="string">'H*'</span>,</span><br><span class="line">    $hashfunc(</span><br><span class="line">($key ^ $opad) . pack(</span><br><span class="line"><span class="string">'H*'</span>,</span><br><span class="line">    $hashfunc(</span><br><span class="line">($key ^ $ipad) . $str</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line">        $signature = base64_encode($hmac);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $signature;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Response</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $username = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">public</span> $password = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">public</span> $ttl = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">public</span> $uris = <span class="keyword">array</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>iceconfig.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $request_username = <span class="string">"lxf"</span>;  <span class="comment">//配置成自己的turn服务器用户名</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($request_username)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"username == null"</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $request_key = <span class="string">"lxf"</span>;  <span class="comment">//配置成自己的turn服务器密码</span></span><br><span class="line">    $time_to_live = <span class="number">600</span>;</span><br><span class="line">    $timestamp = time() + $time_to_live;<span class="comment">//失效时间</span></span><br><span class="line">    $response_username = $timestamp.<span class="string">":"</span>.$_GET[<span class="string">"username"</span>];</span><br><span class="line">    $response_key = $request_key;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($response_key)) &#123;</span><br><span class="line">        $response_key = <span class="string">"CEOD_KEY"</span>;</span><br><span class="line">    &#125;<span class="comment">//constants.py中CEOD_KEY</span></span><br><span class="line">    $response_password = getSignature($response_username, $response_key);</span><br><span class="line">    $arrayObj = <span class="keyword">array</span>();</span><br><span class="line">    $arrayObj[<span class="number">0</span>][<span class="string">'username'</span>] = $response_username;</span><br><span class="line">    $arrayObj[<span class="number">0</span>][<span class="string">'credential'</span>] = $response_password;</span><br><span class="line">    <span class="comment">//配置成自己的stun/turn服务器</span></span><br><span class="line">    $arrayObj[<span class="number">0</span>][<span class="string">'urls'</span>][<span class="number">0</span>] = <span class="string">"stun:linxunfeng.top:3478"</span>;</span><br><span class="line">    $arrayObj[<span class="number">0</span>][<span class="string">'urls'</span>][<span class="number">1</span>] = <span class="string">"turn:linxunfeng.top:3478?transport=tcp"</span>;</span><br><span class="line">    $arrayObj[<span class="number">0</span>][<span class="string">'uris'</span>][<span class="number">0</span>] = <span class="string">"stun:linxunfeng.top:3478"</span>;</span><br><span class="line">    $arrayObj[<span class="number">0</span>][<span class="string">'uris'</span>][<span class="number">1</span>] = <span class="string">"turn:linxunfeng.top:3478?transport=tcp"</span>;</span><br><span class="line">    $jsonObj = <span class="keyword">new</span> Response();</span><br><span class="line">    $jsonObj-&gt;lifetimeDuration = <span class="string">"300.000s"</span>;</span><br><span class="line">    $jsonObj-&gt;iceServers = $arrayObj;</span><br><span class="line">    <span class="keyword">echo</span> json_encode($jsonObj);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用HMAC-SHA1算法生成签名值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $str 源串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $key 密钥</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 签名值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSignature</span><span class="params">($str, $key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $signature = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (function_exists(<span class="string">'hash_hmac'</span>)) &#123;</span><br><span class="line">        $signature = base64_encode(hash_hmac(<span class="string">"sha1"</span>, $str, $key, <span class="keyword">true</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $blocksize = <span class="number">64</span>;</span><br><span class="line">        $hashfunc = <span class="string">'sha1'</span>;</span><br><span class="line">        <span class="keyword">if</span> (strlen($key) &gt; $blocksize) &#123;</span><br><span class="line">            $key = pack(<span class="string">'H*'</span>, $hashfunc($key));</span><br><span class="line">        &#125;</span><br><span class="line">        $key = str_pad($key, $blocksize, chr(<span class="number">0x00</span>));</span><br><span class="line">        $ipad = str_repeat(chr(<span class="number">0x36</span>), $blocksize);</span><br><span class="line">        $opad = str_repeat(chr(<span class="number">0x5c</span>), $blocksize);</span><br><span class="line">        $hmac = pack(</span><br><span class="line"><span class="string">'H*'</span>,</span><br><span class="line">    $hashfunc(</span><br><span class="line">($key ^ $opad) . pack(</span><br><span class="line"><span class="string">'H*'</span>,</span><br><span class="line">    $hashfunc(</span><br><span class="line">($key ^ $ipad) . $str</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line">        $signature = base64_encode($hmac);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $signature;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Response</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $username = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">public</span> $password = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">public</span> $ttl = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">public</span> $uris = <span class="keyword">array</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>重启Nginx服务器和php7.0-fpm</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart </span><br><span class="line">service php7.0-fpm restart</span><br></pre></td></tr></table></figure><h2 id="七、各端运行测试"><a href="#七、各端运行测试" class="headerlink" title="七、各端运行测试"></a>七、各端运行测试</h2><h3 id="1、Browser"><a href="#1、Browser" class="headerlink" title="1、Browser"></a>1、Browser</h3><p>浏览器直接打开即可，如果不能访问摄像头之类的，请查看<a href="#2、浏览器无法访问摄像头">疑难杂症 - 2</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;域名</span><br></pre></td></tr></table></figure><h3 id="2、Android"><a href="#2、Android" class="headerlink" title="2、Android"></a>2、Android</h3><p><a href="https://github.com/duqian291902259/webrtc-android-demo-apprtc" target="_blank" rel="noopener">webrtc-android-demo-apprtc</a></p><p>直接安装手机，打开软件，点击右上角的扳手跳转至设置界面，滚到界面最下方，找到<code>Room server URL.</code>，将其修改为刚刚搭建好的服务器域名即可，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;linxunfeng.top</span><br></pre></td></tr></table></figure><h3 id="3、iOS"><a href="#3、iOS" class="headerlink" title="3、iOS"></a>3、iOS</h3><p><a href="https://github.com/ISBX/apprtc-ios" target="_blank" rel="noopener">GitHub - ISBX/apprtc-ios</a></p><p>打开<code>AppRTC</code>项目，分别修改以下两个文件</p><p><code>ARTCVideoChatViewController.m</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_HOST_URL @<span class="meta-string">"https://linxunfeng.top"</span></span></span><br></pre></td></tr></table></figure><p><code>Pods -&gt; Development Pods -&gt; AppRTC -&gt; Lib -&gt; ARDAppClient.m</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *kARDRoomServerHostUrl =</span><br><span class="line">    <span class="string">@"https://linxunfeng.top"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *kARDDefaultSTUNServerUrl =</span><br><span class="line">    <span class="string">@"stun:linxunfeng.top:3478"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *kARDTurnRequestUrl =</span><br><span class="line">    <span class="string">@"https://linxunfeng.top"</span></span><br><span class="line">    <span class="string">@"/turn?username=lxf&amp;key=lxf"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索 kARDDefaultSTUNServerUrl </span></span><br><span class="line">- (RTCICEServer *)defaultSTUNServer &#123;</span><br><span class="line">  <span class="built_in">NSURL</span> *defaultSTUNServerURL = [<span class="built_in">NSURL</span> URLWithString:kARDDefaultSTUNServerUrl];</span><br><span class="line">  <span class="keyword">return</span> [[RTCICEServer alloc] initWithURI:defaultSTUNServerURL</span><br><span class="line">                                  username:<span class="string">@"lxf"</span></span><br><span class="line">                                  password:<span class="string">@"lxf"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h2><h3 id="1、Request-host-is-not-whitelist-enabled"><a href="#1、Request-host-is-not-whitelist-enabled" class="headerlink" title="1、Request host is not whitelist enabled"></a>1、Request host is not whitelist enabled</h3><blockquote><p>具体提示<br>Request host is not whitelist enabled for this server. Please use the –host command-line flag to whitelist a specific host (recommended) or use –enable_host_checking to disable host checking. See the command-line flags help text for more information. </p></blockquote><p><a href="https://stackoverflow.com/questions/47988810/use-ngrok-url-as-callback-url-for-facebook-webhook-but-is-recognized-not-white" target="_blank" rel="noopener">参考链接</a></p><p>执行dev_appserver.py时，加上如下参数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--enable_host_checking=false</span><br></pre></td></tr></table></figure></p><p>完整指令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dev_appserver.py --enable_host_checking=false --host=172.18.141.108 ../apprtc/out/app_engine/</span><br></pre></td></tr></table></figure></p><h3 id="2、浏览器无法访问摄像头"><a href="#2、浏览器无法访问摄像头" class="headerlink" title="2、浏览器无法访问摄像头"></a>2、浏览器无法访问摄像头</h3><p>浏览器访问设备的摄像头是需要使用<code>https</code>链接或者<code>localhost</code>来访问</p><h3 id="3、端口"><a href="#3、端口" class="headerlink" title="3、端口"></a>3、端口</h3><p>阿里云等国内大厂提供的服务器基本上都有一个叫安全组的玩意儿，我们搭建AppRTC服务器的所有服务所需的端口均要添加至安全组</p><h3 id="4、Failed-to-execute-‘pushState’-on-‘History’"><a href="#4、Failed-to-execute-‘pushState’-on-‘History’" class="headerlink" title="4、Failed to execute ‘pushState’ on ‘History’"></a>4、Failed to execute ‘pushState’ on ‘History’</h3><blockquote><p>Failed to start signaling: Failed to execute ‘pushState’ on ‘History’: A history state object with URL ‘<a href="http://linxunfeng.top/r/598600855’">http://linxunfeng.top/r/598600855’</a> cannot be created in a document with origin ‘<a href="https://linxunfeng.top’" target="_blank" rel="noopener">https://linxunfeng.top’</a> and URL ‘<a href="https://linxunfeng.top/">https://linxunfeng.top/</a></p></blockquote><p>解决方法有两种</p><ul><li>解决方法1： </li></ul><blockquote><p> 房间服务器编译完成后，在/root/apprtc/out/app_engine/js/apprtc.debug.js文件中找到window.history.pushState({‘roomId’: roomId, ‘roomLink’: roomLink}, roomId, roomLink)，把这句话注释掉，重新运行即可。（如果重新编译，需要重新修改）</p></blockquote><ul><li>解决方法2： </li></ul><blockquote><p> 在/root/apprtc/src/web_app/js/appcontroller.js文件中找到window.history.pushState({‘roomId’: roomId, ‘roomLink’: roomLink}, roomId, roomLink)，把这句话注释掉，然后重新编译，重新运行房间服务器即可。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;记录AppRTC的搭建过程，实现iOS、Android、Browser同异设备的视频通信&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://linxunfeng.top/categories/Linux/"/>
    
    
    <category term="iOS" scheme="http://linxunfeng.top/tags/iOS/"/>
    
    <category term="Ubuntu" scheme="http://linxunfeng.top/tags/Ubuntu/"/>
    
    <category term="Linux" scheme="http://linxunfeng.top/tags/Linux/"/>
    
    <category term="Android" scheme="http://linxunfeng.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>打造Moya便捷解析库，提供RxSwift拓展</title>
    <link href="http://linxunfeng.top/2018/05/24/%E6%89%93%E9%80%A0Moya%E4%BE%BF%E6%8D%B7%E8%A7%A3%E6%9E%90%E5%BA%93%EF%BC%8C%E6%8F%90%E4%BE%9BRxSwift%E6%8B%93%E5%B1%95/"/>
    <id>http://linxunfeng.top/2018/05/24/%E6%89%93%E9%80%A0Moya%E4%BE%BF%E6%8D%B7%E8%A7%A3%E6%9E%90%E5%BA%93%EF%BC%8C%E6%8F%90%E4%BE%9BRxSwift%E6%8B%93%E5%B1%95/</id>
    <published>2018-05-24T20:25:04.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>MoyaMapper是基于Moya和SwiftyJSON封装的工具，以Moya的plugin的方式来实现间接解析，支持RxSwift</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>1、相信大家在使用Swift开发时，<a href="https://github.com/Moya/Moya" target="_blank" rel="noopener">Moya</a>是首选的网络工具，在模型解析这一块，Swift版模型解析的相关第三方库有很多，本人最习惯用的就是<a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="noopener">SwiftyJSON</a>。</p><p>2、下面会开始讲解整个主要的开发功能与思想。</p><p>3、以下内容是基于大家会使用Moya和SwiftJSON的前提下所著，还不会的同学可以先简单了解后再来阅读本篇文章哦～</p><h2 id="二、功能开发与思想讲解"><a href="#二、功能开发与思想讲解" class="headerlink" title="二、功能开发与思想讲解"></a>二、功能开发与思想讲解</h2><h3 id="1、尝试模型解析"><a href="#1、尝试模型解析" class="headerlink" title="1、尝试模型解析"></a>1、尝试模型解析</h3><p>Moya请求服务器返回的数据以Response类返回给我们，那我们就给Response类做一个扩展，这里以解析模型为例<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要传入一个参数，告知我们要转换出什么模型</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapObject</span>&lt;T: Modelable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="comment">// 模型解析过程</span></span><br><span class="line">    。。。</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="type">T</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Q: 那中间的解析过程该怎么写呢？</p><p>A: <strong>可以让开发者遵守某个协议，实现指定的转换方法并描述转换关系。其转换过程我们不需要知道，交给开发者即可。</strong></p><p>那接着我们来定义一个协议Modelable，并声明转换方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Modelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="number">_</span> json: JSON)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>开发者创建一个<code>MyMoel</code>的结构体，遵守协议<code>Modelable</code>,并实现<code>mapping</code>，书写转换关系<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyModel</span>: <span class="title">Modelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _id = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="number">_</span> json: JSON)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>._id = json[<span class="string">"_id"</span>].stringValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以目前的现状来分析一下：<code>mapObject</code>可以让开发者传入<code>模型类型</code>，而我们的协议方法却并非是个类方法。那我们需要先得到这个<code>模型类型</code>的对象，再来调用<code>mapping</code>方法</p><h3 id="2、模型解析的驱动开发"><a href="#2、模型解析的驱动开发" class="headerlink" title="2、模型解析的驱动开发"></a>2、模型解析的驱动开发</h3><p>Q: 怎么得到这个对象？</p><p>A: <strong>可以在协议中声明一个初始化方法来创建对象。是的，我们在mapObject中创建对应模型类型的对象，调用mapping方法来转换数据，再把模型对象传出去即可。</strong></p><p>那我们在<code>Modelable</code>中声明一个init方法，并传入一个参数，区别于其它初始化方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Modelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="number">_</span> json: JSON)</span></span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> json: <span class="type">JSON</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>OK，现在把<code>mapObject</code>方法补齐模型解析过程</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapObject</span>&lt;T: Modelable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> modelJson = <span class="type">JSON</span>(data)[<span class="string">"modelKey"</span>]</span><br><span class="line">    <span class="comment">// 模型解析过程</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="type">T</span>.<span class="keyword">init</span>(modelJson)</span><br><span class="line">    obj.mapping(modelJson)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、自定义解析键名"><a href="#3、自定义解析键名" class="headerlink" title="3、自定义解析键名"></a>3、自定义解析键名</h3><p>Q: 这样是搞定解析了，但是网络请求回来的json格式错综复杂，有什么办法可以让开发者来自行指定model对应的键名呢？</p><p>A: <strong>嗯嗯，既然解析过程是在 Response 扩展里操作的，那我们可以通过协议定义键名属性，并且使用 Runtime 给Response动态添加一个属性，来记录遵守协议后的相应类名</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ModelableParameterType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// 请求成功时状态码对应的值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> successValue: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="comment">/// 状态码对应的键</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> statusCodeKey: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="comment">/// 请求后的提示语对应的键</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> tipStrKey: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="comment">/// 请求后的主要模型数据的键</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> modelKey: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:- runtime</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">AssociatedKeys</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">var</span> lxf_modelableParameterKey = <span class="string">"lxf_modelableParameterKey"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> lxf_modelableParameter: <span class="type">ModelableParameterType</span>.<span class="type">Type</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> value = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedKeys</span>.lxf_modelableParameterKey) <span class="keyword">as</span> <span class="type">AnyObject</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> type = value <span class="keyword">as</span>? <span class="type">ModelableParameterType</span>.<span class="type">Type</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="type">NullParameter</span>.<span class="keyword">self</span> &#125;</span><br><span class="line">            <span class="keyword">return</span> type</span><br><span class="line">        &#125; <span class="keyword">set</span> &#123;</span><br><span class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedKeys</span>.lxf_modelableParameterKey, newValue, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>这里有个坑：_SwiftValue问题</strong> (献上 <a href="https://stackoverflow.com/questions/42033735/failing-cast-in-swift-from-any-to-protocol/42034523#42034523" target="_blank" rel="noopener">参考链接</a>)<br>如果我们存储的不是OC对象，那么<code>objc_getAssociatedObject</code>取出来的值的类型统统为<code>_SwiftValue</code>，直接<code>as? ModelableParameterType.Type</code>绝对是nil，需要在取出来后<code>as AnyObject</code>再转换为其它类型才会成功～～ </p></blockquote><p>现在开发者就可以创建一个类来遵守<code>ModelableParameterType</code>协议，并自定义解析键名<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NetParameter</span> : <span class="title">ModelableParameterType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> successValue: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"false"</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> statusCodeKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"error"</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> tipStrKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"errMsg"</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> modelKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"results"</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4、插件注入"><a href="#4、插件注入" class="headerlink" title="4、插件注入"></a>4、插件注入</h3><p>Q: 厉害了，不过要在什么时机下存储这个自定义键名的<code>NetParameter</code>？</p><p>A: 额，这个～～～ 哦，对了，可以通过Moya提供的插件机制！</p><p>翻出Moya中的Plugin.Swift，找到这个<code>process</code>方法，看看方法说明。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 在结束之前，可以被用来修改请求结果</span></span><br><span class="line"><span class="comment">/// Called to modify a result before completion.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(<span class="number">_</span> result: Result&lt;Moya.Response, MoyaError&gt;, target: TargetType)</span></span> -&gt; <span class="type">Result</span>&lt;<span class="type">Moya</span>.<span class="type">Response</span>, <span class="type">MoyaError</span>&gt;</span><br></pre></td></tr></table></figure></p><p>那好，我们也做一个插件<code>MoyaMapperPlugin</code>给开发者使用，在创建<code>MoyaMapperPlugin</code>时把自定义解析键名的类型传进来<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">MoyaMapperPlugin</span>: <span class="title">PluginType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parameter: <span class="type">ModelableParameterType</span>.<span class="type">Type</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>&lt;<span class="type">T</span>: <span class="type">ModelableParameterType</span>&gt;(<span class="number">_</span> type: <span class="type">T</span>.<span class="type">Type</span>) &#123;</span><br><span class="line">        parameter = type</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// modify response</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(<span class="number">_</span> result: Result&lt;Response, MoyaError&gt;, target: TargetType)</span></span> -&gt; <span class="type">Result</span>&lt;<span class="type">Response</span>, <span class="type">MoyaError</span>&gt; &#123;</span><br><span class="line">        <span class="number">_</span> = result.<span class="built_in">map</span> &#123; (response) -&gt; <span class="type">Response</span> <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// 趁机添加相关数据 </span></span><br><span class="line">            response.lxf_modelableParameter = parameter</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用：开发者在创建<code>MoyaProvider</code>对象时，顺便注入插件。(OS: 这一步堪称“注入灵魂”)<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MoyaProvider</span>&lt;<span class="type">LXFNetworkTool</span>&gt;(plugins: [<span class="type">MoyaMapperPlugin</span>(<span class="type">NetParameter</span>.<span class="keyword">self</span>)])</span><br></pre></td></tr></table></figure></p><h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><blockquote><p>以上就是主要的踩坑过程了。模型数组解析和指定解析也跟这些差不多的，这里就不再赘述。本人已经将其封装成一个开源库 <a href="https://github.com/LinXunFeng/MoyaMapper" target="_blank" rel="noopener">MoyaMapper</a>，包含了上述已经和未曾说明的功能，下面会讲解如何去使用。以上部分可以称为开胃菜，目的就是平滑过渡到下面MoyaMapper的具体使用。</p></blockquote><p>可能单单使用<code>MoyaMapper</code>的默认子库<code>Core</code>，作用体会上并不会很深。但是，如果你也是使用RxSwift来开发项目的话，请安装<code>&#39;MoyaMapper/Rx&#39;</code>吧，绝对一个字：「爽」</p><h2 id="二、MoyaMapper的使用"><a href="#二、MoyaMapper的使用" class="headerlink" title="二、MoyaMapper的使用"></a>二、MoyaMapper的使用</h2><p><img src= "/img/loading.gif" data-src="/images/2018/05/打造Moya便捷解析库，提供RxSwift拓展/MoyaMapper.png" alt="MoyaMapper"></p><p>MoyaMapper是基于Moya和SwiftyJSON封装的工具，以Moya的plugin的方式来实现间接解析，支持RxSwift</p><p><img src= "/img/loading.gif" data-src="/images/2018/05/打造Moya便捷解析库，提供RxSwift拓展/JSON数据对照.png" alt="JSON数据对照"></p><h3 id="1、定义并注入自定义键名类"><a href="#1、定义并注入自定义键名类" class="headerlink" title="1、定义并注入自定义键名类"></a>1、定义并注入自定义键名类</h3><ol><li>定义一个遵守ModelableParameterType协议的结构体</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 各参数返回的内容请参考上面JSON数据对照图</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NetParameter</span> : <span class="title">ModelableParameterType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> successValue: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"false"</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> statusCodeKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"error"</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> tipStrKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">""</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> modelKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"results"</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>此外，这里还可以做简单的路径处理，以应付各种情况，以’&gt;’隔开</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设返回的json数据关于请求状态的相关数据如下所示，</span></span><br><span class="line">error: &#123;</span><br><span class="line">    'errorStatus':false</span><br><span class="line">    'errMsg':'error Argument type'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们指明解析路径：error对象下的errMsg字段，一层层表示下去即可</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">var</span> tipStrKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"error&gt;errMsg"</span> &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>以plugin的方式传递给MoyaProvider</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MoyaMapperPlugin这里只需要传入类型</span></span><br><span class="line"><span class="type">MoyaProvider</span>&lt;<span class="type">LXFNetworkTool</span>&gt;(plugins: [<span class="type">MoyaMapperPlugin</span>(<span class="type">NetParameter</span>.<span class="keyword">self</span>)])</span><br></pre></td></tr></table></figure><h3 id="2、定义解析模型"><a href="#2、定义解析模型" class="headerlink" title="2、定义解析模型"></a>2、定义解析模型</h3><p>创建一个遵守Modelable协议的结构体</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyModel</span>: <span class="title">Modelable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> _id = <span class="string">""</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> json: <span class="type">JSON</span>) &#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="number">_</span> json: JSON)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>._id = json[<span class="string">"_id"</span>].stringValue</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">遵守<span class="type">Modelable</span>协议，实现协议的两个方法，在`mapping`方法中描述模型字段的具体解析</span><br></pre></td></tr></table></figure><h3 id="3、解析数据"><a href="#3、解析数据" class="headerlink" title="3、解析数据"></a>3、解析数据</h3><h4 id="0x00-请求结果与模型解析"><a href="#0x00-请求结果与模型解析" class="headerlink" title="0x00 请求结果与模型解析"></a>0x00 请求结果与模型解析</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Result</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapResult</span><span class="params">(params: ModelableParamsBlock? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">MoyaMapperResult</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Model</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapObject</span>&lt;T: Modelable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>, modelKey: String? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">T</span></span><br><span class="line"><span class="comment">// Result+Model</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapObjResult</span>&lt;T: Modelable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>, params: ModelableParamsBlock? = <span class="literal">nil</span>)</span></span> -&gt; (<span class="type">MoyaMapperResult</span>, <span class="type">T</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Models</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapArray</span>&lt;T: Modelable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>, modelKey: String? = <span class="literal">nil</span>)</span></span> -&gt; [<span class="type">T</span>]</span><br><span class="line"><span class="comment">// Result+Models</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapArrayResult</span>&lt;T: Modelable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>, params: ModelableParamsBlock? = <span class="literal">nil</span>)</span></span> -&gt; (<span class="type">MoyaMapperResult</span>, [<span class="type">T</span>])</span><br></pre></td></tr></table></figure><p>上面的五个方法，观其名，知其意，这里就不过多解释了，主要注意两点：</p><ul><li><p>result</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元祖类型</span></span><br><span class="line"><span class="comment">// 参数1：根据statusCodeKey取出的值与successValue是否相等</span></span><br><span class="line"><span class="comment">// 参数2：根据tipStrKey取出的值</span></span><br><span class="line">result：(<span class="type">Bool</span>, <span class="type">String</span>)</span><br></pre></td></tr></table></figure></li><li><p>params</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// params: ModelableParamsBlock? = nil</span></span><br><span class="line"><span class="comment">// 这里只有在特殊场景下才需要使用到。如：项目中需要在某处使用特定接口，但是返回的json格式跟自己项目的不一样，并且只有这么一两处用得着该额外接口，那就需要我们这个参数了，以Block的方式返回解析参数类型。</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="0x01、特定解析"><a href="#0x01、特定解析" class="headerlink" title="0x01、特定解析"></a>0x01、特定解析</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Model</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">toJSON</span><span class="params">(modelKey: String? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">JSON</span></span><br><span class="line"><span class="comment">// 获取指定路径的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">fetchJSONString</span><span class="params">(path: String? = <span class="literal">nil</span>, keys: [JSONSubscriptType])</span></span> -&gt; <span class="type">String</span></span><br></pre></td></tr></table></figure><p>这两个方法，如果没有指定路径，默认都是针对modelKey的<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetchJSONString(keys: &lt;[JSONSubscriptType]&gt;)</span></span><br><span class="line"><span class="number">1</span>、通过 keys 传递数组, 该数组可传入的类型为 <span class="type">Int</span> 和 <span class="type">String</span></span><br><span class="line"><span class="number">2</span>、默认是以 modelKey 所示路径，来获取相应的数值。如果modelKey并非是你所想要使用的解析路径，可以使用下方的重载方法重新指定路径即可</span><br><span class="line"></span><br><span class="line"><span class="comment">// response.fetchJSONString(path: &lt;String?&gt;, keys: &lt;[JSONSubscriptType]&gt;)</span></span><br></pre></td></tr></table></figure></p><p><strong>MoyaMapper也提供了Rx子库，为方便RxSwift的流式编程下便捷解析数据</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MoyaMapper默认只安装Core下的文件</span><br><span class="line">pod <span class="string">'MoyaMapper'</span></span><br><span class="line"></span><br><span class="line">RxSwift拓展</span><br><span class="line">pod <span class="string">'MoyaMapper/Rx'</span></span><br></pre></td></tr></table></figure><p>具体使用还不是很明白的同学可以下载并运行<code>Example</code>看看</p><p><strong>如果<a href="https://github.com/LinXunFeng/MoyaMapper" target="_blank" rel="noopener">MoyaMapper</a>有什么不足的地方，欢迎提出issues，感谢大家的支持</strong></p>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;MoyaMapper是基于Moya和SwiftyJSON封装的工具，以Moya的plugin的方式来实现间接解析，支持RxSwift&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="iOS" scheme="http://linxunfeng.top/categories/iOS/"/>
    
    
    <category term="iOS" scheme="http://linxunfeng.top/tags/iOS/"/>
    
    <category term="Swift" scheme="http://linxunfeng.top/tags/Swift/"/>
    
    <category term="RxSwift" scheme="http://linxunfeng.top/tags/RxSwift/"/>
    
  </entry>
  
  <entry>
    <title>iOS-面向协议方式封装空白页功能</title>
    <link href="http://linxunfeng.top/2018/04/07/iOS-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E6%96%B9%E5%BC%8F%E5%B0%81%E8%A3%85%E7%A9%BA%E7%99%BD%E9%A1%B5%E5%8A%9F%E8%83%BD/"/>
    <id>http://linxunfeng.top/2018/04/07/iOS-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E6%96%B9%E5%BC%8F%E5%B0%81%E8%A3%85%E7%A9%BA%E7%99%BD%E9%A1%B5%E5%8A%9F%E8%83%BD/</id>
    <published>2018-04-07T22:21:46.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>为了良好的交互体验，相信大家在对待<code>scrollView</code>无数据时的提示页都会使用一些第三方来定制，最典型的就是使用<a href="https://github.com/dzenbot/DZNEmptyDataSet" target="_blank" rel="noopener">DZNEmptyDataSet</a>。但是每个界面都写一堆与<code>DZNEmptyDataSetDelegate</code>，<code>DZNEmptyDataSetSource</code>相关的代码就不太好，那一般情况下自然的就会采用继承的方式来避免。而Swift除了可以面向对象编程，它还可以面向协议编程。那可不可以也用协议来解决情况呢？嘿嘿，这个可以有，那我们接下来就来试试怎么通过协议的方式来避免上述情况，并且实现一行代码添加空白页功能</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><blockquote><p>为了良好的交互体验，相信大家在对待<code>scrollView</code>无数据时的提示页都会使用一些第三方来定制，最典型的就是使用<a href="https://github.com/dzenbot/DZNEmptyDataSet" target="_blank" rel="noopener">DZNEmptyDataSet</a>。但是每个界面都写一堆与<code>DZNEmptyDataSetDelegate</code>，<code>DZNEmptyDataSetSource</code>相关的代码就不太好，那一般情况下自然的就会采用继承的方式来避免。而Swift除了可以面向对象编程，它还可以面向协议编程。那可不可以也用协议来解决情况呢？嘿嘿，这个可以有，那我们接下来就来试试怎么通过协议的方式来避免上述情况，并且实现一行代码添加空白页功能</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果对面向协议有疑问的同学可以看下我之前的两篇文章</p><p><a href="/2017/09/12/iOS-Swift-面向协议编程（一）/">iOS - Swift 面向协议编程（一）</a> </p><p><a href="/2017/09/12/iOS-Swift-面向协议编程（二）/">iOS - Swift 面向协议编程（二）</a></p><p>之前的文章中提到了，协议除了起规范作用，还有别一个用处，就是赋予能力。我们现在的目的就是让目标控制器或者目标视图在遵守我们的协议后，就可以有实现空白页的功能。</p><h2 id="一、基本实现"><a href="#一、基本实现" class="headerlink" title="一、基本实现"></a>一、基本实现</h2><h3 id="1、创建协议"><a href="#1、创建协议" class="headerlink" title="1、创建协议"></a>1、创建协议</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:- 空视图占位协议</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">LXFEmptyDataSetable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、确定面向类"><a href="#2、确定面向类" class="headerlink" title="2、确定面向类"></a>2、确定面向类</h3><p>确定我们面向的类，一般<code>tableView</code>或者<code>collectionView</code>都是写在控制器里，那我们面向的类就规定为<code>UIViewController</code>，或许也有人写在<code>UIView</code>里，不过这里先按<code>UIViewController</code>来写吧<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:- UIViewController - 空视图占位协议</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">LXFEmptyDataSetable</span> <span class="title">where</span> <span class="title">Self</span> : <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 3、的实现的方法写在这里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、定义功能方法"><a href="#3、定义功能方法" class="headerlink" title="3、定义功能方法"></a>3、定义功能方法</h3><p>将<code>scrollView</code>传递进来，让我们定义的方法来暗地里做些操作<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lxf_EmptyDataSet</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class="line">    scrollView.emptyDataSetDelegate = <span class="keyword">self</span></span><br><span class="line">    scrollView.emptyDataSetSource = <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4、设置数据源和代理"><a href="#4、设置数据源和代理" class="headerlink" title="4、设置数据源和代理"></a>4、设置数据源和代理</h3><p>在<code>3、定义功能方法</code>中将<code>delegate</code>和<code>source</code>设置为了<code>self</code> ，而协议是无法遵守再次遵守其它协议的，那让什么来遵守对应的协议呢？要明白这里的<code>self</code>指的是<code>UIViewController</code>,考虑到<code>UIView</code>的可能，这里我就让万物对象之父<code>NSObject</code>来遵守，并实现对应的数据源方法和代理方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObject</span> : <span class="title">DZNEmptyDataSetDelegate</span>, <span class="title">DZNEmptyDataSetSource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">image</span><span class="params">(forEmptyDataSet scrollView: UIScrollView!)</span></span> -&gt; <span class="type">UIImage!</span> &#123;</span><br><span class="line">        <span class="comment">// 返回提示图片</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">title</span><span class="params">(forEmptyDataSet scrollView: UIScrollView!)</span></span> -&gt; <span class="type">NSAttributedString!</span> &#123;</span><br><span class="line">        <span class="comment">// 设置富文本标题</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">verticalOffset</span><span class="params">(forEmptyDataSet scrollView: UIScrollView!)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="comment">// 设置纵向偏移</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二、定制空白页"><a href="#二、定制空白页" class="headerlink" title="二、定制空白页"></a>二、定制空白页</h2><p>通过上述步骤后，只要让<code>UIViewController</code>遵守我们的协议，再调用一下<code>lxf_EmptyDataSet</code>方法就可以实现数据空白页了。但是，这样直接写死的方式很不好，有时候一些场景是需要我们做出定制的，那怎么实现定制呢？协议又不能有自己的变量来存放我们的定制。</p><font color='red'><em>这里先做出一个限定，我们要使用重载方法来完成该功能，实现即可高定制，又可使用默认定制。</em></font><p>回到刚刚的话题，使用UserDefaults来实现可以吗？可以，但是比较麻烦，因为UserDefaults是单例，整个进程共用这一份资源，如果你当前<code>controller</code>遵守了我们的协议<code>LXFEmptyDataSetable</code>并做出了定制，那么当下一个<code>controller</code>在遵守协议后使用了<code>默认定制</code>时，那你要怎么办？还要区分<code>scrollView</code>，那就得保存当前<code>scrollView</code>，在退出当前<code>controller</code>后还要把对应的东西置空。好咯好咯，那你说到底要怎么搞才最合适？</p><blockquote><p>解决方案：拓展<code>UIScrollView</code>！！！有没有发现？，非常地恰巧，我们定义的方法<code>lxf_EmptyDataSet</code>需要外界将<code>UIScrollView</code>传递进来，在<code>DZNEmptyDataSet</code>的数据源方法和代理方法也有<code>scrollView</code>。那让<code>UIScrollView</code>来携带我们的定制就好啦。</p></blockquote><h3 id="1、定义定制相关的枚举"><a href="#1、定义定制相关的枚举" class="headerlink" title="1、定义定制相关的枚举"></a>1、定义定制相关的枚举</h3><p>这里我定义了常用的定制相关的枚举<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">LXFEmptyDataSetAttributeKeyType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// 纵向偏移(-50)  CGFloat</span></span><br><span class="line">    <span class="keyword">case</span> verticalOffset</span><br><span class="line">    <span class="comment">/// 提示语(暂无数据)  String</span></span><br><span class="line">    <span class="keyword">case</span> tipStr</span><br><span class="line">    <span class="comment">/// 提示语的font(system15)  UIFont</span></span><br><span class="line">    <span class="keyword">case</span> tipFont</span><br><span class="line">    <span class="comment">/// 提示语颜色(D2D2D2)  UIColor</span></span><br><span class="line">    <span class="keyword">case</span> tipColor</span><br><span class="line">    <span class="comment">/// 提示图(LXFEmptyDataPic) UIImage</span></span><br><span class="line">    <span class="keyword">case</span> tipImage</span><br><span class="line">    <span class="comment">/// 允许滚动(true) Bool</span></span><br><span class="line">    <span class="keyword">case</span> allowScroll</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2、拓展UIScrollView"><a href="#2、拓展UIScrollView" class="headerlink" title="2、拓展UIScrollView"></a>2、拓展UIScrollView</h3><p>为<code>UIScrollView</code>定义一个定制相关的属性字典<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIScrollView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">AssociatedKeys</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">var</span> lxf_emptyAttributeDict:[<span class="type">LXFEmptyDataSetAttributeKeyType</span> : <span class="type">Any</span>]?</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/// 属性字典</span></span><br><span class="line">    <span class="keyword">var</span> lxf_emptyAttributeDict: [<span class="type">LXFEmptyDataSetAttributeKeyType</span> : <span class="type">Any</span>]? &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedKeys</span>.lxf_emptyAttributeDict) <span class="keyword">as</span>? [<span class="type">LXFEmptyDataSetAttributeKeyType</span> : <span class="type">Any</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedKeys</span>.lxf_emptyAttributeDict, newValue <span class="keyword">as</span> [<span class="type">LXFEmptyDataSetAttributeKeyType</span> : <span class="type">Any</span>]?, objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、完善lxf-EmptyDataSet方法"><a href="#3、完善lxf-EmptyDataSet方法" class="headerlink" title="3、完善lxf_EmptyDataSet方法"></a>3、完善lxf_EmptyDataSet方法</h3><p>这里我们让外界通过闭包的方式来定制自己的空白页<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:- UIViewController - 空视图占位协议</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">LXFEmptyDataSetable</span> <span class="title">where</span> <span class="title">Self</span> : <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">lxf_EmptyDataSet</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView, attributeBlock: <span class="params">(<span class="params">()</span></span></span></span>-&gt;([<span class="type">LXFEmptyDataSetAttributeKeyType</span> : <span class="type">Any</span>]))? = <span class="literal">nil</span>) &#123;</span><br><span class="line">        scrollView.lxf_emptyAttributeDict = attributeBlock != <span class="literal">nil</span> ? attributeBlock!() : <span class="literal">nil</span></span><br><span class="line">        scrollView.emptyDataSetDelegate = <span class="keyword">self</span></span><br><span class="line">        scrollView.emptyDataSetSource = <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4、使用定制属性字典"><a href="#4、使用定制属性字典" class="headerlink" title="4、使用定制属性字典"></a>4、使用定制属性字典</h3><p>这里以返回提示图片的方法为例吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public func image(forEmptyDataSet scrollView: UIScrollView!) -&gt; UIImage! &#123;</span><br><span class="line">    guard let tipImg &#x3D; scrollView.lxf_emptyAttributeDict?[.tipImage] as? UIImage else &#123;</span><br><span class="line">        return UIImage(named: &quot;LXFEmptyDataPic&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    return tipImg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、外界的使用姿势"><a href="#5、外界的使用姿势" class="headerlink" title="5、外界的使用姿势"></a>5、外界的使用姿势</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LXFEmptyDemoController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        initUI()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LXFEmptyDemoController</span>: <span class="title">LXFEmptyDataSetable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">initUI</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tableView = <span class="type">UITableView</span>()</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 高定制</span></span><br><span class="line">        <span class="keyword">self</span>.lxf_EmptyDataSet(tableView) &#123; () -&gt; ([<span class="type">LXFEmptyDataSetAttributeKeyType</span> : <span class="type">Any</span>]) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                .tipStr:<span class="string">"哟哟哟"</span>,</span><br><span class="line">                .verticalOffset:-<span class="number">150</span>,</span><br><span class="line">                .allowScroll: <span class="literal">false</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 默认定制</span></span><br><span class="line">        <span class="comment">// self.lxf_EmptyDataSet(tableView)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/images/2018/04/iOS-面向协议方式封装空白页功能/lxf_EmptyDataSet.png" alt="大功告成"></p><h2 id="三、开源库"><a href="#三、开源库" class="headerlink" title="三、开源库"></a>三、开源库</h2><p>我对这个过程进行一次整理，并做成一个名为 <a href="https://github.com/LinXunFeng/LXFProtocolTool" target="_blank" rel="noopener">LXFProtocolTool</a> 的库并上传至gitHub。可以使用<code>Cocoapods</code>的方式来安装使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#39;LXFProtocolTool&#39;</span><br></pre></td></tr></table></figure><p>我也将 <a href="http://linxunfeng.top/2017/09/12/iOS-Swift-面向协议编程（二）/">iOS - Swift 面向协议编程（二）</a> 中提及的通过协议便捷加载xib的功能也集成了进来。大家可以根据自己的需要在Podfile写明要安装的功能</p><ul><li>Xib加载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#39;LXFProtocolTool&#x2F;LXFNibloadable&#39;</span><br></pre></td></tr></table></figure><ul><li>空白视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#39;LXFProtocolTool&#x2F;LXFEmptyDataSetable&#39;</span><br></pre></td></tr></table></figure><p>创建这个库的目的是为了通过协议的方式来方便快捷地实现一些的实用功能，目前功能不多，不过往后会逐渐增加，或许你有什么想实现的功能也可以提出来，喜欢的就给个Star鼓励下我吧 🚀 🚀 🚀 </p>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;为了良好的交互体验，相信大家在对待&lt;code&gt;scrollView&lt;/code&gt;无数据时的提示页都会使用一些第三方来定制，最典型的就是使用&lt;a href=&quot;https://github.com/dzenbot/DZNEmptyDataSet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DZNEmptyDataSet&lt;/a&gt;。但是每个界面都写一堆与&lt;code&gt;DZNEmptyDataSetDelegate&lt;/code&gt;，&lt;code&gt;DZNEmptyDataSetSource&lt;/code&gt;相关的代码就不太好，那一般情况下自然的就会采用继承的方式来避免。而Swift除了可以面向对象编程，它还可以面向协议编程。那可不可以也用协议来解决情况呢？嘿嘿，这个可以有，那我们接下来就来试试怎么通过协议的方式来避免上述情况，并且实现一行代码添加空白页功能&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="iOS" scheme="http://linxunfeng.top/categories/iOS/"/>
    
    
    <category term="iOS" scheme="http://linxunfeng.top/tags/iOS/"/>
    
    <category term="Swift" scheme="http://linxunfeng.top/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS-组件化开发（四）：fastlane实现pod自动化</title>
    <link href="http://linxunfeng.top/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Afastlane%E5%AE%9E%E7%8E%B0pod%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>http://linxunfeng.top/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Afastlane%E5%AE%9E%E7%8E%B0pod%E8%87%AA%E5%8A%A8%E5%8C%96/</id>
    <published>2018-04-06T19:53:20.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>在第一次组件化的时候，需要执行很多操作，这些操作可以在【<a href="http://linxunfeng.top/2018/04/06/iOS-组件化开发（一）：远程私有库的基本使用/">iOS-组件化开发（一）：远程私有库的基本使用</a>】，这里就不再赘述，在组件化后的重复性操作就是升级，而升级这个过程是一模一样的。那么，我们有什么办法可以很方便的搞定这一过程来节约我们大量的时间呢？</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/fastlane.png" alt=""></p><blockquote><p>在第一次组件化的时候，需要执行很多操作，这些操作可以在【<a href="http://linxunfeng.top/2018/04/06/iOS-组件化开发（一）：远程私有库的基本使用/">iOS-组件化开发（一）：远程私有库的基本使用</a>】，这里就不再赘述，在组件化后的重复性操作就是升级，而升级这个过程是一模一样的。那么，我们有什么办法可以很方便的搞定这一过程来节约我们大量的时间呢？</p></blockquote><h2 id="一、升级必备操作"><a href="#一、升级必备操作" class="headerlink" title="一、升级必备操作"></a>一、升级必备操作</h2><p>修改完核心代码后，一共还需要做以下几步：<br><br>1、修改spec文件（修改s.version，s.description等）<br><br>2、<code>pod install</code> （使Example与pod下来的库产生关联）<br><br>3、提交本地仓库代码至远程仓库<br><br>4、打标签，并提交至远程<br><br>5、验证spec，并提至私有索引库</p><h2 id="二、Fastlane"><a href="#二、Fastlane" class="headerlink" title="二、Fastlane"></a>二、Fastlane</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p><a href="https://docs.fastlane.tools/" target="_blank" rel="noopener">Fastlane文档说明 </a><br>Fastlane是一个ruby脚本集合，它可以按照我们指定的路线，在指定位置执行我们所要执行的操作。这里我们称这样的路线为「航道(lane)」，这样的操作称为「Action」</p><p>Action是Fastlane自动化流程中的最小执行单元，用来执行Fastlane脚本中的命令，关于更多的描述可以到<a href="https://docs.fastlane.tools/actions/Actions/" target="_blank" rel="noopener">Actions - fastlane docs</a>查看，里面也介绍了常用的action有哪些，顺带附上<a href="https://github.com/fastlane/fastlane/tree/master/fastlane/lib/fastlane/actions" target="_blank" rel="noopener">action的源码地址</a>，这个源码在后面自定义起参考作用</p><h3 id="2、-安装"><a href="#2、-安装" class="headerlink" title="2、 安装"></a>2、 安装</h3><ul><li><p>确保ruby为最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install ruby</span><br></pre></td></tr></table></figure></li><li><p>安装fastlane</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n &#x2F;usr&#x2F;local&#x2F;bin fastlane</span><br></pre></td></tr></table></figure></li><li><p>查看当前fastlane版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane --version</span><br></pre></td></tr></table></figure></li><li><p>查看所有action</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane actions</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、fastlane初始化"><a href="#三、fastlane初始化" class="headerlink" title="三、fastlane初始化"></a>三、fastlane初始化</h3><p>cd到你的本地组件仓库的根目录</p><ul><li><del>初始化fastlane</del><br><del><code>fastlane init</code></del><br><del>不过这个步骤对我们来说可以跳过，在init后提示你输入一些东西，包括上传需要用到的APPLE ID什么的一堆东西，由于我们并不涉及这些，所以我们使用更方便的方式</del></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个fastlane文件夹</span><br><span class="line"># 进入fastlane目录</span><br><span class="line"># 创建一个Fastfile文件</span><br><span class="line">mkdir fastlane</span><br><span class="line">cd fastlane</span><br><span class="line">touch Fastfile</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/目录结构.png" alt="目录结构"></p><h3 id="1、修改Fastfile"><a href="#1、修改Fastfile" class="headerlink" title="1、修改Fastfile"></a>1、修改Fastfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">desc &#39;描述航道作用&#39;</span><br><span class="line">lane :航道名称 do |options|</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; options 可以用来传递参数</span><br><span class="line">&#x2F;&#x2F; 示例：varName &#x3D; options[:name]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 航道上需要执行的操作</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>航道上要扫描的操作可以到<a href="https://docs.fastlane.tools/actions" target="_blank" rel="noopener">Actions</a>上查找，可以通过关键字搜索，如下图<br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/cocoapods.png" alt="cocoapods"><br>点进去可以看到具体的使用及参数说明</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/使用说明.png" alt="使用说明"></p><p>这里附上本人的Fastfile内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">desc &#39;LXFUpdatePodTool 航道用来自动化升级维护私有库&#39;</span><br><span class="line">lane : LXFUpdatePodTool do |options|</span><br><span class="line"></span><br><span class="line">tagNum &#x3D; options[:tag]</span><br><span class="line">podspecName &#x3D; options[:specName]</span><br><span class="line"></span><br><span class="line"># 航道上需要执行的操作</span><br><span class="line"># 具体action到 https:&#x2F;&#x2F;docs.fastlane.tools&#x2F;actions 上面查找</span><br><span class="line"># 这里的路径以仓库根目录为准</span><br><span class="line"></span><br><span class="line"># 1、修改spec文件（修改s.version，s.description等）</span><br><span class="line"># 2、pod install （使Example与pod下来的库产生关联）</span><br><span class="line">cocoapods(</span><br><span class="line">  clean: true,</span><br><span class="line">  podfile: &quot;.&#x2F;Example&#x2F;Podfile&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3、提交本地仓库代码至远程仓库</span><br><span class="line">git_add(path: &quot;.&quot;)</span><br><span class="line">git_commit(path: &quot;.&quot;, message: &quot;upgrade repo&quot;)</span><br><span class="line">push_to_git_remote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 4、打标签，并提交至远程</span><br><span class="line">add_git_tag(</span><br><span class="line">  tag: tagNum</span><br><span class="line">)</span><br><span class="line">push_git_tags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 5、验证spec，并提至私有索引库</span><br><span class="line">pod_lib_lint(allow_warnings: true)</span><br><span class="line"># 因为本地索引库repo的名字是基本上不会去改变的，所以这里直接写死 LXFSpecs</span><br><span class="line"># podspec的名字需要由外界传入</span><br><span class="line">pod_push(path: &quot;#&#123;podspecName&#125;.podspec&quot;, repo: &quot;LXFSpecs&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><h3 id="2、验证Fastfile"><a href="#2、验证Fastfile" class="headerlink" title="2、验证Fastfile"></a>2、验证Fastfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane lanes</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/Fastfile验证成功.png" alt="Fastfile验证成功"></p><h3 id="3、执行fastlane"><a href="#3、执行fastlane" class="headerlink" title="3、执行fastlane"></a>3、执行fastlane</h3><p><strong>需要在组件仓库的根目录下执行</strong><br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/根目录.png" alt="根目录"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane LXFUpdatePodTool tag:0.1.1 specName:LXFMain</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/开始执行.png" alt="开始执行"></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/上传完成.png" alt="上传完成"></p><p>整个执行过程不超过30秒～</p><h2 id="四、自定义Action"><a href="#四、自定义Action" class="headerlink" title="四、自定义Action"></a>四、自定义Action</h2><p>以上的过程已经可以完成一整个自动化更新了，但是有一点需要注意的是，这个输入的tag可能会面临一个问题，那就是本地和远程都可能已经存在，即发生冲突，这个时候我们可以选择自动删除本地和远程冲突的那个tag，再重新上传当前tag</p><h3 id="1、创建一个新的action"><a href="#1、创建一个新的action" class="headerlink" title="1、创建一个新的action"></a>1、创建一个新的action</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane new_action</span><br></pre></td></tr></table></figure><p>按要求输入Action名称<br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/输入action名称.png" alt="输入action名称"></p><p>完成后fastlane目录下就会多出一个名为actions的文件夹，里面存放的就是你自定义action<br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/actions文件夹.png" alt=""></p><h3 id="2、编辑自定义action"><a href="#2、编辑自定义action" class="headerlink" title="2、编辑自定义action"></a>2、编辑自定义action</h3><p>打开remove_git_tag.rb，开始自定义我们的action吧，什么？不会语法怎么办？可以参考别人的嘛，上面给出的<a href="https://github.com/fastlane/fastlane/tree/master/fastlane/lib/fastlane/actions" target="_blank" rel="noopener">action的源码地址</a>就有用武之地了，比如<a href="https://github.com/fastlane/fastlane/blob/master/fastlane/lib/fastlane/actions/pod_push.rb" target="_blank" rel="noopener">pod_push</a>。这里我直接贴出我已经完成的主要代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># 可以使用 fastlane action remove_git_tag 来参看详细描述</span><br><span class="line"></span><br><span class="line">def self.run(params)</span><br><span class="line">  # 这里写要执行的操作 </span><br><span class="line">  # params[:参数名称] 参数名称与下面self.available_options中的保持一致</span><br><span class="line">  tagNum &#x3D; params[:tagNum]</span><br><span class="line">  rmLocalTag &#x3D; params[:rmLocalTag]</span><br><span class="line">  rmRemoteTag &#x3D; params[:rmRemoteTag]</span><br><span class="line"></span><br><span class="line">  command &#x3D; []</span><br><span class="line">  if rmLocalTag</span><br><span class="line">    # 删除本地标签</span><br><span class="line">    # git tag -d 标签名称</span><br><span class="line">    command &lt;&lt; &quot;git tag -d #&#123;tagNum&#125;&quot;</span><br><span class="line">  end</span><br><span class="line">  if rmRemoteTag</span><br><span class="line">    # 删除远程标签</span><br><span class="line">    # git push origin :标签名称</span><br><span class="line">    command &lt;&lt; &quot;git push origin :#&#123;tagNum&#125;&quot;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  result &#x3D; Actions.sh(command.join(&#39;&amp;&#39;))</span><br><span class="line">  UI.success(&quot;Successfully remove tag 🚀 &quot;)</span><br><span class="line">  return result</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def self.description</span><br><span class="line">  # 对当前脚本的简单描述</span><br><span class="line">  &quot;删除tag&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def self.details</span><br><span class="line">  # 对当前脚本的具体描述</span><br><span class="line">  &quot;使用当前action来删除本地和远程冲突的tag&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def self.available_options</span><br><span class="line">  # 用来传递参数</span><br><span class="line">  [ </span><br><span class="line">    FastlaneCore::ConfigItem.new(key: :tagNum,</span><br><span class="line">                                  description: &quot;输入即将删除的tag&quot;,</span><br><span class="line">                                  is_string: true),</span><br><span class="line">    FastlaneCore::ConfigItem.new(key: :rmLocalTag,</span><br><span class="line">                                  description: &quot;是否删除本地tag&quot;,</span><br><span class="line">                                  optional:true,</span><br><span class="line">                                  is_string: false,</span><br><span class="line">                                  default_value: true),</span><br><span class="line">    FastlaneCore::ConfigItem.new(key: :rmRemoteTag,</span><br><span class="line">                                  description: &quot;是否删除远程tag&quot;,</span><br><span class="line">                                  optional:true,</span><br><span class="line">                                  is_string: false,</span><br><span class="line">                                  default_value: true)</span><br><span class="line">  ]</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def self.authors</span><br><span class="line">  # 作者姓名</span><br><span class="line">  [&quot;LinXunFeng&quot;]</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="3、查看action描述"><a href="#3、查看action描述" class="headerlink" title="3、查看action描述"></a>3、查看action描述</h3><p>同样，这里先cd到组件库的根目录下执行，原因是这个自定义action只存在当前根目录下的fastlane中，其它fastlane的非自定义的action就不用在当前根目录下操作～<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane action remove_git_tag</span><br></pre></td></tr></table></figure><br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/查看具体描述.png" alt="查看具体描述"></p><h3 id="4、测试执行"><a href="#4、测试执行" class="headerlink" title="4、测试执行"></a>4、测试执行</h3><p>先来看看当前组件库已存在的tag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/已存在的tag.png" alt="已存在的tag"></p><p>可以看到，我是已经有一个<code>0.1.1</code>版本的了。这时我们再来执行一次LXFUpdatePodTool航道<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane LXFUpdatePodTool tag:0.1.1 specName:LXFMain</span><br></pre></td></tr></table></figure><br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（四）：fastlane实现pod自动化/自动清除.png" alt="自动清除"></p><h2 id="五、工具拿走"><a href="#五、工具拿走" class="headerlink" title="五、工具拿走"></a>五、工具拿走</h2><p><a href="https://github.com/LinXunFeng/LXFUpdatePodTool" target="_blank" rel="noopener">LXFUpdatePodTool</a> 已经传到我的GitHub上，需要的同学就拿走吧，顺手给个Star咯 Orz</p>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;在第一次组件化的时候，需要执行很多操作，这些操作可以在【&lt;a href=&quot;http://linxunfeng.top/2018/04/06/iOS-组件化开发（一）：远程私有库的基本使用/&quot;&gt;iOS-组件化开发（一）：远程私有库的基本使用&lt;/a&gt;】，这里就不再赘述，在组件化后的重复性操作就是升级，而升级这个过程是一模一样的。那么，我们有什么办法可以很方便的搞定这一过程来节约我们大量的时间呢？&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="iOS" scheme="http://linxunfeng.top/categories/iOS/"/>
    
    
    <category term="Git" scheme="http://linxunfeng.top/tags/Git/"/>
    
    <category term="GitHub" scheme="http://linxunfeng.top/tags/GitHub/"/>
    
    <category term="Cocoapods" scheme="http://linxunfeng.top/tags/Cocoapods/"/>
    
    <category term="iOS" scheme="http://linxunfeng.top/tags/iOS/"/>
    
    <category term="组件化" scheme="http://linxunfeng.top/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS-组件化开发（三）：加载资源文件</title>
    <link href="http://linxunfeng.top/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    <id>http://linxunfeng.top/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/</id>
    <published>2018-04-06T19:52:11.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>经过前两篇文章的学习，相信对组件化开发有了大致的了解，那我们这篇文章就来讲讲资源文件的加载吧</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><blockquote><p>经过前两篇文章的学习，相信对组件化开发有了大致的了解，那我们这篇文章就来讲讲资源文件的加载吧</p></blockquote><p>这里我新建了一个LXFMain组件库，主要是用来显示TabBar的玩意，然后再进行组件化抽离出来，其中的过程这里不再赘述，还没了解过的同学建议先阅读下这两篇文章吧</p><p><a href="http://linxunfeng.top/2018/04/06/iOS-组件化开发（一）：远程私有库的基本使用/">iOS-组件化开发（一）：远程私有库的基本使用</a></p><p><a href="http://linxunfeng.top/2018/04/06/iOS-组件化开发（二）：远程私有库的更新与子库/">iOS-组件化开发（二）：远程私有库的更新与子库</a></p><p>这里跟之前不一样的地方在于多了图片资源，组件的核心代码放在Classes文件夹中，而图片我们则存放于Assets目录下，如图所示 </p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（三）：加载资源文件/存放位置.png" alt="存放位置"></p><h3 id="一、修改Spec"><a href="#一、修改Spec" class="headerlink" title="一、修改Spec"></a>一、修改Spec</h3><p>将关于资源加载的注释去掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s.resource_bundles &#x3D; &#123;</span><br><span class="line"> # &#39;LXFMain&#39; &#x3D;&gt; [&#39;LXFMain&#x2F;Assets&#x2F;*.png&#39;]</span><br><span class="line"> &#39;LXFMain&#39; &#x3D;&gt; [&#39;LXFMain&#x2F;Assets&#x2F;*&#39;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回到LXFMain的模板库，我们进行一次本地的安装和测试(<code>pod install</code>)</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（三）：加载资源文件/修改Spec-podInstall.png" alt=""></p><p>可以看到，图片资源也安装进来了，但是运行的效果如下图，图片并不能成功加载出来</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（三）：加载资源文件/没有图标.png" alt="没有图标"></p><h2 id="二、修改加载资源代码"><a href="#二、修改加载资源代码" class="headerlink" title="二、修改加载资源代码"></a>二、修改加载资源代码</h2><p>这是当前加载图片的相关代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[UIImage imageNamed:@&quot;图片名称&quot;];</span><br></pre></td></tr></table></figure></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（三）：加载资源文件/showInFinder.png" alt="show in finder"></p><p>右击显示包内容<br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（三）：加载资源文件/LXFMain.framework.png" alt="LXFMain.framework"></p><p>图片就在这个<code>LXFMain.bundle</code>里面(这里就不截图看了)，这里主要是让大家对这个目录结构有个了解</p><p>我们对<code>imageNamed</code>进行跳转到定义操作<br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（三）：加载资源文件/imageNamed.png" alt="imageNamed"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; load from main bundle</span><br></pre></td></tr></table></figure><p>可以看到，官方注释着<code>imageNamed</code>加载的是main bundle中的资源,mainBundle的位置如下图<br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（三）：加载资源文件/mainBundle.png" alt="mainBundle"></p><p>这样当然就无法加载到图片啦，我们需要让它加载自己当前所在bundle里的图片 ，所以加载图片的代码需要进行修改<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *normalImgName = <span class="string">@"个人@2x.png"</span>;</span><br><span class="line"><span class="built_in">NSBundle</span> *curBundle = [<span class="built_in">NSBundle</span> bundleForClass:<span class="keyword">self</span>.class]; <span class="comment">// 获取当前bundle</span></span><br><span class="line"><span class="built_in">NSString</span> *normalImgPath = [curBundle pathForResource:normalImgName ofType:<span class="literal">nil</span> inDirectory:<span class="string">@"LXFMain.bundle"</span>];</span><br><span class="line"><span class="built_in">UIImage</span> *normalImage = [<span class="built_in">UIImage</span> imageWithContentsOfFile:normalImgPath];</span><br></pre></td></tr></table></figure></p><p>但是直接写<code>LXFMain.bundle</code>并不好，不可控，所以还需要改进一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NSString *normalImgName &#x3D; [NSString stringWithFormat:@&quot;%@@2x.png&quot;, normalImg];</span><br><span class="line">NSBundle *curBundle &#x3D; [NSBundle bundleForClass:self.class];</span><br><span class="line">&#x2F;&#x2F;  *********** 重点 ***********   &#x2F;&#x2F;</span><br><span class="line">NSString *curBundleName &#x3D; curBundle.infoDictionary[@&quot;CFBundleName&quot;];</span><br><span class="line">NSString *curBundleDirectory &#x3D; [NSString stringWithFormat:@&quot;%@.bundle&quot;, curBundleName];</span><br><span class="line">NSString *normalImgPath &#x3D; [curBundle pathForResource:normalImgName ofType:nil inDirectory:curBundleDirectory];</span><br><span class="line">&#x2F;&#x2F;  ***************************   &#x2F;&#x2F;</span><br><span class="line">UIImage *normalImage &#x3D; [UIImage imageWithContentsOfFile:normalImgPath];</span><br></pre></td></tr></table></figure></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（三）：加载资源文件/成功加载.png" alt="成功加载"></p><h2 id="三、聊聊xib"><a href="#三、聊聊xib" class="headerlink" title="三、聊聊xib"></a>三、聊聊xib</h2><p>Xib的加载也是如此<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSBundle *curBundle &#x3D; [NSBundle bundleForClass:self.class];</span><br><span class="line">LXFCenterView *centerView &#x3D; (LXFCenterView *)[curBundle loadNibNamed:@&quot;LXFCenterView&quot; owner:nil options:nil].firstObject;</span><br><span class="line">centerView.frame &#x3D; CGRectMake(30, 140, 200, 100);</span><br><span class="line">[self.view addSubview:centerView];</span><br></pre></td></tr></table></figure><br>不过xib中值得一提的是，如果是直接在xib中拖入一个imageView控件来设置图片的加载，我们则需要在图片名字前加上当前bundle名称<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LXFMain.bundle&#x2F;个人</span><br></pre></td></tr></table></figure></p><p>这里除了当前xib要加载的图片不属于mainBundle这个原因之外，还有一点就是xib文件与bundle存放位置属于同一级别，故直接使用相对路径的方式，在图片名字前加上bundle名称即可。</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（三）：加载资源文件/同一目录级别.png" alt="同一目录级别"></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（三）：加载资源文件/xib上的操作.png" alt="xib上的操作"></p><p>虽然无法在xib上直接看到效果，不过确实是有效的<br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（三）：加载资源文件/xib成功显示图片.png" alt="xib成功显示图片"></p><h2 id="四、遇到的小问题"><a href="#四、遇到的小问题" class="headerlink" title="四、遇到的小问题"></a>四、遇到的小问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] Unable to find a pod with name, author, summary, or description matching &#96;lxfmain&#96;</span><br></pre></td></tr></table></figure><p>我做完一切操作后发现搜索报上面那个错，解决方案是删除本地索引文件，然后再搜索一遍，系统会自动帮你再生成一切本地索引文件，然后就搞定了～<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~&#x2F;Library&#x2F;Caches&#x2F;CocoaPods&#x2F;search_index.json </span><br><span class="line">pod search lxfmain</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;经过前两篇文章的学习，相信对组件化开发有了大致的了解，那我们这篇文章就来讲讲资源文件的加载吧&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="iOS" scheme="http://linxunfeng.top/categories/iOS/"/>
    
    
    <category term="Git" scheme="http://linxunfeng.top/tags/Git/"/>
    
    <category term="GitHub" scheme="http://linxunfeng.top/tags/GitHub/"/>
    
    <category term="Cocoapods" scheme="http://linxunfeng.top/tags/Cocoapods/"/>
    
    <category term="iOS" scheme="http://linxunfeng.top/tags/iOS/"/>
    
    <category term="组件化" scheme="http://linxunfeng.top/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS-组件化开发（二）：远程私有库的更新与子库</title>
    <link href="http://linxunfeng.top/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%AD%90%E5%BA%93/"/>
    <id>http://linxunfeng.top/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%AD%90%E5%BA%93/</id>
    <published>2018-04-06T19:50:41.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>在上一篇【<a href="http://linxunfeng.top/2018/04/06/iOS-组件化开发（一）：远程私有库的基本使用/">iOS-组件化开发（一）：远程私有库的基本使用</a>】中我们已经实战了远程私有库的基本操作，但是组件不可能上传一次就完事了，随着业务的增加，我们的组件可能还需要添加更多的东西，或者修复一些问题，这就需要我们对私有库代码进行升级与维护</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><blockquote><p>在上一篇【<a href="http://linxunfeng.top/2018/04/06/iOS-组件化开发（一）：远程私有库的基本使用/">iOS-组件化开发（一）：远程私有库的基本使用</a>】中我们已经实战了远程私有库的基本操作，但是组件不可能上传一次就完事了，随着业务的增加，我们的组件可能还需要添加更多的东西，或者修复一些问题，这就需要我们对私有库代码进行升级与维护</p></blockquote><p>这里以对基础组件里添加了一个Cache工具为例</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（二）：远程私有库的更新与子库/添加Cache工具.png" alt="添加Cache工具"></p><p>添加完成后我们需要更新到远程仓库</p><h2 id="一、更新远程仓库"><a href="#一、更新远程仓库" class="headerlink" title="一、更新远程仓库"></a>一、更新远程仓库</h2><p>cd 到本地仓库的位置，执行以下操作</p><h3 id="1、代码更新"><a href="#1、代码更新" class="headerlink" title="1、代码更新"></a>1、代码更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#39;更新描述&#39;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（二）：远程私有库的更新与子库/代码升级.png" alt="代码升级"></p><h3 id="2、版本更新"><a href="#2、版本更新" class="headerlink" title="2、版本更新"></a>2、版本更新</h3><p><strong>版本更新 这一步非常重要，为更新索引库做准备</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &#39;新版本号&#39; -m &#39;注释&#39;</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（二）：远程私有库的更新与子库/版本升级.png" alt="版本升级"></p><p>查看远程仓库，标签数已经有2个了，点进去就可以看到0.2.0，这里我们就不去看了<br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（二）：远程私有库的更新与子库/2个标签.png" alt=""></p><h2 id="二、修改描述文件并更新索引库"><a href="#二、修改描述文件并更新索引库" class="headerlink" title="二、修改描述文件并更新索引库"></a>二、修改描述文件并更新索引库</h2><h3 id="1、修改Sepc"><a href="#1、修改Sepc" class="headerlink" title="1、修改Sepc"></a>1、修改Sepc</h3><p>打开你的<code>xx.podspec</code>文件，将原本的版本号改为<code>0.2.0</code>，与刚刚的tag保持一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.version &#x3D; &#39;0.2.0&#39;</span><br></pre></td></tr></table></figure></p><h3 id="2、验证远程Spec"><a href="#2、验证远程Spec" class="headerlink" title="2、验证远程Spec"></a>2、验证远程Spec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint --private</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（二）：远程私有库的更新与子库/验证远程Spec.png" alt="验证远程Spec"></p><h3 id="3、更新索引库"><a href="#3、更新索引库" class="headerlink" title="3、更新索引库"></a>3、更新索引库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo push 索引库名称 xxx.podspec</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（二）：远程私有库的更新与子库/更新索引库.png" alt="更新索引库"></p><h2 id="三、更新使用"><a href="#三、更新使用" class="headerlink" title="三、更新使用"></a>三、更新使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; --no-repo-update 不更新本地索引库</span><br><span class="line">&#x2F;&#x2F; 因为刚刚已经自己手动更新过了，所以这里我们选择跳过更新</span><br><span class="line">pod update --no-repo-update</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（二）：远程私有库的更新与子库/更新框架.png" alt="更新框架"></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（二）：远程私有库的更新与子库/更新成功.png" alt="更新成功"></p><hr><h2 id="四、第三方依赖"><a href="#四、第三方依赖" class="headerlink" title="四、第三方依赖"></a>四、第三方依赖</h2><p>当我们的私有库需要依赖其它第三方才可以正常使用时，我们就需要在spec文件中开启依赖，例如下面所示代码，表明当前仓库需要依赖AFN和SDWebImage<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.dependency &#39;AFNetworking&#39;, &#39;~&gt; 3.2.0&#39;</span><br><span class="line">s.dependency &#39;SDWebImage&#39;, &#39;~&gt; 4.3.3&#39;</span><br></pre></td></tr></table></figure><br>修改后更新操作同上所述，这里就不再赘述了。</p><p>但是这里存在一个问题，如果来了一位新的小伙伴，他所负责的部分只需要LXFBase下的Category，而LXFBase下的Cache才需要依赖SDWebImage，此时他若是pod一整个LXFBase岂不是平白无故安装了第三方依赖库，那应该怎么做呢？</p><blockquote><p>方案就是可以通过子库Subspecs来解决因需要一个小小的工具而依赖整个基础组件的问题</p></blockquote><h2 id="五、子库Subspecs"><a href="#五、子库Subspecs" class="headerlink" title="五、子库Subspecs"></a>五、子库Subspecs</h2><p>什么是Subspecs？这里我们可以搜索一下SDWebImage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search &#39;SDWebImage&#39;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（二）：远程私有库的更新与子库/Subspecs.png" alt="Subspecs"></p><p>可以看到，如果我们只需要用到SDWebImage中的GIF功能，那么并不需要将整个SDWebImage都下载下来，在Podfile中将<del><code>pod &#39;SDWebImage&#39;</code></del> 改为 <code>pod SDWebImage/GIF</code>即可单独使用这一功能</p><p>那接下来我们就来看看怎么描述一个子库吧</p><h3 id="子库格式"><a href="#子库格式" class="headerlink" title="子库格式"></a>子库格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.subspec &#39;子库名称&#39; do |别名|</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>因为这里已经分离出子库了，所以<code>s.source_files</code>和<code>s.dependency</code>就不能这么使用了，需要我们在子库里分别指定，所以我们直接把原来的<code>s.source_files</code>和<code>s.dependency</code>都注释掉。写法参考如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># s.source_files &#x3D; &#39;LXFBase&#x2F;Classes&#x2F;**&#x2F;*&#39;</span><br><span class="line"># s.dependency &#39;SDWebImage&#39;, &#39;~&gt; 4.3.3&#39;</span><br><span class="line"></span><br><span class="line">s.subspec &#39;Cache&#39; do |c|</span><br><span class="line">  c.source_files &#x3D; &#39;LXFBase&#x2F;Classes&#x2F;Cache&#x2F;**&#x2F;*&#39;</span><br><span class="line">  c.dependency &#39;SDWebImage&#39;, &#39;~&gt; 4.3.3&#39;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">s.subspec &#39;Category&#39; do |c|</span><br><span class="line">  c.source_files &#x3D; &#39;LXFBase&#x2F;Classes&#x2F;Category&#x2F;**&#x2F;*&#39;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">s.subspec &#39;Tool&#39; do |t|</span><br><span class="line">  t.source_files &#x3D; &#39;LXFBase&#x2F;Classes&#x2F;Tool&#x2F;**&#x2F;*&#39;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>修改后再按之前的步骤更新索引库和组件库就可以了</p><p><strong>ps: 在添加第三方依赖描述后做验证或者上传操作可能会很慢，因为它在克隆第三方库如SDWebImage，有兴趣的可以在命令后面加入<code>--verbose</code>来查看详情情况</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint --private --verbose</span><br></pre></td></tr></table></figure></p><p>在成功更新组件库和索引库后我们再来搜索一下试试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search &#39;LXFBase&#39;</span><br></pre></td></tr></table></figure></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（二）：远程私有库的更新与子库/subspec添加成功.png" alt="subspec添加成功"></p><p>现在就可以爱装哪个就装哪个了，在Podfile中指定要安装的子库就行了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#39;LXFBase&#x2F;Cache&#39;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（二）：远程私有库的更新与子库/安装指定子库与依赖库.png" alt="安装指定子库与依赖库"></p>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;在上一篇【&lt;a href=&quot;http://linxunfeng.top/2018/04/06/iOS-组件化开发（一）：远程私有库的基本使用/&quot;&gt;iOS-组件化开发（一）：远程私有库的基本使用&lt;/a&gt;】中我们已经实战了远程私有库的基本操作，但是组件不可能上传一次就完事了，随着业务的增加，我们的组件可能还需要添加更多的东西，或者修复一些问题，这就需要我们对私有库代码进行升级与维护&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="iOS" scheme="http://linxunfeng.top/categories/iOS/"/>
    
    
    <category term="Git" scheme="http://linxunfeng.top/tags/Git/"/>
    
    <category term="GitHub" scheme="http://linxunfeng.top/tags/GitHub/"/>
    
    <category term="Cocoapods" scheme="http://linxunfeng.top/tags/Cocoapods/"/>
    
    <category term="iOS" scheme="http://linxunfeng.top/tags/iOS/"/>
    
    <category term="组件化" scheme="http://linxunfeng.top/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS-组件化开发（一）：远程私有库的基本使用</title>
    <link href="http://linxunfeng.top/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://linxunfeng.top/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2018-04-06T19:23:15.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>随着项目功能的不断增加，越来越多的开发人员加入，业务主线也随之越来越多，造成耦合越来越严重，编译越来越慢，测试不独立等一系列问题。为了解决此类情况，我们可以考虑到使用组件化开发</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><blockquote><p>随着项目功能的不断增加，越来越多的开发人员加入，业务主线也随之越来越多，造成耦合越来越严重，编译越来越慢，测试不独立等一系列问题。为了解决此类情况，我们可以考虑到使用组件化开发</p></blockquote><p>1.概念<br>组件化就是将一个单一工程的项目, 分解成为各个独立的组件， 然后按照某种方式, 任意组织成一个拥有完整业务逻辑的工程。</p><p>2.优势</p><ul><li>独立：独立编写、编译、运行、测试</li><li>重用：功能代码的重复使用。比如不同项目使用同一功能模块</li><li>高效：任意增删模块，实现高效迭代</li><li>组件化还可以配合二进制化, 提高项目编译速度</li></ul><p>3.组件分类<br>大体上分三类：基础组件、功能组件和业务组件<br></p><ul><li>基础组件：也称为公共组件，存放平时定义的宏、常量、协议、分类、对必要的第三方的封装类，以及各种处理工具类，如：时间、日期、设备信息、文件处理、沙盒管理等</li><li>功能组件： 自定义视图控件、一些特定功能的封装（如录音、播放音频封装）</li><li>业务组件：各种业务线</li></ul><hr><blockquote><p>本篇先来介绍下远程私有库的基本使用，建议按顺序看完之后，回来再看一遍步骤归纳，加深了解，如有不足之处，欢迎指出，感谢 : )</p></blockquote><h2 id="步骤归纳"><a href="#步骤归纳" class="headerlink" title="步骤归纳"></a>步骤归纳</h2><ol><li><p>创建远程索引库和私有库</p></li><li><p>将远程索引库添加到本地 <code>pod repo add 索引库名称 索引库地址</code></p></li><li><p>在本地创建一个pod模板库 <code>pod lib create 组件名称</code><br>将框架的核心代码添加到Classes目录下<br>本地安装测试核心代码是否可用 <code>pod install</code><br>修改Spec描述文件<br>将修改好的模板库上传至远程私有库</p></li><li><p>上传代码和打标签<br><br><code>git init</code><br><br><code>git add .</code><br><br><code>git commit -m &quot;提交描述&quot;</code><br><br><code>git remote add origin 远程私有库地址</code><br><br><code>git push origin master</code><br><br><code>git tag &#39;0.1.0&#39;</code><br><br><code>git push --tags</code></p></li><li><p>提交spec至私有索引库<br><br><code>pod lib lint --private</code><br><br><code>pod spec lint --private</code><br><br><code>pod repo push 索引库的本地名称 xx.podspec</code></p></li><li><p>使用<br><br><code>source 官方索引库url</code><br><br><code>source 私有索引库url</code><br><br><code>pod &#39;组件名称&#39;</code><br><br><code>pod install</code></p></li></ol><p><strong>接下来我们就来实战如何创建和使用私有库</strong></p><h2 id="一、创建私有索引库"><a href="#一、创建私有索引库" class="headerlink" title="一、创建私有索引库"></a>一、创建私有索引库</h2><p>这里以码云为例，创建一个LXFSpecs的私有索引库，这玩意的作用如其名，就是用来索引的</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/私有索引库.png" alt="私有索引库"></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/LXFSpecs.png" alt="LXFSpecs"></p><h2 id="二、本地添加私有索引库"><a href="#二、本地添加私有索引库" class="headerlink" title="二、本地添加私有索引库"></a>二、本地添加私有索引库</h2><h3 id="1、查看本地索引库"><a href="#1、查看本地索引库" class="headerlink" title="1、查看本地索引库"></a>1、查看本地索引库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/查看本地索引库.png" alt="查看本地索引库"></p><p>如图，目前本地仅有github上的那个公有索引库</p><h3 id="2、添加私有索引库"><a href="#2、添加私有索引库" class="headerlink" title="2、添加私有索引库"></a>2、添加私有索引库</h3><p>将我们刚刚新建的私有索引库LXFSpecs添加到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; pod repo add 索引库名称 索引库地址</span><br><span class="line">pod repo add LXFSpecs https:&#x2F;&#x2F;gitee.com&#x2F;LinXunFeng&#x2F;LXFSpecs.git</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/添加私有索引库.png" alt=""></p><p>现在本地就有两个索引库，好，索引库的事情就先放一边去了～</p><h2 id="三、创建组件库"><a href="#三、创建组件库" class="headerlink" title="三、创建组件库"></a>三、创建组件库</h2><p>码云上的创建操作同上，这里以LXFBase为例，创建基础组件库<br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/LXFBase.png" alt="LXFBase"></p><h3 id="1、快速创建模版库"><a href="#1、快速创建模版库" class="headerlink" title="1、快速创建模版库"></a>1、快速创建模版库</h3><p>到合适的位置创建一个与组件名相同的文件夹，cd进去后，使用如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; pod lib create 组件名</span><br><span class="line">pod lib create LXFBase</span><br></pre></td></tr></table></figure><br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/快速创建模版库.png" alt=""></p><p>这里会让你配置一些信息，根据自己的情况自行配置即可。</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/快速创建模版库-配置.png" alt="配置"></p><h3 id="2、添加组件内容"><a href="#2、添加组件内容" class="headerlink" title="2、添加组件内容"></a>2、添加组件内容</h3><p>创建完成后会自动帮我们打开相应的Example项目，LXFBase目录中会出现如图这些文件，我们把基础组件相关的东西丢到Classes文件夹中，并且把<code>ReplaceMe.m</code>文件删除</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/目录结构.png" alt="目录结构"></p><p>默认Classes文件夹中存放的文件就是pod install时要下载下来的文件，当然可以通过修改spec文件的配置来更改位置</p><h3 id="3、安装与测试本地库"><a href="#3、安装与测试本地库" class="headerlink" title="3、安装与测试本地库"></a>3、安装与测试本地库</h3><p>在Example项目的Podfile文件中可以看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#39;LXFBase&#39;, :path &#x3D;&gt; &#39;..&#x2F;&#39;</span><br></pre></td></tr></table></figure><br>模板库已经默认帮我们在Podfile中指定了LXFBase.podspec的位置，使组件LXFBase可以正常安装使用和方便测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/安装与测试本地库-podinstall.png" alt="pod install"></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/安装与测试本地库-pod.png" alt="pod"></p><p>可以看到我们已经将本地的组件添加进Example中了，现在可以尽情地做你想做的测试，确保组件的可用。</p><p>测试组件没有问题后，我们接下来就要将podspec文件上传至私有索引库，不过在此之前，需要对spec进行修改。</p><h3 id="4、-修改Spec"><a href="#4、-修改Spec" class="headerlink" title="4、 修改Spec"></a>4、 修改Spec</h3><p>具体的配置说明可以参考<a href="https://juejin.im/post/5ac446b8f265da238d50ecfa" target="_blank" rel="noopener">Cocoapods-创建第三方框架</a></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/修改Spec-podspec.png" alt="podspec"></p><p>主要的修改内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  s.name             &#x3D; &#39;LXFBase&#39;</span><br><span class="line">  s.version          &#x3D; &#39;0.1.0&#39;</span><br><span class="line">  s.summary          &#x3D; &#39;LXFBase.&#39;</span><br><span class="line">  s.description      &#x3D; &lt;&lt;-DESC</span><br><span class="line">LXFBase是基础组件库，包括分类和常用工具</span><br><span class="line">                       DESC</span><br><span class="line">  s.homepage         &#x3D; &#39;https:&#x2F;&#x2F;gitee.com&#x2F;LinXunFeng&#x2F;LXFBase&#39;</span><br><span class="line">  s.source           &#x3D; &#123; :git &#x3D;&gt; &#39;https:&#x2F;&#x2F;gitee.com&#x2F;LinXunFeng&#x2F;LXFBase.git&#39;, :tag &#x3D;&gt; s.version.to_s &#125;</span><br><span class="line">  s.source_files &#x3D; &#39;LXFBase&#x2F;Classes&#x2F;**&#x2F;*&#39;</span><br></pre></td></tr></table></figure><h2 id="四、上传组件代码"><a href="#四、上传组件代码" class="headerlink" title="四、上传组件代码"></a>四、上传组件代码</h2><h3 id="1、将代码提交到组件仓库"><a href="#1、将代码提交到组件仓库" class="headerlink" title="1、将代码提交到组件仓库"></a>1、将代码提交到组件仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#39;firstCommit&#39;</span><br><span class="line">git remote add origin https:&#x2F;&#x2F;gitee.com&#x2F;LinXunFeng&#x2F;LXFBase.git</span><br><span class="line">&#x2F;&#x2F; 第一次push如果报错的话可以加上-f</span><br><span class="line">&#x2F;&#x2F; git push -f origin master</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="2、打标签"><a href="#2、打标签" class="headerlink" title="2、打标签"></a>2、打标签</h3><p>标签<code>0.1.0</code>与spec中的<code>s.version</code>保持一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag &#39;0.1.0&#39;</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/上传组件代码-tag.png" alt="tag"></p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/上传组件代码-标签上传成功.png" alt="标签上传成功"></p><h2 id="五、提交podspec到私有索引库"><a href="#五、提交podspec到私有索引库" class="headerlink" title="五、提交podspec到私有索引库"></a>五、提交podspec到私有索引库</h2><p>在上传spec文件前我们可以做一个验证来节省时间，不然每次都推送很久结果还是验证失败，会气死人的～</p><h3 id="1、本地验证Spec的必填字段"><a href="#1、本地验证Spec的必填字段" class="headerlink" title="1、本地验证Spec的必填字段"></a>1、本地验证Spec的必填字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 本地验证不会验证 s.source 中的tag</span><br><span class="line">pod lib lint</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/提交podspec到私有索引库-podLibLint.png" alt="pod lib lint"></p><h3 id="2、远程验证"><a href="#2、远程验证" class="headerlink" title="2、远程验证"></a>2、远程验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 远程验证会验证 s.source 中的tag，如果此时没有打上相应的标签则会报错</span><br><span class="line">pod spec lint</span><br></pre></td></tr></table></figure><p>如果你刚才没有打标签并上传至远程私有库就来进行远程验证，肯定是会报错的</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/提交podspec到私有索引库-tagError.png" alt="tag Error"></p><p>在打完并上传tag后再进行远程验证，就会验证成功了，验证成功后我们就可以进行下一步操作：提交podspec文件到索引库</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/提交podspec到私有索引库-podSpecLint.png" alt="pod spec lint"></p><ul><li>验证私有库提示<br>如果验证的是私有库，则在后面加上<code>--private</code>,否则会有警告，你可以选择<code>--allow-warnings</code>来忽略该警告<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint --private</span><br><span class="line">pod spec lint --private</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、提交podspec"><a href="#3、提交podspec" class="headerlink" title="3、提交podspec"></a>3、提交podspec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; pod repo push 私有索引库名称 spec名称.podspec </span><br><span class="line">pod repo push LXFSpecs LXFBase.podspec</span><br></pre></td></tr></table></figure><p>这里的操作过程：先将我们的代码直接push到本地索引库LXFSpecs，推送后会自动帮我们同步到远程索引库</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/提交podspec到私有索引库-提交成功.png" alt="提交成功"></p><p>再来看看码云上的私有索引库LXFSpecs</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/提交podspec到私有索引库-LXFBase.podspec.png" alt="LXFBase.podspec"></p><p>来测试下搜索我们的组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search &#39;LXFBase&#39;</span><br></pre></td></tr></table></figure><br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/提交podspec到私有索引库-搜索成功.png" alt="搜索成功"></p><h2 id="六、使用私有库"><a href="#六、使用私有库" class="headerlink" title="六、使用私有库"></a>六、使用私有库</h2><p>这时我们可以来试试通过pod形式来添加组件LXFBase，创建一个新的项目</p><h3 id="1、添加Podfile文件"><a href="#1、添加Podfile文件" class="headerlink" title="1、添加Podfile文件"></a>1、添加Podfile文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure><h3 id="2、在Podfile的最顶部添加如下描述"><a href="#2、在Podfile的最顶部添加如下描述" class="headerlink" title="2、在Podfile的最顶部添加如下描述"></a>2、在Podfile的最顶部添加如下描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 第二行是为了保证公有库的正常使用</span><br><span class="line">source &#39;https:&#x2F;&#x2F;gitee.com&#x2F;LinXunFeng&#x2F;LXFSpecs.git&#39;</span><br><span class="line">source &#39;https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;Specs.git&#39;</span><br></pre></td></tr></table></figure><h3 id="3、添加使用组件LXFBase"><a href="#3、添加使用组件LXFBase" class="headerlink" title="3、添加使用组件LXFBase"></a>3、添加使用组件LXFBase</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#39;LXFBase&#39;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/使用私有库-LXFBase.png" alt=""></p><h3 id="4、安装组件"><a href="#4、安装组件" class="headerlink" title="4、安装组件"></a>4、安装组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/使用私有库-安装成功.png" alt="安装成功"><br><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/iOS-组件化开发（一）：远程私有库的基本使用/使用私有库-成功添加组件内容.png" alt="成功添加组件内容"></p>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;随着项目功能的不断增加，越来越多的开发人员加入，业务主线也随之越来越多，造成耦合越来越严重，编译越来越慢，测试不独立等一系列问题。为了解决此类情况，我们可以考虑到使用组件化开发&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="iOS" scheme="http://linxunfeng.top/categories/iOS/"/>
    
    
    <category term="Git" scheme="http://linxunfeng.top/tags/Git/"/>
    
    <category term="GitHub" scheme="http://linxunfeng.top/tags/GitHub/"/>
    
    <category term="Cocoapods" scheme="http://linxunfeng.top/tags/Cocoapods/"/>
    
    <category term="iOS" scheme="http://linxunfeng.top/tags/iOS/"/>
    
    <category term="组件化" scheme="http://linxunfeng.top/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Cocoapods-创建第三方框架</title>
    <link href="http://linxunfeng.top/2018/04/06/Cocoapods-%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/"/>
    <id>http://linxunfeng.top/2018/04/06/Cocoapods-%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/</id>
    <published>2018-04-06T19:10:01.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<p><Excerpt in index | 首页摘要><br>将框架中的主要文件放入到一个指定文件夹中，比如叫Classes或者Lib都可以</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><h2 id="一、上传项目到github"><a href="#一、上传项目到github" class="headerlink" title="一、上传项目到github"></a>一、上传项目到github</h2><p>将框架中的主要文件放入到一个指定文件夹中，比如叫Classes或者Lib都可以<br><img src= "/img/loading.gif" data-src="/images/2018/04/Cocoapods-创建第三方框架/目录结构.png" alt="目录结构"></p><ul><li>打开终端，cd到框架目录 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;Users&#x2F;lxf&#x2F;xxxx&#x2F;LXFPhotoHelper</span><br></pre></td></tr></table></figure><ul><li>初始化仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>将当前目录添加到缓存区</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><ul><li>提交到本地仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#39;描述&#39;</span><br></pre></td></tr></table></figure><ul><li>添加远程仓库地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;LinXunFeng&#x2F;xxx.git</span><br></pre></td></tr></table></figure><ul><li>提交到远程仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>如果出现如下提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.git&#x2F;&#39;: The requested URL returned error: 403</span><br></pre></td></tr></table></figure><br>原因是本地缓存了用户名和密码<br>编辑.git目录下的config文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi .git&#x2F;config</span><br></pre></td></tr></table></figure><br>找到url那一行，在github.com前加上用户名后保存，再重新执行推送操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url &#x3D; https:&#x2F;&#x2F;LinXunFeng@github.com&#x2F;LinXunFeng&#x2F;xxx.git</span><br></pre></td></tr></table></figure></p><ul><li>打标签</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 具体说明可以执行&#96;git tag --help&#96;后查看</span><br><span class="line">&#x2F;&#x2F; git tag -a &#39;版本号&#39; -m &#39;tag描述&#39;</span><br><span class="line">&#x2F;&#x2F; 注意一下，这里打的标签只是在本地</span><br><span class="line">git tag &#39;0.0.1&#39;</span><br></pre></td></tr></table></figure><ul><li>推着所有标签至远程仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 只推着指定版本</span><br><span class="line">&#x2F;&#x2F; git push origin 版本号 </span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><h2 id="二、创建并修改podspec文件"><a href="#二、创建并修改podspec文件" class="headerlink" title="二、创建并修改podspec文件"></a>二、创建并修改podspec文件</h2><ul><li>创建Spec文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 名称一般与工程名称保持一致</span><br><span class="line">pod spec create 框架名称</span><br></pre></td></tr></table></figure></li></ul><p><img src= "/img/loading.gif" data-src="/images/2018/04/Cocoapods-创建第三方框架/podspec文件.png" alt="podspec文件"></p><ul><li>修改Spec文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s.name         &#x3D; &quot;LXFPhotoHelper（仓库名称）&quot;</span><br><span class="line">s.version      &#x3D; &quot;0.0.1（版本号，这里跟下面s.source中的tag有关）&quot;</span><br><span class="line">s.summary      &#x3D; &quot;对你自己仓库的简单描述，不要写太多字&quot;</span><br><span class="line">s.description  &#x3D; &quot;这个是详细描述，这里需要注意的是，这里文字的长度需要比  </span><br><span class="line">s.summary的要长，不然会出现警告&quot;</span><br><span class="line">s.homepage     &#x3D; &quot;仓库首页地址，如https:&#x2F;&#x2F;github.com&#x2F;LinXunFeng&#x2F;LXFPhotoHelper&quot;</span><br><span class="line">s.license      &#x3D; &quot;MIT&quot;</span><br><span class="line">s.author       &#x3D; &#123; &quot;LinXunFeng&quot; &#x3D;&gt; &quot;598600855@qq.com&quot; &#125;</span><br><span class="line"># source存放的地址是代码的真正地址</span><br><span class="line">s.source       &#x3D; &#123; :git &#x3D;&gt; &quot;仓库对应的git地址，如https:&#x2F;&#x2F;github.com&#x2F;LinXunFeng&#x2F;LXFPhotoHelper.git&quot;, :tag &#x3D;&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class="line"># pod install时真正下载下来的文件路径，这里指定的是你仓库下的Classes目录中的所有.h和.m文件（填写的是相对地址）</span><br><span class="line"># ** 通配目录</span><br><span class="line">s.source_files  &#x3D; &quot;Classes&quot;, &quot;Classes&#x2F;**&#x2F;*.&#123;h,m&#125;&quot;</span><br><span class="line"></span><br><span class="line"># s.library &#x3D; &quot;sqlite3&quot; # 框架依赖系统的sqlite3</span><br></pre></td></tr></table></figure>也可以上官网的手册【<a href="https://guides.cocoapods.org/syntax/podspec.html" target="_blank" rel="noopener">Podspec Syntax Reference</a>】上查看</li></ul><p>这里需要我们注意的是<code>s.version= &quot;0.0.1&quot;</code>，这里的版本号要与刚刚打的tag一致</p><h2 id="三、注册trunk"><a href="#三、注册trunk" class="headerlink" title="三、注册trunk"></a>三、注册trunk</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; --verbose 打印详情信息</span><br><span class="line">&#x2F;&#x2F; pod trunk register 邮箱 &#39;你的名称&#39; --verbose</span><br><span class="line">pod trunk register 598600855@qq.com &#39;LinXunFeng&#39; --verbose</span><br></pre></td></tr></table></figure><p>然后去验证邮箱<br><img src= "/img/loading.gif" data-src="/images/2018/04/Cocoapods-创建第三方框架/验证成功.png" alt="验证成功"><br>验证成功后会提示我们回到终端，并敲入<code>pod trunk push 名称.podspec</code></p><h2 id="四、上传Spec"><a href="#四、上传Spec" class="headerlink" title="四、上传Spec"></a>四、上传Spec</h2><p>执行<code>pod trunk push</code>后会有一个审核的过程，如果提示没有通过，有ERROR就修改好后重新push，如果只是WARN可以选择在<code>pod trunk push</code>后面加上<code>--allow-warnings</code>来忽略它们<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push LXFPhotoHelper.podspec --allow-warnings</span><br></pre></td></tr></table></figure></p><p>如果出现如下信息，则说明你的框架名字已被占用，得重新改个名字～<br>所以，在创建你自己的cocoapods仓库时最好是到<a href="https://cocoapods.org/" target="_blank" rel="noopener">cocoapods.org</a>上先查一下有没有相同名字的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] You (xxx@qq.com) are not allowed to push new versions for this pod. The owners of this pod are yyy@qq.com.</span><br></pre></td></tr></table></figure></p><p>上传成功后会自动帮我们更新本地仓库，如果无法搜索到自己的框架，可以先删掉本地的索引文件后再搜索一次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ~&#x2F;Library&#x2F;Caches&#x2F;CocoaPods&#x2F;search_index.json</span><br></pre></td></tr></table></figure></p><p>当使用pod search 命令可以搜索自己的框架时, 那么就意味着审核通过了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;将框架中的主要文件放入到一个指定文件夹中，比如叫Classes或者Lib都可以&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="iOS" scheme="http://linxunfeng.top/categories/iOS/"/>
    
    
    <category term="Git" scheme="http://linxunfeng.top/tags/Git/"/>
    
    <category term="GitHub" scheme="http://linxunfeng.top/tags/GitHub/"/>
    
    <category term="Cocoapods" scheme="http://linxunfeng.top/tags/Cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>Python-虚拟环境</title>
    <link href="http://linxunfeng.top/2018/04/02/Python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://linxunfeng.top/2018/04/02/Python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</id>
    <published>2018-04-02T16:26:22.000Z</published>
    <updated>2020-08-22T14:18:43.876Z</updated>
    
    <content type="html"><![CDATA[<Excerpt in index | 首页摘要> <p>平时在开发时我们都会先安装一些python需要的包，每次安装都会有一个版本，如果不同项目需要不同版本的包时就会出现不兼容的情况。应对这种情况我们就可以搭建多个虚拟环境来应对不同的环境需求，在虚拟环境中搭建一个Python项目运行所需要的那些包，将来根据运行的项目来切换不同环境即可</p><p>+<a id="more"></a></p><The rest of contents | 余下全文><blockquote><p>平时在开发时我们都会先安装一些python需要的包，每次安装都会有一个版本，如果不同项目需要不同版本的包时就会出现不兼容的情况。应对这种情况我们就可以搭建多个虚拟环境来应对不同的环境需求，在虚拟环境中搭建一个Python项目运行所需要的那些包，将来根据运行的项目来切换不同环境即可</p></blockquote><p>我们可以在当前用户的家目录中找到【.virtualenvs】文件夹，查看当前所有的虚拟环境</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/Python-虚拟环境/virtualenvs.png" alt="virtualenvs"></p><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><ul><li>创建：mkvirtualenv [虚拟环境名称]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv lxfenv1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/Python-虚拟环境/mkvirtualenv.png" alt="安装成功"></p><p>注：创建的过程需要联网</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/Python-虚拟环境/目录结构.png" alt="目录结构"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Installing setuptools, pkg_resources, pip, wheel...done.</span><br></pre></td></tr></table></figure><p>刚刚安装时提示安装的这些东西就存放在你创建好的虚拟环境下的【lib/python2.7/site-packages/】目录中</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/Python-虚拟环境/lib目录.png" alt="lib目录"></p><ul><li>退出：deactivate<br>当我们安装好虚拟环境后默认就使用了该虚拟环境，如图标识处可以看出</li></ul><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/Python-虚拟环境/当前环境.png" alt="当前环境"></p><p>如果你想退出当前的虚拟环境，或以使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/Python-虚拟环境/退出环境.png" alt="退出环境"></p><ul><li>进入：workon [虚拟环境名称]</li></ul><p>使用指定的虚拟环境则使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon lxfenv1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/Python-虚拟环境/workon.png" alt="workon"></p><ul><li>删除：rmvirtualenv [虚拟环境名称]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmvirtualenv lxfenv1</span><br></pre></td></tr></table></figure><h2 id="安装拓展包"><a href="#安装拓展包" class="headerlink" title="安装拓展包"></a>安装拓展包</h2><ul><li>查看当前安装好的包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br><span class="line">或者</span><br><span class="line">pip freeze</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/Python-虚拟环境/查看当前安装好的包.png" alt="查看当前安装好的包"></p><p>ps: 上图<code>pip list</code>中列出的四个包是安装虚拟环境必定会安装的包<br>如图，<code>pip list</code>会列出所有的包，而<code>pip freeze</code>只会列出扩展的包</p><ul><li>安装指定包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install django&#x3D;&#x3D;1.8.2</span><br><span class="line"># &#x3D;&#x3D;1.8.2 为指定版本号，不写则直接安装最新的包</span><br></pre></td></tr></table></figure><strong>注： pip install xxx 会自动删除旧版本，再安装新版本</strong></li></ul><p>如果不知道包名可以到<a href="https://pypi.python.org" target="_blank" rel="noopener">pypi</a>上搜索</p><p><img src= "/img/loading.gif" data-src="https://linxunfeng.github.io/images/2018/04/Python-虚拟环境/安装指定的包.png" alt="安装指定的包"></p>]]></content>
    
    
    <summary type="html">&lt;Excerpt in index | 首页摘要&gt; 

&lt;p&gt;平时在开发时我们都会先安装一些python需要的包，每次安装都会有一个版本，如果不同项目需要不同版本的包时就会出现不兼容的情况。应对这种情况我们就可以搭建多个虚拟环境来应对不同的环境需求，在虚拟环境中搭建一个Python项目运行所需要的那些包，将来根据运行的项目来切换不同环境即可&lt;/p&gt;
&lt;p&gt;+</summary>
    
    
    
    <category term="Python" scheme="http://linxunfeng.top/categories/Python/"/>
    
    
    <category term="python" scheme="http://linxunfeng.top/tags/python/"/>
    
  </entry>
  
</feed>
