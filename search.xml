<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[打造Moya便捷解析库，提供RxSwift拓展]]></title>
    <url>%2F2018%2F05%2F24%2F%E6%89%93%E9%80%A0Moya%E4%BE%BF%E6%8D%B7%E8%A7%A3%E6%9E%90%E5%BA%93%EF%BC%8C%E6%8F%90%E4%BE%9BRxSwift%E6%8B%93%E5%B1%95%2F</url>
    <content type="text"><![CDATA[MoyaMapper是基于Moya和SwiftyJSON封装的工具，以Moya的plugin的方式来实现间接解析，支持RxSwift + 一、概述1、相信大家在使用Swift开发时，Moya是首选的网络工具，在模型解析这一块，Swift版模型解析的相关第三方库有很多，本人最习惯用的就是SwiftyJSON。 2、下面会开始讲解整个主要的开发功能与思想。 3、以下内容是基于大家会使用Moya和SwiftJSON的前提下所著，还不会的同学可以先简单了解后再来阅读本篇文章哦～ 二、功能开发与思想讲解1、尝试模型解析Moya请求服务器返回的数据以Response类返回给我们，那我们就给Response类做一个扩展，这里以解析模型为例1234567// 需要传入一个参数，告知我们要转换出什么模型public func mapObject&lt;T: Modelable&gt;(_ type: T.Type) -&gt; T &#123; // 模型解析过程 。。。 return T&#125; Q: 那中间的解析过程该怎么写呢？ A: 可以让开发者遵守某个协议，实现指定的转换方法并描述转换关系。其转换过程我们不需要知道，交给开发者即可。 那接着我们来定义一个协议Modelable，并声明转换方法123public protocol Modelable &#123; mutating func mapping(_ json: JSON)&#125; 开发者创建一个MyMoel的结构体，遵守协议Modelable,并实现mapping，书写转换关系1234567struct MyModel: Modelable &#123; var _id = "" mutating func mapping(_ json: JSON) &#123; self._id = json["_id"].stringValue &#125;&#125; 以目前的现状来分析一下：mapObject可以让开发者传入模型类型，而我们的协议方法却并非是个类方法。那我们需要先得到这个模型类型的对象，再来调用mapping方法 2、模型解析的驱动开发Q: 怎么得到这个对象？ A: 可以在协议中声明一个初始化方法来创建对象。是的，我们在mapObject中创建对应模型类型的对象，调用mapping方法来转换数据，再把模型对象传出去即可。 那我们在Modelable中声明一个init方法，并传入一个参数，区别于其它初始化方法1234public protocol Modelable &#123; mutating func mapping(_ json: JSON) init(_ json: JSON)&#125; OK，现在把mapObject方法补齐模型解析过程 1234567public func mapObject&lt;T: Modelable&gt;(_ type: T.Type) -&gt; T &#123; let modelJson = JSON(data)["modelKey"] // 模型解析过程 var obj = T.init(modelJson) obj.mapping(modelJson) return obj&#125; 3、自定义解析键名Q: 这样是搞定解析了，但是网络请求回来的json格式错综复杂，有什么办法可以让开发者来自行指定model对应的键名呢？ A: 嗯嗯，既然解析过程是在 Response 扩展里操作的，那我们可以通过协议定义键名属性，并且使用 Runtime 给Response动态添加一个属性，来记录遵守协议后的相应类名 12345678910public protocol ModelableParameterType &#123; /// 请求成功时状态码对应的值 static var successValue: String &#123; get &#125; /// 状态码对应的键 static var statusCodeKey: String &#123; get &#125; /// 请求后的提示语对应的键 static var tipStrKey: String &#123; get &#125; /// 请求后的主要模型数据的键 static var modelKey: String &#123; get &#125;&#125; 123456789101112131415// MARK:- runtimeextension Response &#123; private struct AssociatedKeys &#123; static var lxf_modelableParameterKey = "lxf_modelableParameterKey" &#125; var lxf_modelableParameter: ModelableParameterType.Type &#123; get &#123; let value = objc_getAssociatedObject(self, &amp;AssociatedKeys.lxf_modelableParameterKey) as AnyObject guard let type = value as? ModelableParameterType.Type else &#123; return NullParameter.self &#125; return type &#125; set &#123; objc_setAssociatedObject(self, &amp;AssociatedKeys.lxf_modelableParameterKey, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC) &#125; &#125;&#125; 这里有个坑：_SwiftValue问题 (献上 参考链接)如果我们存储的不是OC对象，那么objc_getAssociatedObject取出来的值的类型统统为_SwiftValue，直接as? ModelableParameterType.Type绝对是nil，需要在取出来后as AnyObject再转换为其它类型才会成功～～ 现在开发者就可以创建一个类来遵守ModelableParameterType协议，并自定义解析键名123456struct NetParameter : ModelableParameterType &#123; static var successValue: String &#123; return "false" &#125; static var statusCodeKey: String &#123; return "error" &#125; static var tipStrKey: String &#123; return "errMsg" &#125; static var modelKey: String &#123; return "results" &#125;&#125; 4、插件注入Q: 厉害了，不过要在什么时机下存储这个自定义键名的NetParameter？ A: 额，这个～～～ 哦，对了，可以通过Moya提供的插件机制！ 翻出Moya中的Plugin.Swift，找到这个process方法，看看方法说明。123/// 在结束之前，可以被用来修改请求结果/// Called to modify a result before completion.func process(_ result: Result&lt;Moya.Response, MoyaError&gt;, target: TargetType) -&gt; Result&lt;Moya.Response, MoyaError&gt; 那好，我们也做一个插件MoyaMapperPlugin给开发者使用，在创建MoyaMapperPlugin时把自定义解析键名的类型传进来1234567891011121314151617public struct MoyaMapperPlugin: PluginType &#123; var parameter: ModelableParameterType.Type public init&lt;T: ModelableParameterType&gt;(_ type: T.Type) &#123; parameter = type &#125; // modify response public func process(_ result: Result&lt;Response, MoyaError&gt;, target: TargetType) -&gt; Result&lt;Response, MoyaError&gt; &#123; _ = result.map &#123; (response) -&gt; Response in // 趁机添加相关数据 response.lxf_modelableParameter = parameter return response &#125; return result &#125;&#125; 使用：开发者在创建MoyaProvider对象时，顺便注入插件。(OS: 这一步堪称“注入灵魂”)1MoyaProvider&lt;LXFNetworkTool&gt;(plugins: [MoyaMapperPlugin(NetParameter.self)]) 5、总结 以上就是主要的踩坑过程了。模型数组解析和指定解析也跟这些差不多的，这里就不再赘述。本人已经将其封装成一个开源库 MoyaMapper，包含了上述已经和未曾说明的功能，下面会讲解如何去使用。以上部分可以称为开胃菜，目的就是平滑过渡到下面MoyaMapper的具体使用。 可能单单使用MoyaMapper的默认子库Core，作用体会上并不会很深。但是，如果你也是使用RxSwift来开发项目的话，请安装&#39;MoyaMapper/Rx&#39;吧，绝对一个字：「爽」 二、MoyaMapper的使用 MoyaMapper是基于Moya和SwiftyJSON封装的工具，以Moya的plugin的方式来实现间接解析，支持RxSwift 1、定义并注入自定义键名类 定义一个遵守ModelableParameterType协议的结构体 1234567// 各参数返回的内容请参考上面JSON数据对照图struct NetParameter : ModelableParameterType &#123; static var successValue: String &#123; return "false" &#125; static var statusCodeKey: String &#123; return "error" &#125; static var tipStrKey: String &#123; return "" &#125; static var modelKey: String &#123; return "results" &#125;&#125; 此外，这里还可以做简单的路径处理，以应付各种情况，以’&gt;’隔开 12345// 假设返回的json数据关于请求状态的相关数据如下所示，error: &#123; 'errorStatus':false 'errMsg':'error Argument type'&#125; 12// 我们指明解析路径：error对象下的errMsg字段，一层层表示下去即可static var tipStrKey: String &#123; return "error&gt;errMsg" &#125; 以plugin的方式传递给MoyaProvider 12// MoyaMapperPlugin这里只需要传入类型MoyaProvider&lt;LXFNetworkTool&gt;(plugins: [MoyaMapperPlugin(NetParameter.self)]) 2、定义解析模型创建一个遵守Modelable协议的结构体 1234567891011121314struct MyModel: Modelable &#123; var _id = "" ... init(_ json: JSON) &#123; &#125; mutating func mapping(_ json: JSON) &#123; self._id = json["_id"].stringValue ... &#125;&#125;遵守Modelable协议，实现协议的两个方法，在`mapping`方法中描述模型字段的具体解析 3、解析数据0x00 请求结果与模型解析123456789101112// Resultpublic func mapResult(params: ModelableParamsBlock? = nil) -&gt; MoyaMapperResult// Modelpublic func mapObject&lt;T: Modelable&gt;(_ type: T.Type, modelKey: String? = nil) -&gt; T// Result+Modelpublic func mapObjResult&lt;T: Modelable&gt;(_ type: T.Type, params: ModelableParamsBlock? = nil) -&gt; (MoyaMapperResult, T)// Modelspublic func mapArray&lt;T: Modelable&gt;(_ type: T.Type, modelKey: String? = nil) -&gt; [T]// Result+Modelspublic func mapArrayResult&lt;T: Modelable&gt;(_ type: T.Type, params: ModelableParamsBlock? = nil) -&gt; (MoyaMapperResult, [T]) 上面的五个方法，观其名，知其意，这里就不过多解释了，主要注意两点： result 1234// 元祖类型// 参数1：根据statusCodeKey取出的值与successValue是否相等// 参数2：根据tipStrKey取出的值result：(Bool, String) params 12// params: ModelableParamsBlock? = nil// 这里只有在特殊场景下才需要使用到。如：项目中需要在某处使用特定接口，但是返回的json格式跟自己项目的不一样，并且只有这么一两处用得着该额外接口，那就需要我们这个参数了，以Block的方式返回解析参数类型。 0x01、特定解析1234// Modelpublic func toJSON(modelKey: String? = nil) -&gt; JSON// 获取指定路径的值public func fetchJSONString(path: String? = nil, keys: [JSONSubscriptType]) -&gt; String 这两个方法，如果没有指定路径，默认都是针对modelKey的12345// fetchJSONString(keys: &lt;[JSONSubscriptType]&gt;)1、通过 keys 传递数组, 该数组可传入的类型为 Int 和 String2、默认是以 modelKey 所示路径，来获取相应的数值。如果modelKey并非是你所想要使用的解析路径，可以使用下方的重载方法重新指定路径即可// response.fetchJSONString(path: &lt;String?&gt;, keys: &lt;[JSONSubscriptType]&gt;) MoyaMapper也提供了Rx子库，为方便RxSwift的流式编程下便捷解析数据 12345MoyaMapper默认只安装Core下的文件pod 'MoyaMapper'RxSwift拓展pod 'MoyaMapper/Rx' 具体使用还不是很明白的同学可以下载并运行Example看看 如果MoyaMapper有什么不足的地方，欢迎提出issues，感谢大家的支持]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS 面向协议方式封装空白页功能]]></title>
    <url>%2F2018%2F04%2F07%2FiOS-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E6%96%B9%E5%BC%8F%E5%B0%81%E8%A3%85%E7%A9%BA%E7%99%BD%E9%A1%B5%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[为了良好的交互体验，相信大家在对待scrollView无数据时的提示页都会使用一些第三方来定制，最典型的就是使用DZNEmptyDataSet。但是每个界面都写一堆与DZNEmptyDataSetDelegate，DZNEmptyDataSetSource相关的代码就不太好，那一般情况下自然的就会采用继承的方式来避免。而Swift除了可以面向对象编程，它还可以面向协议编程。那可不可以也用协议来解决情况呢？嘿嘿，这个可以有，那我们接下来就来试试怎么通过协议的方式来避免上述情况，并且实现一行代码添加空白页功能 + 为了良好的交互体验，相信大家在对待scrollView无数据时的提示页都会使用一些第三方来定制，最典型的就是使用DZNEmptyDataSet。但是每个界面都写一堆与DZNEmptyDataSetDelegate，DZNEmptyDataSetSource相关的代码就不太好，那一般情况下自然的就会采用继承的方式来避免。而Swift除了可以面向对象编程，它还可以面向协议编程。那可不可以也用协议来解决情况呢？嘿嘿，这个可以有，那我们接下来就来试试怎么通过协议的方式来避免上述情况，并且实现一行代码添加空白页功能 前言如果对面向协议有疑问的同学可以看下我之前的两篇文章 iOS - Swift 面向协议编程（一） iOS - Swift 面向协议编程（二） 之前的文章中提到了，协议除了起规范作用，还有别一个用处，就是赋予能力。我们现在的目的就是让目标控制器或者目标视图在遵守我们的协议后，就可以有实现空白页的功能。 一、基本实现1、创建协议1234// MARK:- 空视图占位协议public protocol LXFEmptyDataSetable &#123; &#125; 2、确定面向类确定我们面向的类，一般tableView或者collectionView都是写在控制器里，那我们面向的类就规定为UIViewController，或许也有人写在UIView里，不过这里先按UIViewController来写吧1234// MARK:- UIViewController - 空视图占位协议public extension LXFEmptyDataSetable where Self : UIViewController &#123; // 3、的实现的方法写在这里&#125; 3、定义功能方法将scrollView传递进来，让我们定义的方法来暗地里做些操作1234func lxf_EmptyDataSet(_ scrollView: UIScrollView) &#123; scrollView.emptyDataSetDelegate = self scrollView.emptyDataSetSource = self&#125; 4、设置数据源和代理在3、定义功能方法中将delegate和source设置为了self ，而协议是无法遵守再次遵守其它协议的，那让什么来遵守对应的协议呢？要明白这里的self指的是UIViewController,考虑到UIView的可能，这里我就让万物对象之父NSObject来遵守，并实现对应的数据源方法和代理方法1234567891011extension NSObject : DZNEmptyDataSetDelegate, DZNEmptyDataSetSource &#123; public func image(forEmptyDataSet scrollView: UIScrollView!) -&gt; UIImage! &#123; // 返回提示图片 &#125; public func title(forEmptyDataSet scrollView: UIScrollView!) -&gt; NSAttributedString! &#123; // 设置富文本标题 &#125; public func verticalOffset(forEmptyDataSet scrollView: UIScrollView!) -&gt; CGFloat &#123; // 设置纵向偏移 &#125;&#125; 二、定制空白页通过上述步骤后，只要让UIViewController遵守我们的协议，再调用一下lxf_EmptyDataSet方法就可以实现数据空白页了。但是，这样直接写死的方式很不好，有时候一些场景是需要我们做出定制的，那怎么实现定制呢？协议又不能有自己的变量来存放我们的定制。 这里先做出一个限定，我们要使用重载方法来完成该功能，实现即可高定制，又可使用默认定制。 回到刚刚的话题，使用UserDefaults来实现可以吗？可以，但是比较麻烦，因为UserDefaults是单例，整个进程共用这一份资源，如果你当前controller遵守了我们的协议LXFEmptyDataSetable并做出了定制，那么当下一个controller在遵守协议后使用了默认定制时，那你要怎么办？还要区分scrollView，那就得保存当前scrollView，在退出当前controller后还要把对应的东西置空。好咯好咯，那你说到底要怎么搞才最合适？ 解决方案：拓展UIScrollView！！！有没有发现？，非常地恰巧，我们定义的方法lxf_EmptyDataSet需要外界将UIScrollView传递进来，在DZNEmptyDataSet的数据源方法和代理方法也有scrollView。那让UIScrollView来携带我们的定制就好啦。 1、定义定制相关的枚举这里我定义了常用的定制相关的枚举1234567891011121314public enum LXFEmptyDataSetAttributeKeyType &#123; /// 纵向偏移(-50) CGFloat case verticalOffset /// 提示语(暂无数据) String case tipStr /// 提示语的font(system15) UIFont case tipFont /// 提示语颜色(D2D2D2) UIColor case tipColor /// 提示图(LXFEmptyDataPic) UIImage case tipImage /// 允许滚动(true) Bool case allowScroll&#125; 2、拓展UIScrollView为UIScrollView定义一个定制相关的属性字典1234567891011121314extension UIScrollView &#123; private struct AssociatedKeys &#123; static var lxf_emptyAttributeDict:[LXFEmptyDataSetAttributeKeyType : Any]? &#125; /// 属性字典 var lxf_emptyAttributeDict: [LXFEmptyDataSetAttributeKeyType : Any]? &#123; get &#123; return objc_getAssociatedObject(self, &amp;AssociatedKeys.lxf_emptyAttributeDict) as? [LXFEmptyDataSetAttributeKeyType : Any] &#125; set &#123; objc_setAssociatedObject(self, &amp;AssociatedKeys.lxf_emptyAttributeDict, newValue as [LXFEmptyDataSetAttributeKeyType : Any]?, objc_AssociationPolicy.OBJC_ASSOCIATION_RETAIN_NONATOMIC) &#125; &#125;&#125; 3、完善lxf_EmptyDataSet方法这里我们让外界通过闭包的方式来定制自己的空白页12345678// MARK:- UIViewController - 空视图占位协议public extension LXFEmptyDataSetable where Self : UIViewController &#123; func lxf_EmptyDataSet(_ scrollView: UIScrollView, attributeBlock: (()-&gt;([LXFEmptyDataSetAttributeKeyType : Any]))? = nil) &#123; scrollView.lxf_emptyAttributeDict = attributeBlock != nil ? attributeBlock!() : nil scrollView.emptyDataSetDelegate = self scrollView.emptyDataSetSource = self &#125;&#125; 4、使用定制属性字典这里以返回提示图片的方法为例吧123456public func image(forEmptyDataSet scrollView: UIScrollView!) -&gt; UIImage! &#123; guard let tipImg = scrollView.lxf_emptyAttributeDict?[.tipImage] as? UIImage else &#123; return UIImage(named: &quot;LXFEmptyDataPic&quot;) &#125; return tipImg&#125; 5、外界的使用姿势1234567891011121314151617181920212223242526class LXFEmptyDemoController: UIViewController &#123; override func viewDidLoad() &#123; super.viewDidLoad() initUI() &#125;&#125;extension LXFEmptyDemoController: LXFEmptyDataSetable &#123; fileprivate func initUI() &#123; let tableView = UITableView() // ... // 高定制 self.lxf_EmptyDataSet(tableView) &#123; () -&gt; ([LXFEmptyDataSetAttributeKeyType : Any]) in return [ .tipStr:"哟哟哟", .verticalOffset:-150, .allowScroll: false ] &#125; // 默认定制 // self.lxf_EmptyDataSet(tableView) &#125;&#125; 三、开源库我对这个过程进行一次整理，并做成一个名为 LXFProtocolTool 的库并上传至gitHub。可以使用Cocoapods的方式来安装使用 1pod &apos;LXFProtocolTool&apos; 我也将 iOS - Swift 面向协议编程（二） 中提及的通过协议便捷加载xib的功能也集成了进来。大家可以根据自己的需要在Podfile写明要安装的功能 Xib加载 1pod &apos;LXFProtocolTool/LXFNibloadable&apos; 空白视图 1pod &apos;LXFProtocolTool/LXFEmptyDataSetable&apos; 创建这个库的目的是为了通过协议的方式来方便快捷地实现一些的实用功能，目前功能不多，不过往后会逐渐增加，或许你有什么想实现的功能也可以提出来，喜欢的就给个Star鼓励下我吧 🚀 🚀 🚀]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS 组件化开发（四）：fastlane实现pod自动化]]></title>
    <url>%2F2018%2F04%2F06%2FiOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Afastlane%E5%AE%9E%E7%8E%B0pod%E8%87%AA%E5%8A%A8%E5%8C%96%2F</url>
    <content type="text"><![CDATA[在第一次组件化的时候，需要执行很多操作，这些操作可以在【iOS 组件化开发（一）：远程私有库的基本使用】，这里就不再赘述，在组件化后的重复性操作就是升级，而升级这个过程是一模一样的。那么，我们有什么办法可以很方便的搞定这一过程来节约我们大量的时间呢？ + 在第一次组件化的时候，需要执行很多操作，这些操作可以在【iOS 组件化开发（一）：远程私有库的基本使用】，这里就不再赘述，在组件化后的重复性操作就是升级，而升级这个过程是一模一样的。那么，我们有什么办法可以很方便的搞定这一过程来节约我们大量的时间呢？ 一、升级必备操作修改完核心代码后，一共还需要做以下几步：1、修改spec文件（修改s.version，s.description等）2、pod install （使Example与pod下来的库产生关联）3、提交本地仓库代码至远程仓库4、打标签，并提交至远程5、验证spec，并提至私有索引库 二、Fastlane1、简介Fastlane文档说明 Fastlane是一个ruby脚本集合，它可以按照我们指定的路线，在指定位置执行我们所要执行的操作。这里我们称这样的路线为「航道(lane)」，这样的操作称为「Action」 Action是Fastlane自动化流程中的最小执行单元，用来执行Fastlane脚本中的命令，关于更多的描述可以到Actions - fastlane docs查看，里面也介绍了常用的action有哪些，顺带附上action的源码地址，这个源码在后面自定义起参考作用 2、 安装 确保ruby为最新版本 12brew updatebrew install ruby 安装fastlane 1sudo gem install -n /usr/local/bin fastlane 查看当前fastlane版本 1fastlane --version 查看所有action 1fastlane actions 三、fastlane初始化cd到你的本地组件仓库的根目录 初始化fastlanefastlane init不过这个步骤对我们来说可以跳过，在init后提示你输入一些东西，包括上传需要用到的APPLE ID什么的一堆东西，由于我们并不涉及这些，所以我们使用更方便的方式 123456# 创建一个fastlane文件夹# 进入fastlane目录# 创建一个Fastfile文件mkdir fastlanecd fastlanetouch Fastfile 1、修改Fastfile123456789desc &apos;描述航道作用&apos;lane :航道名称 do |options|// options 可以用来传递参数// 示例：varName = options[:name]// 航道上需要执行的操作end 航道上要扫描的操作可以到Actions上查找，可以通过关键字搜索，如下图点进去可以看到具体的使用及参数说明 这里附上本人的Fastfile内容：123456789101112131415161718192021222324252627282930313233343536373839desc &apos;LXFUpdatePodTool 航道用来自动化升级维护私有库&apos;lane : LXFUpdatePodTool do |options|tagNum = options[:tag]podspecName = options[:specName]# 航道上需要执行的操作# 具体action到 https://docs.fastlane.tools/actions 上面查找# 这里的路径以仓库根目录为准# 1、修改spec文件（修改s.version，s.description等）# 2、pod install （使Example与pod下来的库产生关联）cocoapods( clean: true, podfile: &quot;./Example/Podfile&quot;)# 3、提交本地仓库代码至远程仓库git_add(path: &quot;.&quot;)git_commit(path: &quot;.&quot;, message: &quot;upgrade repo&quot;)push_to_git_remote# 4、打标签，并提交至远程add_git_tag( tag: tagNum)push_git_tags# 5、验证spec，并提至私有索引库pod_lib_lint(allow_warnings: true)# 因为本地索引库repo的名字是基本上不会去改变的，所以这里直接写死 LXFSpecs# podspec的名字需要由外界传入pod_push(path: &quot;#&#123;podspecName&#125;.podspec&quot;, repo: &quot;LXFSpecs&quot;)end 2、验证Fastfile1fastlane lanes 3、执行fastlane需要在组件仓库的根目录下执行 1fastlane LXFUpdatePodTool tag:0.1.1 specName:LXFMain 整个执行过程不超过30秒～ 四、自定义Action以上的过程已经可以完成一整个自动化更新了，但是有一点需要注意的是，这个输入的tag可能会面临一个问题，那就是本地和远程都可能已经存在，即发生冲突，这个时候我们可以选择自动删除本地和远程冲突的那个tag，再重新上传当前tag 1、创建一个新的action1fastlane new_action 按要求输入Action名称 完成后fastlane目录下就会多出一个名为actions的文件夹，里面存放的就是你自定义action 2、编辑自定义action打开remove_git_tag.rb，开始自定义我们的action吧，什么？不会语法怎么办？可以参考别人的嘛，上面给出的action的源码地址就有用武之地了，比如pod_push。这里我直接贴出我已经完成的主要代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 可以使用 fastlane action remove_git_tag 来参看详细描述def self.run(params) # 这里写要执行的操作 # params[:参数名称] 参数名称与下面self.available_options中的保持一致 tagNum = params[:tagNum] rmLocalTag = params[:rmLocalTag] rmRemoteTag = params[:rmRemoteTag] command = [] if rmLocalTag # 删除本地标签 # git tag -d 标签名称 command &lt;&lt; &quot;git tag -d #&#123;tagNum&#125;&quot; end if rmRemoteTag # 删除远程标签 # git push origin :标签名称 command &lt;&lt; &quot;git push origin :#&#123;tagNum&#125;&quot; end result = Actions.sh(command.join(&apos;&amp;&apos;)) UI.success(&quot;Successfully remove tag 🚀 &quot;) return resultenddef self.description # 对当前脚本的简单描述 &quot;删除tag&quot;enddef self.details # 对当前脚本的具体描述 &quot;使用当前action来删除本地和远程冲突的tag&quot;enddef self.available_options # 用来传递参数 [ FastlaneCore::ConfigItem.new(key: :tagNum, description: &quot;输入即将删除的tag&quot;, is_string: true), FastlaneCore::ConfigItem.new(key: :rmLocalTag, description: &quot;是否删除本地tag&quot;, optional:true, is_string: false, default_value: true), FastlaneCore::ConfigItem.new(key: :rmRemoteTag, description: &quot;是否删除远程tag&quot;, optional:true, is_string: false, default_value: true) ]enddef self.authors # 作者姓名 [&quot;LinXunFeng&quot;]end 3、查看action描述同样，这里先cd到组件库的根目录下执行，原因是这个自定义action只存在当前根目录下的fastlane中，其它fastlane的非自定义的action就不用在当前根目录下操作～1fastlane action remove_git_tag 4、测试执行先来看看当前组件库已存在的tag1git tag 可以看到，我是已经有一个0.1.1版本的了。这时我们再来执行一次LXFUpdatePodTool航道1fastlane LXFUpdatePodTool tag:0.1.1 specName:LXFMain 五、工具拿走LXFUpdatePodTool 已经传到我的GitHub上，需要的同学就拿走吧，顺手给个Star咯 Orz]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>Cocoapods</tag>
        <tag>iOS</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS 组件化开发（三）：加载资源文件]]></title>
    <url>%2F2018%2F04%2F06%2FiOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[经过前两篇文章的学习，相信对组件化开发有了大致的了解，那我们这篇文章就来讲讲资源文件的加载吧 + 经过前两篇文章的学习，相信对组件化开发有了大致的了解，那我们这篇文章就来讲讲资源文件的加载吧 这里我新建了一个LXFMain组件库，主要是用来显示TabBar的玩意，然后再进行组件化抽离出来，其中的过程这里不再赘述，还没了解过的同学建议先阅读下这两篇文章吧 iOS 组件化开发（一）：远程私有库的基本使用 iOS 组件化开发（二）：远程私有库的更新与子库 这里跟之前不一样的地方在于多了图片资源，组件的核心代码放在Classes文件夹中，而图片我们则存放于Assets目录下，如图所示 一、修改Spec将关于资源加载的注释去掉1234s.resource_bundles = &#123; # &apos;LXFMain&apos; =&gt; [&apos;LXFMain/Assets/*.png&apos;] &apos;LXFMain&apos; =&gt; [&apos;LXFMain/Assets/*&apos;]&#125; 回到LXFMain的模板库，我们进行一次本地的安装和测试(pod install) 可以看到，图片资源也安装进来了，但是运行的效果如下图，图片并不能成功加载出来 二、修改加载资源代码这是当前加载图片的相关代码1[UIImage imageNamed:@&quot;图片名称&quot;]; 右击显示包内容 图片就在这个LXFMain.bundle里面(这里就不截图看了)，这里主要是让大家对这个目录结构有个了解 我们对imageNamed进行跳转到定义操作 1// load from main bundle 可以看到，官方注释着imageNamed加载的是main bundle中的资源,mainBundle的位置如下图 这样当然就无法加载到图片啦，我们需要让它加载自己当前所在bundle里的图片 ，所以加载图片的代码需要进行修改1234NSString *normalImgName = @"个人@2x.png";NSBundle *curBundle = [NSBundle bundleForClass:self.class]; // 获取当前bundleNSString *normalImgPath = [curBundle pathForResource:normalImgName ofType:nil inDirectory:@"LXFMain.bundle"];UIImage *normalImage = [UIImage imageWithContentsOfFile:normalImgPath]; 但是直接写LXFMain.bundle并不好，不可控，所以还需要改进一下：12345678NSString *normalImgName = [NSString stringWithFormat:@&quot;%@@2x.png&quot;, normalImg];NSBundle *curBundle = [NSBundle bundleForClass:self.class];// *********** 重点 *********** //NSString *curBundleName = curBundle.infoDictionary[@&quot;CFBundleName&quot;];NSString *curBundleDirectory = [NSString stringWithFormat:@&quot;%@.bundle&quot;, curBundleName];NSString *normalImgPath = [curBundle pathForResource:normalImgName ofType:nil inDirectory:curBundleDirectory];// *************************** //UIImage *normalImage = [UIImage imageWithContentsOfFile:normalImgPath]; 三、聊聊xibXib的加载也是如此1234NSBundle *curBundle = [NSBundle bundleForClass:self.class];LXFCenterView *centerView = (LXFCenterView *)[curBundle loadNibNamed:@&quot;LXFCenterView&quot; owner:nil options:nil].firstObject;centerView.frame = CGRectMake(30, 140, 200, 100);[self.view addSubview:centerView]; 不过xib中值得一提的是，如果是直接在xib中拖入一个imageView控件来设置图片的加载，我们则需要在图片名字前加上当前bundle名称1LXFMain.bundle/个人 这里除了当前xib要加载的图片不属于mainBundle这个原因之外，还有一点就是xib文件与bundle存放位置属于同一级别，故直接使用相对路径的方式，在图片名字前加上bundle名称即可。 虽然无法在xib上直接看到效果，不过确实是有效的 四、遇到的小问题1[!] Unable to find a pod with name, author, summary, or description matching `lxfmain` 我做完一切操作后发现搜索报上面那个错，解决方案是删除本地索引文件，然后再搜索一遍，系统会自动帮你再生成一切本地索引文件，然后就搞定了～12rm -rf ~/Library/Caches/CocoaPods/search_index.json pod search lxfmain]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>Cocoapods</tag>
        <tag>iOS</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS 组件化开发（二）：远程私有库的更新与子库]]></title>
    <url>%2F2018%2F04%2F06%2FiOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%AD%90%E5%BA%93%2F</url>
    <content type="text"><![CDATA[在上一篇【iOS 组件化开发（一）：远程私有库的基本使用】中我们已经实战了远程私有库的基本操作，但是组件不可能上传一次就完事了，随着业务的增加，我们的组件可能还需要添加更多的东西，或者修复一些问题，这就需要我们对私有库代码进行升级与维护 + 在上一篇【iOS 组件化开发（一）：远程私有库的基本使用】中我们已经实战了远程私有库的基本操作，但是组件不可能上传一次就完事了，随着业务的增加，我们的组件可能还需要添加更多的东西，或者修复一些问题，这就需要我们对私有库代码进行升级与维护 这里以对基础组件里添加了一个Cache工具为例 添加完成后我们需要更新到远程仓库 一、更新远程仓库cd 到本地仓库的位置，执行以下操作 1、代码更新123git add .git commit -m &apos;更新描述&apos;git push origin master 2、版本更新版本更新 这一步非常重要，为更新索引库做准备 12git tag -a &apos;新版本号&apos; -m &apos;注释&apos;git push --tags 查看远程仓库，标签数已经有2个了，点进去就可以看到0.2.0，这里我们就不去看了 二、修改描述文件并更新索引库1、修改Sepc打开你的xx.podspec文件，将原本的版本号改为0.2.0，与刚刚的tag保持一致1s.version = &apos;0.2.0&apos; 2、验证远程Spec1pod spec lint --private 3、更新索引库1pod repo push 索引库名称 xxx.podspec 三、更新使用123// --no-repo-update 不更新本地索引库// 因为刚刚已经自己手动更新过了，所以这里我们选择跳过更新pod update --no-repo-update 四、第三方依赖当我们的私有库需要依赖其它第三方才可以正常使用时，我们就需要在spec文件中开启依赖，例如下面所示代码，表明当前仓库需要依赖AFN和SDWebImage12s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 3.2.0&apos;s.dependency &apos;SDWebImage&apos;, &apos;~&gt; 4.3.3&apos; 修改后更新操作同上所述，这里就不再赘述了。 但是这里存在一个问题，如果来了一位新的小伙伴，他所负责的部分只需要LXFBase下的Category，而LXFBase下的Cache才需要依赖SDWebImage，此时他若是pod一整个LXFBase岂不是平白无故安装了第三方依赖库，那应该怎么做呢？ 方案就是可以通过子库Subspecs来解决因需要一个小小的工具而依赖整个基础组件的问题 五、子库Subspecs什么是Subspecs？这里我们可以搜索一下SDWebImage 1pod search &apos;SDWebImage&apos; 可以看到，如果我们只需要用到SDWebImage中的GIF功能，那么并不需要将整个SDWebImage都下载下来，在Podfile中将pod &#39;SDWebImage&#39; 改为 pod SDWebImage/GIF即可单独使用这一功能 那接下来我们就来看看怎么描述一个子库吧 子库格式123s.subspec &apos;子库名称&apos; do |别名|end 因为这里已经分离出子库了，所以s.source_files和s.dependency就不能这么使用了，需要我们在子库里分别指定，所以我们直接把原来的s.source_files和s.dependency都注释掉。写法参考如下 123456789101112131415# s.source_files = &apos;LXFBase/Classes/**/*&apos;# s.dependency &apos;SDWebImage&apos;, &apos;~&gt; 4.3.3&apos;s.subspec &apos;Cache&apos; do |c| c.source_files = &apos;LXFBase/Classes/Cache/**/*&apos; c.dependency &apos;SDWebImage&apos;, &apos;~&gt; 4.3.3&apos;ends.subspec &apos;Category&apos; do |c| c.source_files = &apos;LXFBase/Classes/Category/**/*&apos;ends.subspec &apos;Tool&apos; do |t| t.source_files = &apos;LXFBase/Classes/Tool/**/*&apos;end 修改后再按之前的步骤更新索引库和组件库就可以了 ps: 在添加第三方依赖描述后做验证或者上传操作可能会很慢，因为它在克隆第三方库如SDWebImage，有兴趣的可以在命令后面加入--verbose来查看详情情况1pod spec lint --private --verbose 在成功更新组件库和索引库后我们再来搜索一下试试1pod search &apos;LXFBase&apos; 现在就可以爱装哪个就装哪个了，在Podfile中指定要安装的子库就行了1pod &apos;LXFBase/Cache&apos; 1pod install]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>Cocoapods</tag>
        <tag>iOS</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS 组件化开发（一）：远程私有库的基本使用]]></title>
    <url>%2F2018%2F04%2F06%2FiOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[随着项目功能的不断增加，越来越多的开发人员加入，业务主线也随之越来越多，造成耦合越来越严重，编译越来越慢，测试不独立等一系列问题。为了解决此类情况，我们可以考虑到使用组件化开发 + 随着项目功能的不断增加，越来越多的开发人员加入，业务主线也随之越来越多，造成耦合越来越严重，编译越来越慢，测试不独立等一系列问题。为了解决此类情况，我们可以考虑到使用组件化开发 1.概念组件化就是将一个单一工程的项目, 分解成为各个独立的组件， 然后按照某种方式, 任意组织成一个拥有完整业务逻辑的工程。 2.优势 独立：独立编写、编译、运行、测试 重用：功能代码的重复使用。比如不同项目使用同一功能模块 高效：任意增删模块，实现高效迭代 组件化还可以配合二进制化, 提高项目编译速度 3.组件分类大体上分三类：基础组件、功能组件和业务组件 基础组件：也称为公共组件，存放平时定义的宏、常量、协议、分类、对必要的第三方的封装类，以及各种处理工具类，如：时间、日期、设备信息、文件处理、沙盒管理等 功能组件： 自定义视图控件、一些特定功能的封装（如录音、播放音频封装） 业务组件：各种业务线 本篇先来介绍下远程私有库的基本使用，建议按顺序看完之后，回来再看一遍步骤归纳，加深了解，如有不足之处，欢迎指出，感谢 : ) 步骤归纳 创建远程索引库和私有库 将远程索引库添加到本地 pod repo add 索引库名称 索引库地址 在本地创建一个pod模板库 pod lib create 组件名称将框架的核心代码添加到Classes目录下本地安装测试核心代码是否可用 pod install修改Spec描述文件将修改好的模板库上传至远程私有库 上传代码和打标签git initgit add .git commit -m &quot;提交描述&quot;git remote add origin 远程私有库地址git push origin mastergit tag &#39;0.1.0&#39;git push --tags 提交spec至私有索引库pod lib lint --privatepod spec lint --privatepod repo push 索引库的本地名称 xx.podspec 使用source 官方索引库urlsource 私有索引库urlpod &#39;组件名称&#39;pod install 接下来我们就来实战如何创建和使用私有库 一、创建私有索引库这里以码云为例，创建一个LXFSpecs的私有索引库，这玩意的作用如其名，就是用来索引的 二、本地添加私有索引库1、查看本地索引库1pod repo 如图，目前本地仅有github上的那个公有索引库 2、添加私有索引库将我们刚刚新建的私有索引库LXFSpecs添加到本地 12// pod repo add 索引库名称 索引库地址pod repo add LXFSpecs https://gitee.com/LinXunFeng/LXFSpecs.git 现在本地就有两个索引库，好，索引库的事情就先放一边去了～ 三、创建组件库码云上的创建操作同上，这里以LXFBase为例，创建基础组件库 1、快速创建模版库到合适的位置创建一个与组件名相同的文件夹，cd进去后，使用如下命令12// pod lib create 组件名pod lib create LXFBase 这里会让你配置一些信息，根据自己的情况自行配置即可。 2、添加组件内容创建完成后会自动帮我们打开相应的Example项目，LXFBase目录中会出现如图这些文件，我们把基础组件相关的东西丢到Classes文件夹中，并且把ReplaceMe.m文件删除 默认Classes文件夹中存放的文件就是pod install时要下载下来的文件，当然可以通过修改spec文件的配置来更改位置 3、安装与测试本地库在Example项目的Podfile文件中可以看到1pod &apos;LXFBase&apos;, :path =&gt; &apos;../&apos; 模板库已经默认帮我们在Podfile中指定了LXFBase.podspec的位置，使组件LXFBase可以正常安装使用和方便测试 1pod install 可以看到我们已经将本地的组件添加进Example中了，现在可以尽情地做你想做的测试，确保组件的可用。 测试组件没有问题后，我们接下来就要将podspec文件上传至私有索引库，不过在此之前，需要对spec进行修改。 4、 修改Spec具体的配置说明可以参考Cocoapods 创建第三方框架 主要的修改内容 123456789 s.name = &apos;LXFBase&apos; s.version = &apos;0.1.0&apos; s.summary = &apos;LXFBase.&apos; s.description = &lt;&lt;-DESCLXFBase是基础组件库，包括分类和常用工具 DESC s.homepage = &apos;https://gitee.com/LinXunFeng/LXFBase&apos; s.source = &#123; :git =&gt; &apos;https://gitee.com/LinXunFeng/LXFBase.git&apos;, :tag =&gt; s.version.to_s &#125; s.source_files = &apos;LXFBase/Classes/**/*&apos; 四、上传组件代码1、将代码提交到组件仓库123456git add .git commit -m &apos;firstCommit&apos;git remote add origin https://gitee.com/LinXunFeng/LXFBase.git// 第一次push如果报错的话可以加上-f// git push -f origin mastergit push origin master 2、打标签标签0.1.0与spec中的s.version保持一致12git tag &apos;0.1.0&apos;git push --tags 五、提交podspec到私有索引库在上传spec文件前我们可以做一个验证来节省时间，不然每次都推送很久结果还是验证失败，会气死人的～ 1、本地验证Spec的必填字段12// 本地验证不会验证 s.source 中的tagpod lib lint 2、远程验证12// 远程验证会验证 s.source 中的tag，如果此时没有打上相应的标签则会报错pod spec lint 如果你刚才没有打标签并上传至远程私有库就来进行远程验证，肯定是会报错的 在打完并上传tag后再进行远程验证，就会验证成功了，验证成功后我们就可以进行下一步操作：提交podspec文件到索引库 验证私有库提示如果验证的是私有库，则在后面加上--private,否则会有警告，你可以选择--allow-warnings来忽略该警告12pod lib lint --privatepod spec lint --private 3、提交podspec12// pod repo push 私有索引库名称 spec名称.podspec pod repo push LXFSpecs LXFBase.podspec 这里的操作过程：先将我们的代码直接push到本地索引库LXFSpecs，推送后会自动帮我们同步到远程索引库 再来看看码云上的私有索引库LXFSpecs 来测试下搜索我们的组件1pod search &apos;LXFBase&apos; 六、使用私有库这时我们可以来试试通过pod形式来添加组件LXFBase，创建一个新的项目 1、添加Podfile文件1pod init 2、在Podfile的最顶部添加如下描述123// 第二行是为了保证公有库的正常使用source &apos;https://gitee.com/LinXunFeng/LXFSpecs.git&apos;source &apos;https://github.com/CocoaPods/Specs.git&apos; 3、添加使用组件LXFBase1pod &apos;LXFBase&apos; 4、安装组件1pod install]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>Cocoapods</tag>
        <tag>iOS</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cocoapods 创建第三方框架]]></title>
    <url>%2F2018%2F04%2F06%2FCocoapods-%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[将框架中的主要文件放入到一个指定文件夹中，比如叫Classes或者Lib都可以 + 一、上传项目到github将框架中的主要文件放入到一个指定文件夹中，比如叫Classes或者Lib都可以 打开终端，cd到框架目录 1cd /Users/lxf/xxxx/LXFPhotoHelper 初始化仓库 1git init 将当前目录添加到缓存区 1git add . 提交到本地仓库 1git commit -m &apos;描述&apos; 添加远程仓库地址 1git remote add origin https://github.com/LinXunFeng/xxx.git 提交到远程仓库 1git push origin master 如果出现如下提示1fatal: unable to access &apos;https://github.com/xxx/xxx.git/&apos;: The requested URL returned error: 403 原因是本地缓存了用户名和密码编辑.git目录下的config文件1vi .git/config 找到url那一行，在github.com前加上用户名后保存，再重新执行推送操作1url = https://LinXunFeng@github.com/LinXunFeng/xxx.git 打标签 1234// 具体说明可以执行`git tag --help`后查看// git tag -a &apos;版本号&apos; -m &apos;tag描述&apos;// 注意一下，这里打的标签只是在本地git tag &apos;0.0.1&apos; 推着所有标签至远程仓库 123// 只推着指定版本// git push origin 版本号 git push --tags 二、创建并修改podspec文件 创建Spec文件12// 名称一般与工程名称保持一致pod spec create 框架名称 修改Spec文件123456789101112131415s.name = &quot;LXFPhotoHelper（仓库名称）&quot;s.version = &quot;0.0.1（版本号，这里跟下面s.source中的tag有关）&quot;s.summary = &quot;对你自己仓库的简单描述，不要写太多字&quot;s.description = &quot;这个是详细描述，这里需要注意的是，这里文字的长度需要比 s.summary的要长，不然会出现警告&quot;s.homepage = &quot;仓库首页地址，如https://github.com/LinXunFeng/LXFPhotoHelper&quot;s.license = &quot;MIT&quot;s.author = &#123; &quot;LinXunFeng&quot; =&gt; &quot;598600855@qq.com&quot; &#125;# source存放的地址是代码的真正地址s.source = &#123; :git =&gt; &quot;仓库对应的git地址，如https://github.com/LinXunFeng/LXFPhotoHelper.git&quot;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;# pod install时真正下载下来的文件路径，这里指定的是你仓库下的Classes目录中的所有.h和.m文件（填写的是相对地址）# ** 通配目录s.source_files = &quot;Classes&quot;, &quot;Classes/**/*.&#123;h,m&#125;&quot;# s.library = &quot;sqlite3&quot; # 框架依赖系统的sqlite3 也可以上官网的手册【Podspec Syntax Reference】上查看 这里需要我们注意的是s.version= &quot;0.0.1&quot;，这里的版本号要与刚刚打的tag一致 三、注册trunk123// --verbose 打印详情信息// pod trunk register 邮箱 &apos;你的名称&apos; --verbosepod trunk register 598600855@qq.com &apos;LinXunFeng&apos; --verbose 然后去验证邮箱验证成功后会提示我们回到终端，并敲入pod trunk push 名称.podspec 四、上传Spec执行pod trunk push后会有一个审核的过程，如果提示没有通过，有ERROR就修改好后重新push，如果只是WARN可以选择在pod trunk push后面加上--allow-warnings来忽略它们1pod trunk push LXFPhotoHelper.podspec --allow-warnings 如果出现如下信息，则说明你的框架名字已被占用，得重新改个名字～所以，在创建你自己的cocoapods仓库时最好是到cocoapods.org上先查一下有没有相同名字的1[!] You (xxx@qq.com) are not allowed to push new versions for this pod. The owners of this pod are yyy@qq.com. 上传成功后会自动帮我们更新本地仓库，如果无法搜索到自己的框架，可以先删掉本地的索引文件后再搜索一次1rm ~/Library/Caches/CocoaPods/search_index.json 当使用pod search 命令可以搜索自己的框架时, 那么就意味着审核通过了]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>Cocoapods</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - 虚拟环境]]></title>
    <url>%2F2018%2F04%2F02%2FPython-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[平时在开发时我们都会先安装一些python需要的包，每次安装都会有一个版本，如果不同项目需要不同版本的包时就会出现不兼容的情况。应对这种情况我们就可以搭建多个虚拟环境来应对不同的环境需求，在虚拟环境中搭建一个Python项目运行所需要的那些包，将来根据运行的项目来切换不同环境即可 + 平时在开发时我们都会先安装一些python需要的包，每次安装都会有一个版本，如果不同项目需要不同版本的包时就会出现不兼容的情况。应对这种情况我们就可以搭建多个虚拟环境来应对不同的环境需求，在虚拟环境中搭建一个Python项目运行所需要的那些包，将来根据运行的项目来切换不同环境即可 我们可以在当前用户的家目录中找到【.virtualenvs】文件夹，查看当前所有的虚拟环境 创建虚拟环境 创建：mkvirtualenv [虚拟环境名称] 1mkvirtualenv lxfenv1 注：创建的过程需要联网 1Installing setuptools, pkg_resources, pip, wheel...done. 刚刚安装时提示安装的这些东西就存放在你创建好的虚拟环境下的【lib/python2.7/site-packages/】目录中 退出：deactivate当我们安装好虚拟环境后默认就使用了该虚拟环境，如图标识处可以看出 如果你想退出当前的虚拟环境，或以使用如下命令： 1deactivate 进入：workon [虚拟环境名称] 使用指定的虚拟环境则使用如下命令： 1workon lxfenv1 删除：rmvirtualenv [虚拟环境名称] 1rmvirtualenv lxfenv1 安装拓展包 查看当前安装好的包 123pip list或者pip freeze ps: 上图pip list中列出的四个包是安装虚拟环境必定会安装的包如图，pip list会列出所有的包，而pip freeze只会列出扩展的包 安装指定包12pip install django==1.8.2# ==1.8.2 为指定版本号，不写则直接安装最新的包 注： pip install xxx 会自动删除旧版本，再安装新版本 如果不知道包名可以到pypi上搜索]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RxSwift + MJRefresh 打造自动处理刷新控件状态]]></title>
    <url>%2F2017%2F10%2F24%2FRxSwift-MJExtension-%E6%89%93%E9%80%A0%E8%87%AA%E5%8A%A8%E5%A4%84%E7%90%86%E5%88%B7%E6%96%B0%E6%8E%A7%E4%BB%B6%E7%8A%B6%E6%80%81%2F</url>
    <content type="text"><![CDATA[MVVM的模式中，多出了ViewModel这个角色，将逻辑处理、网络请求等繁杂操作中ViewController中抽离出来，ViewController得以瘦身。结合RxSwift架构，我们一般就会在ViewModel中定义一个input收集繁杂操作所需的信息，通过一个transform方法将input作为参数传入，进而得到一个output供controller使用。 在使用RxSwift开发时会大量的使用到这种形式，其中就包括我们的网络请求。 + 本文是基于 iOS - RxSwift 项目实战记录 所述，如果你还未阅读过，建议你最好还先阅读一遍，并下载Demo熟悉一下 : ) 前言MVVM的模式中，多出了ViewModel这个角色，将逻辑处理、网络请求等繁杂操作中ViewController中抽离出来，ViewController得以瘦身。结合RxSwift架构，我们一般就会在ViewModel中定义一个input收集繁杂操作所需的信息，通过一个transform方法将input作为参数传入，进而得到一个output供controller使用。 在使用RxSwift开发时会大量的使用到这种形式，其中就包括我们的网络请求。结合 iOS - RxSwift 项目实战记录 中所述的“MJRefresh在RxSwift中的使用”，在output中定义了一个变量1let refreshStatus = Variable&lt;LXFRefreshStatus&gt;(.none) controller通过output将其进行监听，从而当值发生变化时，controller就能实时获取当前应所处的刷新状态12345678910111213141516vmOutput.refreshStatus.asObservable().subscribe(onNext: &#123;[weak self] status in switch status &#123; case .beingHeaderRefresh: self?.tableView.mj_header.beginRefreshing() case .endHeaderRefresh: self?.tableView.mj_header.endRefreshing() case .beingFooterRefresh: self?.tableView.mj_footer.beginRefreshing() case .endFooterRefresh: self?.tableView.mj_footer.endRefreshing() case .noMoreData: self?.tableView.mj_footer.endRefreshingWithNoMoreData() default: break &#125;&#125;).addDisposableTo(rx_disposeBag) 如果在一个项目多处使用到了这种方式，我们就可以看到弊端——重复代码，过于冗余。 难道我们每次都要在controller中进行如此操作吗？ 面向协议关于协议的内容可以看下我之前的这两篇文章iOS - Swift 面向协议编程（一） iOS - Swift 面向协议编程（二） 总结协议的两大作用：1、规范 2、定制能力 定义协议 Refreshable 1234567891011121314151617/* ============================ Refreshable ================================ */// 需要使用 MJExtension 的控制器使用protocol Refreshable &#123; &#125;extension Refreshable where Self : UIViewController &#123; func initRefreshHeader(_ scrollView: UIScrollView, _ action: @escaping () -&gt; Void) -&gt; MJRefreshHeader &#123; scrollView.mj_header = MJRefreshNormalHeader(refreshingBlock: &#123; action() &#125;) return scrollView.mj_header &#125; func initRefreshFooter(_ scrollView: UIScrollView, _ action: @escaping () -&gt; Void) -&gt; MJRefreshFooter &#123; scrollView.mj_footer = MJRefreshAutoNormalFooter(refreshingBlock: &#123; action() &#125;) return scrollView.mj_footer &#125;&#125; 在controller中遵循 Refreshable 协议，通过initRefreshHeader方法或者initRefreshFooter方法给tableView或者collectionView赋予头部或尾部刷新的能力，并且书写下拉刷新时需要执行的代码12345// 以下拉刷新为例let refreshHeader = initRefreshHeader(liveCollectionView) &#123; [weak self] in // 下拉后需要执行的操作 self?.vmOutput?.requestCommand.onNext(())&#125; 接下来再讲讲output，只要有网络请求的地方，就会需要需要监听请求状态，既然这样，那么可以为output定义一个协议OutputRefreshProtocol，专门用来规范必需声明的属性1234567/* ============================ OutputRefreshProtocol ================================ */// viewModel 中 output使用protocol OutputRefreshProtocol &#123; // 告诉外界的tableView当前的刷新状态 var refreshStatus : Variable&lt;LXFRefreshStatus&gt; &#123;get&#125;&#125; 接着让output去遵循该协议，并进行初始化刷新状态的值为.none123456789struct LXFLiveOutput: OutputRefreshProtocol &#123; var refreshStatus: Variable&lt;LXFRefreshStatus&gt; let sections: Driver&lt;[LXFLiveSection]&gt; init(sections: Driver&lt;[LXFLiveSection]&gt;) &#123; self.sections = sections refreshStatus = Variable&lt;LXFRefreshStatus&gt;(.none) &#125;&#125; 到此为止，其实跟之前没啥两样，只是使controller更方便初始化刷新控件而已。接下来才是本文的重点。 重点刷新的状态无非也就那么几种，下拉重载数据，上拉加载更多，请求完成时结束下拉或上拉等等。。。那我们何必要在每个controller中再去管理这等琐事？？而至此，刷新控件的状态是由变量 refreshStatus 来决定，此时 refreshStatus 又声明在 OutputRefreshProtocol 协议中，我们何不再定义一个方法，将刷新控件的状态交给refreshStatus自己来帮我们处理呢～ 1234567891011121314151617181920extension OutputRefreshProtocol &#123; func autoSetRefreshHeaderStatus(header: MJRefreshHeader?, footer: MJRefreshFooter?) -&gt; Disposable &#123; return refreshStatus.asObservable().subscribe(onNext: &#123; (status) in switch status &#123; case .beingHeaderRefresh: header?.beginRefreshing() case .endHeaderRefresh: header?.endRefreshing() case .beingFooterRefresh: footer?.beginRefreshing() case .endFooterRefresh: footer?.endRefreshing() case .noMoreData: footer?.endRefreshingWithNoMoreData() default: break &#125; &#125;) &#125;&#125; 这时需要我们将刷新控件的对象 header / footer 传入到方法中，实现自动控制刷新控件状态。 总结使用一、output中遵守协议 OutputRefreshProtocol， 并初始化 refreshStatus 的值为 none 123456789struct LXFLiveOutput: OutputRefreshProtocol &#123; var refreshStatus: Variable&lt;LXFRefreshStatus&gt; let sections: Driver&lt;[LXFLiveSection]&gt; init(sections: Driver&lt;[LXFLiveSection]&gt;) &#123; self.sections = sections refreshStatus = Variable&lt;LXFRefreshStatus&gt;(.none) &#125;&#125; 二、controller 遵守协议 Refreshable，通过协议中的方法初始化刷新控件及对应的操作，并将刷新控件对象作为参数传入到自动处理状态方法中1extension LXFLiveViewController: Refreshable 1234let refreshHeader = initRefreshHeader(liveCollectionView) &#123; [weak self] in self?.vmOutput?.requestCommand.onNext(())&#125;vmOutput?.autoSetRefreshHeaderStatus(header: refreshHeader, footer: nil).disposed(by: rx.disposeBag) 三、viewModel中根据实际情况实时更新 refreshStatus 的刷新状态 案例协议：Refreshable.swiftViewModel：LXFLiveViewModelController：LXFLiveViewController LXFBiliBili]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - 视频采集详解]]></title>
    <url>%2F2017%2F10%2F16%2FiOS-%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[苹果官方文档-AVFoundation 为了管理从相机或者麦克风等这样的设备捕获到的信息，我们需要输入对象(input)和输出对象(output)，并且使用一个会话(AVCaptureSession)来管理 input 和 output 之前的数据流 + 苹果官方文档-AVFoundation 为了管理从相机或者麦克风等这样的设备捕获到的信息，我们需要输入对象(input)和输出对象(output)，并且使用一个会话(AVCaptureSession)来管理 input 和 output 之前的数据流： 类名 简介 AVCaptureDevice 输入设备，例如 摄像头 麦克风 AVCaptureInput 输入端口 [使用其子类] AVCaptureOutput 设备输出 [使用其子类]，输出视频文件或者静态图像 AVCaptureSession 管理输入到输出的数据流 AVCaptureVideoPreviewLayer 展示采集 预览View 如图，通过单个 session，也可以管理多个 input 和 output 对象之间的数据流，从而得到视频、静态图像和预览视图 如图，input 可以有一个或多个输入端口，output 也可以有一个或多个数据来源（如：一个 AVCaptureMovieFileOutput 对象可以接收视频数据和音频数据） 当添加 input 和 output 到 session 中时，session 会自动建立起一个连接(AVCaptureConnection)。我们可以使用这个 connection 来设置从 input 或者 从 output 得到的数据的有效性，也可以用来监控在音频信道中功率的平均值和峰值。 使用 Session 来管理数据流创建一个 session 用来管理捕获到的数据，需要先将 inputs 和 outputs 添加到 session 中，当 session 执行 [startRunning] 方法后就会开始将数据流发送至 session，通过执行[stopRunning] 方法来结束数据流的发送。12345AVCaptureSession *captureSession = [[AVCaptureSession alloc] init];// 添加 inputs 和 outputs[session startRunning]; 在 [session startRunning] 之前我们需要进行一些基本的配置 (如：设备分辨率，添加输入输出对象等) 设置分辨率1234// 设置分辨率 720P 标清if ([captureSession canSetSessionPreset:AVCaptureSessionPreset1280x720]) &#123; captureSession.sessionPreset = AVCaptureSessionPreset1280x720;&#125; 附苹果官方文档中可供配置的分辨率列表 其中高分辨率(AVCaptureSessionPresetHigh) 为默认值，会根据当前设备进行自适应，但是这样之后导出来的文件就会很大，一般情况下设置为标清(AVCaptureSessionPreset1280x720) 就可以了 输入对象12// 直接使用后置摄像头AVCaptureDevice *videoDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo]; 12345// 在这个方法中的 mediaType 有三个选项供我们使用// AVMediaTypeVideo 视频// AVMediaTypeAudio 音频// AVMediaTypeMuxed 混合(视频 + 音频)+ (nullable AVCaptureDevice *)defaultDeviceWithMediaType:(AVMediaType)mediaType; 但是这种方式只能获取到后置摄像头，如果想要获取前置摄像头，可使用12345678AVCaptureDevice *videoDevice;NSArray *devices = [AVCaptureDevice devices];for (AVCaptureDevice *device in devices) &#123; if(device.position == AVCaptureDevicePositionFront) &#123; // 前置摄像头 videoDevice = device; &#125;&#125; 123456// 通过设备获取输入对象AVCaptureDeviceInput *videoInput = [AVCaptureDeviceInput deviceInputWithDevice:videoDevice error:nil];// 给会话添加输入if([captureSession canAddInput:videoInput]) &#123; [captureSession addInput:videoInput];&#125; 输出对象1234567891011121314151617// 视频输出：设置视频原数据格式：YUV, RGB // 苹果不支持YUV的渲染，只支持RGB渲染，这意味着： YUV =&gt; RGBAVCaptureVideoDataOutput *videoOutput = [[AVCaptureVideoDataOutput alloc] init];// videoSettings: 设置视频原数据格式 YUV FULLvideoOutput.videoSettings = @&#123;(NSString *)kCVPixelBufferPixelFormatTypeKey:@(kCVPixelFormatType_420YpCbCr8BiPlanarFullRange)&#125;;// 设置代理：获取帧数据// 队列：串行/并行，这里使用串行，保证数据顺序 dispatch_queue_t queue = dispatch_queue_create(&quot;LinXunFengSerialQueue&quot;, DISPATCH_QUEUE_SERIAL);[videoOutput setSampleBufferDelegate:self queue:queue];// 给会话添加输出对象if([captureSession canAddOutput:videoOutput]) &#123; // 给会话添加输入输出就会自动建立起连接 [captureSession addOutput:videoOutput];&#125; 在这里，输出对象可以设置帧率 12// 帧率：1秒10帧就差不多比较流畅了videoOutput.minFrameDuration = CMTimeMake(1, 10); 输出对象在设置视频原数据格式时使用 videoSettings 属性，需要赋值的类型是字典格式有两种，一种是YUV，另一种是RGB（一般我们都使用YUV，因为体积比RGB小） 123456789101112// keykCVPixelBufferPixelFormatTypeKey 指定解码后的图像格式// valuekCVPixelFormatType_420YpCbCr8BiPlanarVideoRange : YUV420 用于标清视频[420v]kCVPixelFormatType_420YpCbCr8BiPlanarFullRange : YUV422 用于高清视频[420f] kCVPixelFormatType_32BGRA : 输出的是BGRA的格式，适用于OpenGL和CoreImage区别：1、前两种是相机输出YUV格式，然后转成RGBA，最后一种是直接输出BGRA，然后转成RGBA;2、420v 输出的视频格式为NV12；范围： (luma=[16,235] chroma=[16,240])3、420f 输出的视频格式为NV12；范围： (luma=[0,255] chroma=[1,255]) 预览图层123AVCaptureVideoPreviewLayer *previewLayer = [AVCaptureVideoPreviewLayer layerWithSession:captureSession];previewLayer.frame = self.view.bounds;[self.view.layer addSublayer:previewLayer]; 实时显示摄像头捕获到的图像，但不适用于滤镜渲染 代理方法12345678910111213#pragma mark - AVCaptureVideoDataOutputSampleBufferDelegate/* CMSampleBufferRef: 帧缓存数据，描述当前帧信息 CMSampleBufferGetXXX : 获取帧缓存信息 CMSampleBufferGetDuration : 获取当前帧播放时间 CMSampleBufferGetImageBuffer : 获取当前帧图片信息 */// 获取帧数据- (void)captureOutput:(AVCaptureOutput *)output didOutputSampleBuffer:(CMSampleBufferRef)sampleBuffer fromConnection:(AVCaptureConnection *)connection &#123; // captureSession 会话如果没有强引用，这里不会得到执行 NSLog(@&quot;----- sampleBuffer ----- %@&quot;, sampleBuffer);&#125; 12// 获取帧播放时间CMTime duration = CMSampleBufferGetDuration(sampleBuffer); 在代理方法中，可以把 sampleBuffer 数据渲染出来去显示画面。适用于滤镜渲染12345678// 获取图片帧数据CVImageBufferRef imageBuffer = CMSampleBufferGetImageBuffer(sampleBuffer);CIImage *ciImage = [CIImage imageWithCVImageBuffer:imageBuffer];UIImage *image = [UIImage imageWithCIImage:ciImage];dispatch_async(dispatch_get_main_queue(), ^&#123; self.imageView.image = image;&#125;); 需要注意的是：代理方法中的所有动作所在队列都是在异步串行队列中，所以更新UI的操作需要回到主队列中进行！！ 但是此时会发现，画面是向左旋转了90度，因为默认采集的视频是横屏的，需要我们进一步做调整。以下步骤添加在[session startRunning];之前即可，但是一定要在添加了 input 和 output之后～123456// 获取输入与输出之间的连接AVCaptureConnection *connection = [videoOutput connectionWithMediaType:AVMediaTypeVideo];// 设置采集数据的方向connection.videoOrientation = AVCaptureVideoOrientationPortrait;// 设置镜像效果镜像connection.videoMirrored = YES; DemoLXFAudioVideo]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - 采集音视频及写入文件]]></title>
    <url>%2F2017%2F09%2F26%2FiOS-%E9%87%87%E9%9B%86%E9%9F%B3%E8%A7%86%E9%A2%91%E5%8F%8A%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[音视频采集包括两部分：视频采集和音频采集。在iOS中可以同步采集视频与音频，通过系统框架AVFoundation，可以帮助我们采集音频与视频，对于视频还可以进行切换前后摄像头，最终我们将录制好的视频写入沙盒中 + 音视频采集包括两部分：视频采集和音频采集。在iOS中可以同步采集视频与音频，通过系统框架AVFoundation，可以帮助我们采集音频与视频，对于视频还可以进行切换前后摄像头，最终我们将录制好的视频写入沙盒中 音视频数据的采集与展示一、初始化视频的输入与输出12345678// 懒加载一个session，所有的操作都需要session来执行fileprivate lazy var session: AVCaptureSession = AVCaptureSession()// 保存视频输出fileprivate var videoOutput: AVCaptureVideoDataOutput?// 保存视频输入fileprivate var videoInput: AVCaptureDeviceInput?// 保存预览图层fileprivate var previewLayer: AVCaptureVideoPreviewLayer? 设置视频输入源与输出源12345678910111213// 设置视频输入源guard let devices = AVCaptureDevice.devices() as? [AVCaptureDevice] else &#123; return &#125;// 获取我们的前置摄像头(后置为.back)guard let device = devices.filter(&#123; $0.position == .front &#125;).first else &#123; return &#125;guard let input = try? AVCaptureDeviceInput(device: device) else &#123; return &#125;self.videoInput = input// 设置视频输出源let output = AVCaptureVideoDataOutput()let queue = DispatchQueue.global()// 设置代理，并在代理中获取采集到的数据，需要遵守 AVCaptureVideoDataOutputSampleBufferDelegateoutput.setSampleBufferDelegate(self, queue: queue)self.videoOutput = output 设置音频的输入源与输出源123456789// 设置音频的输入源guard let device = AVCaptureDevice.defaultDevice(withMediaType: AVMediaTypeAudio) else &#123; return &#125;guard let input = try? AVCaptureDeviceInput(device: device) else &#123;return&#125;// 设置音频输出源let output = AVCaptureAudioDataOutput()let queue = DispatchQueue.global()// 需要遵守 AVCaptureAudioDataOutputSampleBufferDelegateoutput.setSampleBufferDelegate(self, queue: queue) 添加音频与视频的输入与输出到session中，但是每次添加之前需要先判断是否可以添加 123456789101112// 添加输入与输出// 注意：每次对session进行设置之前都需要调用session的【beginConfiguration】方法// 来告诉系统你现在要开始进行配置，结束配置后再调用【commitConfiguration】方法来提交配置session.beginConfiguration()if session.canAddInput(input) &#123; session.addInput(input)&#125;if session.canAddOutput(output) &#123; session.addOutput(output)&#125;session.commitConfiguration() 二、实现音视频的采集代理音视频虽然需要遵守的代理名称不一样，但是需要实现的方法是一致的，所以要拿到音频或者视频就得先进行判断，需要用到AVCaptureOutput的这个方法12345// This convenience method returns the first AVCaptureConnection in the receiver&apos;s// connections array that has an AVCaptureInputPort of the specified mediaType. If // no connection with the specified mediaType is found, nil is returned.open func connection(withMediaType mediaType: String!) -&gt; AVCaptureConnection! 123456789extension ViewController: AVCaptureVideoDataOutputSampleBufferDelegate, AVCaptureAudioDataOutputSampleBufferDelegate &#123; func captureOutput(_ captureOutput: AVCaptureOutput!, didOutputSampleBuffer sampleBuffer: CMSampleBuffer!, from connection: AVCaptureConnection!) &#123; if videoOutput?.connection(withMediaType: AVMediaTypeVideo) == connection &#123; print("视频数据") &#125; else &#123; print("音频数据") &#125; &#125;&#125; 三、初始化一个预览图层用来显示采集到的视频（非采集所必须的步骤）1234567// 创建预览图层guard let previewLayer = AVCaptureVideoPreviewLayer(session: session) else &#123;return&#125;previewLayer.frame = view.bounds// 将图层添加到控制器的view的layer中view.layer.insertSublayer(previewLayer, at: 0)self.previewLayer = previewLayer 现在基本功能都有了，如果想要开始采集音视频只需要调用1234// 开始录制session.startRunning()// 结束录制session.stopRunning() 切换镜头其实就是换掉当前的视频输入法制，这里的过程跟上面的设置输入源一样。123456789101112131415161718// 1.取出之前镜头的方向guard let videoInput = videoInput else &#123; return &#125;let position: AVCaptureDevicePosition = videoInput.device.position == .front ? .back : .frontguard let devices = AVCaptureDevice.devices() as? [AVCaptureDevice] else &#123; return &#125;guard let device = devices.filter(&#123; $0.position == position &#125;).first else &#123; return &#125;guard let newInput = try? AVCaptureDeviceInput(device: device) else &#123; return &#125;// 2.移除之前的input，添加新的inputsession.beginConfiguration()session.removeInput(videoInput)if session.canAddInput(newInput) &#123; session.addInput(newInput)&#125;session.commitConfiguration()// 3.保存最新的inputself.videoInput = newInput 录制视频写入文件1fileprivate var movieOutput: AVCaptureMovieFileOutput? 在开始采集音视频的时候就要开始写入文件 123456789101112131415161718// 开始写入文件 // 1、创建写入文件的输出let fileOutput = AVCaptureMovieFileOutput()self.movieOutput = fileOutput // 保存起来，用于停止写入文件// 设置类型，不然报错(这两句很重要)let connection = fileOutput.connection(withMediaType: AVMediaTypeVideo)connection?.automaticallyAdjustsVideoMirroring = trueif session.canAddOutput(fileOutput) &#123; session.addOutput(fileOutput)&#125;// 2、直接开始写入文件let filePath = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true).first! + "/abc.mp4"let fileUrl = URL(fileURLWithPath: filePath)fileOutput.startRecording(toOutputFileURL: fileUrl, recordingDelegate: self) 在停止采集音视频的时候停止写入文件 12// 停止写入文件movieOutput?.stopRecording() 详情请看 DEMO]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - LXFDrawBoard 多功能小画板]]></title>
    <url>%2F2017%2F09%2F25%2FiOS-LXFDrawBoard-%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%B0%8F%E7%94%BB%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[将LXFDrawBoard拖入项目中，导入头文件LXFDrawBoard.h，需要什么笔刷可以在Brush文件夹中找到即可使用，具体使用方法可以参考Demo+ LXFDrawBoard多功能小画板 GitHub: Demo Usage 将LXFDrawBoard拖入项目中，导入头文件LXFDrawBoard.h，需要什么笔刷可以在Brush文件夹中找到即可使用，具体使用方法可以参考Demo LXFDrawBoardDelegate 返回需要添加的描述 1- (NSString *)LXFDrawBoard:(LXFDrawBoard *)drawBoard textForDescLabel:(UILabel *)descLabel; 当添加或修改描述时调用 1- (void)LXFDrawBoard:(LXFDrawBoard *)drawBoard clickDescLabel:(UILabel *)descLabel; 笔刷2017–09-25 更新橡皮擦 LXFEraserBrush 铅笔 LXFPencilBrush 箭头 LXFArrowBrush 直线 LXFLineBrush 文本 LXFTextBrush 矩形 LXFRectangleBrush 马赛克 LXFMosaicBrush 撤销与反撤销]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>iOS项目</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - RxSwift 项目实战记录]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-RxSwift-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[最近刚刚把接手的OC项目搞定，经过深思熟虑后，本人决定下个项目起就使用Swift(学了这么久的Swift还没真正用到实际项目里。。。)，而恰巧RxSwift已经出来有一些时间了，语法也基本上稳定，遂只身前来试探试探这RxSwift，接着就做了个小Demo，有兴趣的同学可以瞧一瞧~ + 最近刚刚把接手的OC项目搞定，经过深思熟虑后，本人决定下个项目起就使用Swift(学了这么久的Swift还没真正用到实际项目里。。。)，而恰巧RxSwift已经出来有一些时间了，语法也基本上稳定，遂只身前来试探试探这RxSwift，接着就做了个小Demo，有兴趣的同学可以瞧一瞧~ 结构1234567891011121314151617.├── Controller│ └── LXFViewController.swift // 主视图控制器├── Extension│ └── Response+ObjectMapper.swift // Response分类，Moya请求完进行Json转模型或模型数组├── Model│ └── LXFModel.swift // 模型├── Protocol│ └── LXFViewModelType.swift // 定义了模型协议├── Tool│ ├── LXFNetworkTool.swift // 封装Moya请求│ └── LXFProgressHUD.swift // 封装的HUD├── View│ ├── LXFViewCell.swift // 自定义cell│ └── LXFViewCell.xib // cell的xib文件└── ViewModel └── LXFViewModel.swift // 视图模型 第三方库123456789101112RxSwift // 想玩RxSwift的必备库RxCocoa // 对 UIKit Foundation 进行 Rx 化NSObject+Rx // 为我们提供 rx_disposeBag Moya/RxSwift // 为RxSwift专用提供，对Alamofire进行封装的一个网络请求库ObjectMapper // Json转模型之必备良品RxDataSources // 帮助我们优雅的使用tableView的数据源方法Then // 提供快速初始化的语法糖Kingfisher // 图片加载库SnapKit // 视图约束库Reusable // 帮助我们优雅的使用自定义cell和view,不再出现OptionalMJRefresh // 上拉加载、下拉刷新的库SVProgressHUD // 简单易用的HUD 敲黑板Moya的使用Moya是基于Alamofire的网络请求库，这里我使用了Moya/Swift，它在Moya的基础上添加了对RxSwift的接口支持。接下来我们来说下Moya的使用 一、创建一个枚举，用来存放请求类型，这里我顺便设置相应的路径，等下统一取出来直接赋值即可123456789enum LXFNetworkTool &#123; enum LXFNetworkCategory: String &#123; case all = "all" case android = "Android" case ios = "iOS" case welfare = "福利" &#125; case data(type: LXFNetworkCategory, size:Int, index:Int)&#125; 二、为这个枚举写一个扩展，并遵循塄 TargetType，这个协议的Moya这个库规定的协议，可以按住Commond键+单击左键进入相应的文件进行查看1234567891011121314151617181920212223242526272829303132333435363738394041424344extension LXFNetworkTool: TargetType &#123; /// baseURL 统一基本的URL var baseURL: URL &#123; return URL(string: "http://gank.io/api/data/")! &#125; /// path字段会追加至baseURL后面 var path: String &#123; switch self &#123; case .data(let type, let size, let index): return "\(type.rawValue)/\(size)/\(index)" &#125; &#125; /// HTTP的请求方式 var method: Moya.Method &#123; return .get &#125; /// 请求参数(会在请求时进行编码) var parameters: [String: Any]? &#123; return nil &#125; /// 参数编码方式(这里使用URL的默认方式) var parameterEncoding: ParameterEncoding &#123; return URLEncoding.default &#125; /// 这里用于单元测试，不需要的就像我一样随便写写 var sampleData: Data &#123; return "LinXunFeng".data(using: .utf8)! &#125; /// 将要被执行的任务(请求：request 下载：upload 上传：download) var task: Task &#123; return .request &#125; /// 是否执行Alamofire验证，默认值为false var validate: Bool &#123; return false &#125;&#125; 三、定义一个全局变量用于整个项目的网络请求1let lxfNetTool = RxMoyaProvider&lt;LXFNetworkTool&gt;() 至此，我们就可以使用这个全局变量来请求数据了 RxDataSources如果你想用传统的方式也行，不过这就失去了使用RxSwift的意义。好吧，我们接下来说说如何优雅的来实现tableView的数据源。其实RxDataSources官网上已经有很明确的使用说明，不过我还是总结一下整个过程吧。 概念点RxDataSources是以section来做为数据结构来传输，这点很重要，可能很多同学会比较疑惑这句话吧，我在此举个例子，在传统的数据源实现的方法中有一个numberOfSection，我们在很多情况下只需要一个section，所以这个方法可实现，也可以不实现，默认返回的就是1，这给我们带来的一个迷惑点：【tableView是由row来组成的】，不知道在坐的各位中有没有是这么想的呢？？有的话那从今天开始就要认清楚这一点，【tableView其实是由section组成的】，所以在使用RxDataSources的过程中，即使你的setion只有一个，那你也得返回一个section的数组出去！！！ 一、自定义Section在我们自定义的Model中创建一个Section的结构体，并且创建一个扩展，遵循SectionModelType协议，实现相应的协议方法。约定俗成的写法呢请参考如下方式12345678910111213141516171819LXFModel.swiftstruct LXFSection &#123; // items就是rows var items: [Item] // 你也可以这里加你需要的东西，比如 headerView 的 title&#125;extension LXFSection: SectionModelType &#123; // 重定义 Item 的类型为 LXFModel typealias Item = LXFModel // 实现协议中的方式 init(original: LXFSection, items: [LXFSection.Item]) &#123; self = original self.items = items &#125;&#125; 二、在控制器下创建一个数据源属性 以下代码均在 LXFViewController.swift 文件中12// 创建一个数据源属性，类型为自定义的Section类型let dataSource = RxTableViewSectionedReloadDataSource&lt;LXFSection&gt;() 使用数据源属性绑定我们的cell12345678910// 绑定celldataSource.configureCell = &#123; ds, tv, ip, item in // 这个地方使用了Reusable这个库，在LXFViewCell中遵守了相应的协议 // 使其方便转换cell为非可选型的相应的cell类型 let cell = tv.dequeueReusableCell(for: ip) as LXFViewCell cell.picView.kf.setImage(with: URL(string: item.url)) cell.descLabel.text = "描述: \(item.desc)" cell.sourceLabel.text = "来源: \(item.source)" return cell&#125; 三、将sections序列绑定给我们的rows1output.sections.asDriver().drive(tableView.rx.items(dataSource:dataSource)).addDisposableTo(rx_disposeBag) 大功告成，接下来说说section序列的产生 ViewModel的规范我们知道MVVM思想就是将原本在ViewController的视图显示逻辑、验证逻辑、网络请求等代码存放于ViewModel中，让我们手中的ViewController瘦身。这些逻辑由ViewModel负责，外界不需要关心，外界只需要结果，ViewModel也只需要将结果给到外界，基于此，我们定义了一个协议LXFViewModelType 一、创建一个LXFViewModelType.swift123456789LXFViewModelType.swift// associatedtype 关键字 用来声明一个类型的占位符作为协议定义的一部分protocol LXFViewModelType &#123; associatedtype Input associatedtype Output func transform(input: Input) -&gt; Output&#125; 二、viewModel遵守LXFViewModelType协议 我们可以为XFViewModelType的Input和Output定义别名，以示区分，如：你这个viewModel的用于请求首页模块相关联的，则可以命名为：HomeInput 和 HomeOutput 我们可以丰富我们的 Input 和 Output 。可以看到我为Output添加了一个序列，类型为我们自定义的LXFSection数组，在Input里面添加了一个请求类型(即要请求什么数据，比如首页的数据) 我们通过 transform 方法将input携带的数据进行处理，生成了一个Output 注意： 以下代码为了方便阅读，进行了部分删减 12345678910111213141516171819202122232425262728293031323334353637383940LXFViewModel.swiftextension LXFViewModel: LXFViewModelType &#123; // 存放着解析完成的模型数组 let models = Variable&lt;[LXFModel]&gt;([]) // 为LXFViewModelType的Input和Output定义别名 typealias Input = LXFInput typealias Output = LXFOutput // 丰富我们的Input和Output struct LXFInput &#123; // 网络请求类型 let category: LXFNetworkTool.LXFNetworkCategory init(category: LXFNetworkTool.LXFNetworkCategory) &#123; self.category = category &#125; &#125; struct LXFOutput &#123; // tableView的sections数据 let sections: Driver&lt;[LXFSection]&gt; init(sections: Driver&lt;[LXFSection]&gt;) &#123; self.sections = sections &#125; &#125; func transform(input: LXFViewModel.LXFInput) -&gt; LXFViewModel.LXFOutput &#123; let sections = models.asObservable().map &#123; (models) -&gt; [LXFSection] in // 当models的值被改变时会调用，这是Variable的特性 return [LXFSection(items: models)] // 返回section数组 &#125;.asDriver(onErrorJustReturn: []) let output = LXFOutput(sections: sections) // 接下来的代码是网络请求，请结合项目查看，不然会不方便阅读和理解 &#125;&#125; 接着我们在ViewController中初始化我们的input，通过transform得到output，然后将我们output中的sections序列绑定tableView的items12345678LXFViewController.swift// 初始化inputlet vmInput = LXFViewModel.LXFInput(category: .welfare)// 通过transform得到outputlet vmOutput = viewModel.transform(input: vmInput)vmOutput.sections.asDriver().drive(tableView.rx.items(dataSource: dataSource)).addDisposableTo(rx_disposeBag) RxSwift中使用MJRefresh一、定义一个枚举LXFRefreshStatus，用于标志当前刷新状态12345678enum LXFRefreshStatus &#123; case none case beingHeaderRefresh case endHeaderRefresh case beingFooterRefresh case endFooterRefresh case noMoreData&#125; 二、在LXFOutput添加一个refreshStatus序列，类型为LXFRefreshStatus12// 给外界订阅，告诉外界的tableView当前的刷新状态let refreshStatus = Variable&lt;LXFRefreshStatus&gt;(.none) 我们在进行网络请求并得到结果之后，修改refreshStatus的value为相应的LXFRefreshStatus项 三、外界订阅output的refreshStatus 外界订阅output的refreshStatus，并且根据接收到的值进行相应的操作12345678910111213141516vmOutput.refreshStatus.asObservable().subscribe(onNext: &#123;[weak self] status in switch status &#123; case .beingHeaderRefresh: self?.tableView.mj_header.beginRefreshing() case .endHeaderRefresh: self?.tableView.mj_header.endRefreshing() case .beingFooterRefresh: self?.tableView.mj_footer.beginRefreshing() case .endFooterRefresh: self?.tableView.mj_footer.endRefreshing() case .noMoreData: self?.tableView.mj_footer.endRefreshingWithNoMoreData() default: break &#125;&#125;).addDisposableTo(rx_disposeBag) 四、output提供一个requestCommond用于请求数据 PublishSubject 的特点：即可以作为Observable，也可以作为Observer，说白了就是可以发送信号，也可以订阅信号12// 外界通过该属性告诉viewModel加载数据（传入的值是为了标志是否重新加载）let requestCommond = PublishSubject&lt;Bool&gt;() 在transform中，我们对生成的output的requestCommond进行订阅1234567891011121314output.requestCommond.subscribe(onNext: &#123;[unowned self] isReloadData in self.index = isReloadData ? 1 : self.index+1 lxfNetTool.request(.data(type: input.category, size: 10, index: self.index)).mapArray(LXFModel.self).subscribe(&#123; [weak self] (event) in switch event &#123; case let .next(modelArr): self?.models.value = isReloadData ? modelArr : (self?.models.value ?? []) + modelArr LXFProgressHUD.showSuccess("加载成功") case let .error(error): LXFProgressHUD.showError(error.localizedDescription) case .completed: output.refreshStatus.value = isReloadData ? .endHeaderRefresh : .endFooterRefresh &#125; &#125;).addDisposableTo(self.rx_disposeBag)&#125;).addDisposableTo(rx_disposeBag) 五、在ViewController中初始化刷新控件 为tableView设置刷新控件，并且在创建刷新控件的回调中使用output的requestCommond发射信号123456tableView.mj_header = MJRefreshNormalHeader(refreshingBlock: &#123; vmOutput.requestCommond.onNext(true)&#125;)tableView.mj_footer = MJRefreshAutoNormalFooter(refreshingBlock: &#123; vmOutput.requestCommond.onNext(false)&#125;) 总结流程： ViewController已经拿到output，当下拉加载数据的时候，使用output的requestCommond发射信息，告诉viewModel我们要加载数据 viewModel请求数据，在处理完json转模型或模型数组后修改models，当models的值被修改的时候会发信号给sections，sections在ViewController已经绑定到tableView的items了，所以此时tableView的数据会被更新。接着我们根据请求结果，修改output的refreshStatus属性的值 当output的refreshStatus属性的值改变后，会发射信号，由于外界之前已经订阅了output的refreshStatus，此时就会根据refreshStatus的新值来处理刷新控件的状态 好了，附上RxSwiftDemo。完结撒花]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
        <tag>RxSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 安装nginx 来搭建推流服务器]]></title>
    <url>%2F2017%2F09%2F12%2FUbuntu-%E5%AE%89%E8%A3%85nginx-%E6%9D%A5%E6%90%AD%E5%BB%BA%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[如果安装命令回车之后出现如下信息，请参考【Ubuntu “无法获得锁”解决方案】解决，但是我亲测对我没用，直接重启搞定 + 安装nginx安装两个依赖库12sudo apt-get install autoconf automakesudo apt-get install libpcre3 libpcre3-dev 安装zlib库12sudo apt-get install opensslsudo apt-get install libssl-dev 如果安装命令回车之后出现如下信息，请参考【Ubuntu “无法获得锁”解决方案】解决，但是我亲测对我没用，直接重启搞定12E: 无法获得锁 /var/lib/dpkg/lock - open (11: 资源暂时不可用)E: 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？ 进入家目录，新建一个文件夹，这里以lxf为例12cd ~mkdir lxf 下载所需源码1234// 下载nginx-rtmp源码wget https://github.com/arut/nginx-rtmp-module/archive/master.zip// 修改压缩包的名字mv master.zip module.zip 12// 下载nginxwget https://github.com/nginx/nginx/archive/master.zip 12// 下载nginx的依赖pcre源码wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz 下载完成之后使用unzip命令进行解压123unzip master.zip unzip module.ziptar -zxvf pcre-8.39.tar.gz 配置编译文件，准备编译安装12// 先进入nginx-master目录cd nginx-master/ 在nginx-master目录下有一个auto文件夹，里面有一个名为configure的配置文件，我们先来通过它进行一些配置123// prefix:指定安装目录// add-module:指定模块文件夹auto/configure --prefix=/usr/local/nginx --with-pcre=../pcre-8.39 --with-http_ssl_module --with-http_v2_module --with-http_flv_module --with-http_mp4_module --add-module=../nginx-rtmp-module-master/ 配置好之后会多出一个Makefile文件(一种配置文件，定义了一系列的规则来指定编译操作)与objs文件夹 1234// 编译make// 安装sudo make install 当你make后，看到则代表编译成功再执行【sudo make install】，看到这个则代表安装完成 现在我们去测试一下12 cd /usr/local/nginx/sbin/sudo ./nginx -t 看到successful说明配置文件正确！，如果是failed的话看看你是不是没加sudo 启动nginx服务器1sudo ./nginx 默认端口是80，所以直接到浏览器中直接敲入本地地址 127.0.0.1，显示【Welcome to nginx!】就代表nginx已经成功安装 配置nginx创建推流存放文件夹123// 为里以 /usr/local/var/www/hls 为例cd /usr/localsudo mkdir -p var/www/hls 进入nginx的conf目录，使用vim编辑nginx.conf文件12cd /usr/local/nginx/confsudo vim nginx.conf 配置Nginx，支持http协议拉流12345678location /hls &#123; types &#123; application/vnd.apple.mpegurl m3u8; video/mp2t ts; &#125; root /usr/local/var/www; add_header Cache-Control no-cache;&#125; 配置Nginx，支持rtmp协议推流123456789101112131415rtmp &#123; server &#123; listen 1935; application rtmplive &#123; live on; max_connections 1024; &#125; application hls&#123; live on; hls on; hls_path /usr/local/var/www/hls; hls_fragment 1s; &#125; &#125;&#125; 重启nginx服务器12cd /usr/local/nginx/sbin/sudo ./nginx -s reload 如果执行【sudo ./nginx -s reload】出现下面这个问题1nginx: [error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory) 就使用nginx -c的参数指定nginx.conf文件的位置，接着再reload一下就好了1sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf 我Ubuntu地址为192.168.123.191 推流至RTMP到服务器 rtmp://192.168.123.191:1935/rtmplive/lxf1ffmpeg -re -i 异形.契约.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.123.191:1935/rtmplive/lxf 推流至HLS到服务器 http://192.168.123.191/hls/lxf.m3u81ffmpeg -re -i 异形.契约.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.123.191:1935/hls/lxf 如果出现如下错误说明你的电脑没安装ffmpeg1-bash: ffmpeg: command not found 使用Homebrew来安装FFmpeg1234// 安装Homebrewruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"// 安装FFmpegbrew install ffmpeg 开始推流，终端上就开始不断的刷新推流信息 我们可以用电脑上的VLC这个软件来测试是否推流成功 OK，rmtp打开正常，hls就不演示了，一样的]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - 给高仿微信添加直播聊天功能]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-%E7%BB%99%E9%AB%98%E4%BB%BF%E5%BE%AE%E4%BF%A1%E6%B7%BB%E5%8A%A0%E7%9B%B4%E6%92%AD%E8%81%8A%E5%A4%A9%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[抽空给之前做的开源项目【高仿微信】添加直播功能，由于时间有限，做得不是很完美，有空再去完善吧，能用就好~~ + 抽空给之前做的开源项目【高仿微信】添加直播功能，由于时间有限，做得不是很完美，有空再去完善吧，能用就好~~ 在此提供存放于百度云的完整项目【高仿微信】- 百度云希望各位能在我的GitHub上献出一个宝贵的Star 【高仿微信】- GitHub谢谢 注意：直播功能的使用（对方需要先进入到对应的聊天界面） 两个测试账号： lxf lqr 密码都是123456 推流首先第一件事当然就是搭建一个推流服务器，这里请跳转参考我之前写好的文章吧【Ubuntu 安装nginx 来搭建推流服务器】，这里我的服务器的ip地址是：192.168.123.191 APP上推流我使用的是第三方的库 LFLiveKit，这个第三方库已经帮我们处理了很多事情，而且还包括美颜~~。当然，有时间我们还是要去了解一下底层的东西，这里就先不赘述，过几天抽空再做总结。 关键代码如下 123456789// 初始化配置let audioConfiguration = LFLiveAudioConfiguration.default()let videoConfiguration = LFLiveVideoConfiguration.defaultConfiguration(for: .low2, outputImageOrientation: .portrait)// 初始化sessionlet session = LFLiveSession(audioConfiguration: audioConfiguration, videoConfiguration: videoConfiguration)// 设置代理// session?.delegate = self// 设置展示的Viewsession?.preView = self.view 12345let stream = LFLiveStreamInfo()stream.url = "rtmp://192.168.123.191:1935/rtmplive/lxf"; // 服务器地址session.startLive(stream)// 开始推流session.running = true 拉流这里我使用的是B站的开源库 ijkplayer 为了方便可以用这个 编译好的B站开源库 需要注意的是：IJKPlayer默认使用的是软解码(FFMpeng)，如果需要使用硬解码需要我们进行相应的设置123456789101112// 设置"videotoolbox"的值为0为软解码(默认)，设置为1则是硬解码let options = IJKFFOptions.byDefault()options?.setOptionIntValue(1, forKey: "videotoolbox", of: kIJKFFOptionCategoryPlayer)let ijkPlayer = IJKFFMoviePlayerController(contentURLString: "rtmp://192.168.123.191:1935/rtmplive/lxf", with: options)// 需保存起来self.ijkPlayer = ijkPlayerijkPlayer?.view.frame = view.boundsview.addSubview(ijkPlayer!.view)// 准备播放，当视频准备好的时候会自动进行播放ijkPlayer?.prepareToPlay() 将IJKPlayer打包从B站的gitHub上下载的 ijkplayer 需要手动编译出来，跟着说明走就可以了，这里就不赘述咯，接下来我们将它打包，方便使用 如果你不跟着说明走的话会提示找不到 avformat.h 这个头文件 这时你需要在终端cd到ijkplayer这个目录，然后执行 init-ios.sh文件，如图 然后经过一段漫长的时间之后，在ios目录下就多出了这些ffmpeg相关的目录 这个操作是在下载ffmpeg源码，然缺失的avformat.h就在里面 打开项目 IJKMediaPlayer 设置为 release，这样打出来的包会小些 选择真机和模拟器，各Command+B编译一次 右击，Show in Finder 如图，就有两个文件夹，里面存放着的就是我们编译出来的库 可以使用如下命令查看信息1lipo -info IJKMediaFramework 默认模拟器编译出来的包是不支持i386，如果希望支持的话进入项目的 Build Settings，将 Build Active Architecture Only 设置为NO 好，现在对编译出来的包进行合并，这样就即支持真机，也支持模拟器1234// 格式// lipo -create path1 path2 -output frameNamelipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework 将合并出来的IJKMediaFramework替换 IJKMediaFramework.framework中的IJKMediaFramework，最后将替换好的 IJKMediaFramework.framework 拖入到项目中使用即可。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - 揭露Block的内部实现原理]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-%E6%8F%AD%E9%9C%B2Block%E7%9A%84%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[想必大家对block都很熟悉了，虽然都会用，但是你真的知道它的原理吗？比如为什么要加上__block，这个修饰符到底有什么用？不加会有什么后果？block又是如何实现的等等。。。该篇文章就为大家揭晓关于Block的实现原理~ + 想必大家对block都很熟悉了，虽然都会用，但是你真的知道它的原理吗？比如为什么要加上__block，这个修饰符到底有什么用？不加会有什么后果？block又是如何实现的等等。。。该篇文章就为大家揭晓关于Block的实现原理~ 抛砖引玉先给出问题，大家思考下结果吧，如果分别调用以下两个方法，结果如何？123456789void blockFunc1()&#123; int num = 100; void (^block)() = ^&#123; NSLog(@"num equal %d", num); &#125;; num = 200; block();&#125; 123456789void blockFunc2()&#123; __block int num = 100; void (^block)() = ^&#123; NSLog(@"num equal %d", num); &#125;; num = 200; block();&#125; 答案是12blockFunc1 : num equal 100blockFunc2 : num equal 200 是不是有人答错了？再来两个函数。这两个的结果与blockFunc2一样，打印出来的 num 为 20012345678910// 全局变量int num = 100;void blockFunc3()&#123; void (^block)() = ^&#123; NSLog(@"num equal %d", num); &#125;; num = 200; block();&#125; 123456789void blockFunc4()&#123; static int num = 100; void (^block)() = ^&#123; NSLog(@"num equal %d", num); &#125;; num = 200; block();&#125; 疑问：我们发现num做为局部变量时加上 _ _block 修饰符、num做为全局变量以及num为静态局部变量时在block中输出结果是一样的，皆为被修改之后的值，而做为局部变量并且未加上__block的num在block中输出的值却还是未赋值之前的值。这是为什么呢？探索这个问题我们就需要看看底层结构是如何实现的了 探索内部原理Objective-C是一个全动态语言，它的一切都是基于runtime实现的！在运行时会将OC转换成C，我们可以利用这个来查看关于block在内部是如何实现的新建一个Command Line Tool项目，将以上代码放入main.m中，如图 这里我们打开终端，cd到项目目录下，然后将用下面的命令将OC重写为C1clang -rewrite-objc main.m 这时我们可以发现当前目录下多了一个main.cpp文件，打开它并滚到最下面 这里我们可以看到blockFunc1的C语言实现方法 1234567void blockFunc1()&#123; int num = 100; void (*block)() = ((void (*)())&amp;__blockFunc1_block_impl_0((void *)__blockFunc1_block_func_0, &amp;__blockFunc1_block_desc_0_DATA, num)); num = 200; ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);&#125; 去掉类型转换123456789void blockFunc1()&#123; int num = 100; // *************************重点句*********************** void (*block)() = &amp;__blockFunc1_block_impl_0(__blockFunc1_block_func_0, &amp;__blockFunc1_block_desc_0_DATA, num)); // ***************************************************** num = 200; ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);&#125; 这里我们可以看到 block实际上是指向结构体的指针 该结构体为 我们来看下带__block的blockFunc2 在 blockFunc1 中，block指向了一个名为blockFunc1_block_impl_0的结构体，并且在初始化时输入了三个参数(blockFunc1_block_impl_0最后的flags有默认参数，所以可以不用传参)，第三个参数就是我们写的num，与blockFunc2相比较，这里的num并没有带*号，所以说在这里它只是传值而非传址，而下面的【num = 200;】也就没什么卵用了。这就是blockFunc2、blockFunc3与blockFunc4为什么能打印出num改变后的值，而blockFunc1不行的原因。 在这里我们也可以看出： 编译器会将block的内部代码生成对应的函数 SO 我们总结下，block在内部会作为一个指向结构体的指针，当调用block的时候其实就是根据block对应的指针找到相应的函数，进而进行调用，并传入自身 __block的实现我们再来看看 _ block， _block也被转换成了结构体，并含有5个变量1234567struct __Block_byref_num_0 &#123; void *__isa; // isa指针__Block_byref_num_0 *__forwarding; // 实例本身 int __flags; int __size; int num; // 我们的num值&#125;; 图片对应着blockFunc2中的 1__block int num = 100; 当创建num并用__block修饰的时候，会初始化这五个变量当我们执行1num = 200; 对应着1(num.__forwarding-&gt;num) = 200; 上面刚刚提到过 _ _forwarding是实例本身，即类型结构体__Block_byref_num_0的&amp;num，再找到对应的num变量，将其原来的100修改为200~~ 到此，关于Block内部实现的揭晓也就到此结束了，希望本文能让你对block有更深的理解，感谢你耐心的阅读！]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - Swift 面向协议编程（二）]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-Swift-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[上一篇文章iOS - Swift 面向协议编程（一） 已经对Swift的面向协议编程做了介绍，接下来该篇文章将使用面向协议开发(POP)来做下实际的应用 + 上一篇文章iOS - Swift 面向协议编程（一） 已经对Swift的面向协议编程做了介绍，接下来该篇文章将使用面向协议开发(POP)来做下实际的应用 在实际开发中，自定义View基本上是必须的，相信这对我们来说都是比较简单，不过我们还是来回顾一下下~ 面向对象开发1 新建一个UIView的FirstTypeView 2 创建一个View的xib文件3 设置xib对应的class进行绑定 4 在FirstTypeView.swift 中实现一个类方法，方便我们外部用xib来初始化FirstTypeView1234567891011import UIKitclass FirstTypeView: UIView &#123; &#125;extension FirstTypeView &#123; class func loadFromNib() -&gt; FirstTypeView &#123; return Bundle.main.loadNibNamed("\(self)", owner: nil, options: nil)?.first as! FirstTypeView &#125;&#125; 在外部只要调用FirstTypeView的loadFromNib方法就可以初始化一个View来使用了。好，现在又有一个类SecondTypeView，也是要求使用xib来初始化view。这时我们就会想，一样的加载xib的方法，那我们就把它抽取出来放到父类就可以了。这里的父类以BaseView.swift为例父类的主要实现代码12345extension BaseView &#123; class func loadFromNib() -&gt; BaseView &#123; return Bundle.main.loadNibNamed("\(self)", owner: nil, options: nil)?.first as! BaseView &#125;&#125; 那我们的FirstTypeView和SecondTypeView只需要直接继承于BaseView就可以了，在其它地方初始化view也很方便12345let firstView = FirstTypeView.loadFromNib()view.addSubview(firstView)let secondView = SecondTypeView.loadFromNib()view.addSubview(secondView) 好，现在FirstTypeView里声明了一个属性name，SecondTypeView声明的属性为age，假如我们现在要使用各自对应的属性，这时是直接点不出来的，需要先进行强转1234567let firstView = FirstTypeView.loadFromNib() as! FirstTypeViewfirstView.name = "LXF"view.addSubview(firstView)let secondView = SecondTypeView.loadFromNib() as! SecondTypeViewsecondView.age = 100view.addSubview(secondView) 但是这样觉得不是很方便，还需要进行强转，我们能不能在BaseView里面搞定它呢？如果是Swift 2.x 的话是可以的12345extension BaseView &#123; class func loadFromNib() -&gt; Self &#123; // 注意这里是大写的S return Bundle.main.loadNibNamed(&quot;\(self)&quot;, owner: nil, options: nil)?.first as! Self &#125;&#125; 但是现在Swift 3.0已经不支持这种写法了，会报错。这个时候如果使用面向协议的开发就很方便了。 面向协议开发 将BaseView删除，FirstTypeView和SecondTypeView改回继承于UIView 1 新建一个Swift文件 Nibloadable.swift 2 实现协议方法 协议中不允许定义类方法，需改为静态方法1234567891011import UIKitprotocol Nibloadable &#123; &#125;extension Nibloadable &#123; static func loadFromNib() -&gt; Self &#123; return Bundle.main.loadNibNamed(&quot;\(self)&quot;, owner: nil, options: nil)?.first as! Self &#125;&#125; 3 遵守协议123class SecondTypeView: UIView, Nibloadable &#123; var age: Int = 10&#125; 这样就可以了，而且你在调用loadFromNib方法时可以发现，类型是对应上的 好了，面向协议开发的应用就记录到这里，希望能帮助到大家！ Demo]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - Swift 面向协议编程（一）]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-Swift-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[传统的面向对象开发思维方式是将类中实现的相似方法抽取出来，接着放入一个Base类，然后继承于Base类后各个类即可找拥有相同的方法，不用再一个个手动实现。比如：一个Person类，一个Dog类，它们都拥有方法eat，那么就可以新建一个Animal类，将eat方法抽取出来放入其中，然后将Person类和Dog类都继承于Animal。但是，如果现在又有一个Robot类，也需要拥有eat方法，而此时也将其继承于Animal的话显然是不合理的，于是我们就需要转换思维，面向协议开发~ + OC无法做到面向协议开发，而Swift可以，因为Swift可以做到协议方法的具体实现，而OC不行 面向对象开发传统的面向对象开发思维方式是将类中实现的相似方法抽取出来，接着放入一个Base类，然后继承于Base类后各个类即可找拥有相同的方法，不用再一个个手动实现。比如：一个Person类，一个Dog类，它们都拥有方法eat，那么就可以新建一个Animal类，将eat方法抽取出来放入其中，然后将Person类和Dog类都继承于Animal。但是，如果现在又有一个Robot类，也需要拥有eat方法，而此时也将其继承于Animal的话显然是不合理的，于是我们就需要转换思维，面向协议开发~ 面向协议开发面向协议开发的核心是： 模块化（组件化） 我们先来回顾下协议的一般使用，新建一个Swift文件LXFProtocol.swift12345import Foundationprotocol LXFProtocol &#123; func eat()&#125; 我们的Person类遵守协议LXFProtocol，需要我们实现协议中的方法，如：12345class Person: NSObject, LXFProtocol &#123; func eat() &#123; // &#125;&#125; 那我们每个类都这样做的话跟直接复制粘贴代码并没什么不同~~而开头已经提到一点： Swift可以做到协议方法的具体实现 那么现在，我们新建一个Swift文件Eatable.swift，以区分LXFProtocol.swiftEatable.swift中的代码实现如下：1234567891011import Foundationprotocol Eatable &#123; // 可声明变量&#125;extension Eatable &#123; func eat() &#123; // 实现具体的功能 &#125;&#125; 有2个注意点 protocol中可以声明变量，方便在协议方法中使用 协议方法的具体实现需要在extension中来实现 使Dog类遵守Eatable123class Dog: NSObject, Eatable &#123;&#125; 这样我们就可以在其它地方轻松调用dog的eat方法，Person类与Robot类也是如法炮制 至此，我们就可以通过面向协议的方式给类定制不同的功能，也就是模块化。可以发现Swift的面向协议编程跟c++的多继承很相似 约束现在的这个Eatable协议是可以被任意遵守的，如果我们有这么个需求，我们创建的协议只是被UIViewController遵守，那我们该怎么做呢？【当然，Eatable协议只能被UIViewController遵守很扯淡，这里只是举例，不要太在意咯~~】 在 extension 后面加上约束关键字【where】，并注明该协议只能被UIViewController这个类（包括子类）所遵守，而且此时我们还可以拿到遵守该协议的控制器的view 123456789101112//import Foundationimport UIKitprotocol Eatable &#123; &#125;extension Eatable where Self : UIViewController &#123; func eat() &#123; view.backgroundColor = UIColor.red &#125;&#125; Demo接下来以一个实际应用来巩固下吧 iOS - Swift 面向协议编程（二）]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - Swift 高仿微信]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-Swift-%E9%AB%98%E4%BB%BF%E5%BE%AE%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[从2016年12月份开始做到现在，虽说这个项目看起来不大，但是锻炼人的地方还真是很多的，微信通讯录联系人的按拼音排序，自定义表情键盘中遇到的分页滚动，微信聊天界面的图片显示、语音信息的动画等。挑战着各种各样的需求，本人也将遇到的问题的解决方案做了记录并整理了一下，希望能给iOS程序员同胞们带来帮助。目前基本的聊天已完成，实现了一部分个人信息的修改，功能我会尽快完善的！ + LXFWeChatSwift 3.0 高仿微信 两个测试账号： lxf lqr 密码都是123456 源码地址码云http://git.oschina.net/LinXunFeng/LXFWeChat GitHubhttps://github.com/LinXunFeng/LXFWeChat 在此提供存放于百度云的完整项目【高仿微信】- 百度云希望各位能在我的项目上献出一个宝贵的Star谢谢 从2016年12月份开始做到现在，虽说这个项目看起来不大，但是锻炼人的地方还真是很多的，微信通讯录联系人的按拼音排序，自定义表情键盘中遇到的分页滚动，微信聊天界面的图片显示、语音信息的动画等。挑战着各种各样的需求，本人也将遇到的问题的解决方案做了记录并整理了一下，希望能给iOS程序员同胞们带来帮助。目前基本的聊天已完成，实现了一部分个人信息的修改，功能我会尽快完善的！ 模仿微信的导航栏在navigationBar底部添加一个添加了渐变层的view1234567891011121314151617let blurBackView = UIView()blurBackView.frame = CGRect(x: 0, y: -20, width: kScreenW, height: 64)let gradintLayer = CAGradientLayer()gradintLayer.frame = CGRect(x: 0, y: 0, width: kScreenW, height: 64)gradintLayer.colors = [ UIColor.hexInt(0x040012).withAlphaComponent(0.76).cgColor, UIColor.hexInt(0x040012).withAlphaComponent(0.28).cgColor]gradintLayer.startPoint = CGPoint(x: 0, y: 0)gradintLayer.endPoint = CGPoint(x: 0, y: 1.0)blurBackView.layer.addSublayer(gradintLayer)blurBackView.isUserInteractionEnabled = falseblurBackView.alpha = 0.5// 设置导航栏样式navigationBar.barStyle = .blacknavigationBar.insertSubview(blurBackView, at: 0) 表情面板和更多面板遇到的问题总结了一下，可以参考下以下总结的文章 《iOS - Swift UICollectionView横向分页滚动，cell左右排版》 《iOS - Swift UICollectionView横向分页的问题》 聊天界面《iOS - Swift 仿微信聊天图片显示》 《iOS - Swift UITableView的scrollToRow的”坑”》 《iOS - Swift UIButton中ImageView的animationImages动画执行完毕后，图标变暗》 首页《iOS - Swift 仿微信小红点(无数字)》 目前完成的功能微信界面 显示右上角的菜单 显示最近联系人 最近联系人信息未读数的显示 通讯录界面 联系人的排序 联系人总数显示 发现界面 动态小红点的显示 购物选项的链接跳转 我界面 个人头像的上传与设置，及头像的保存 我的二维码界面的显示及二维码的保存 聊天界面 小视频的录制与发送 小视频的播放 聊天时间 图片的发送与显示 未发送成功的重发功能 语音的录制与发送 语音的播放动态效果 已知BUG 小视频和图片发送出去后不能立即更新显示缩略图 更换头像模拟器测试正常，真机无效。。 2017-07-24 更新抽空出来添加了一个简单的直播功能（对方需要先进入到对应的聊天界面）相关博文：iOS - 给高仿微信添加直播聊天功能需要用到编译好的B站开源库ijkplayer ，由于打包好的文件太大，传不上来，所以需要各位去自己编译集成进去。 效果图动态图 静态图]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>iOS项目</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - ARC与MRC的单例设计模式]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-ARC%E4%B8%8EMRC%E7%9A%84%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[单例设计模式(Singleton) 就是保证某个类创建出来的对象从始到终只有一个的一种方案 + 单例设计模式(Singleton)定义就是保证某个类创建出来的对象从始到终只有一个的一种方案 作用 节省内存开销 保证整个程序中使用同一份资源 实现首先将我们的环境设置为非ARC环境，即MRC，如图 在MRC模式下，我们得自己手动释放资源，所以得重写一些与资源创建与释放相关的方法，以保证单例对象的唯一。 新建一个继承于NSObject的类 LXFFileTool，我直接上代码，并写上注释LXFFileTool.h123@interface LXFFileTool : NSObject+ (instancetype)sharedFileTool;@end LXFFileTool.m12345678910111213141516171819202122232425262728293031323334353637383940414243#import "LXFFileTool.h"@implementation LXFFileToolstatic LXFFileTool *_fileTools = nil;/** * alloc方法内部会调用allocWithZone: * @param zone 系统分配给app的内存 */+ (instancetype)allocWithZone:(struct _NSZone *)zone &#123; if (_fileTools == nil) &#123; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; // 安全(这个代码只会被调用一次) _fileTools = [super allocWithZone:zone]; &#125;); &#125; return _fileTools;&#125;- (oneway void)release &#123; // 在allocWithZone中使用了GCD令创建对象的代码只执行一次，如果_fileTools被释放则无法再创建 // 重写release方法，防止_fileTools被释放&#125;// 重写retain方法- (instancetype)retain &#123; return self;&#125;// 重写retainCount锁定引用计数- (NSUInteger)retainCount &#123; return 1;&#125;// 重写init方法，防止单例所拥有的属性值被重置// 让初始化的方法只能执行一次，自然属性值就没有机会被重置- (instancetype)init &#123; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; _fileTools = [super init]; // init会先调用alloc方法 &#125;); return _fileTools;&#125;// 仿造系统的单例创建方式，提供类方法+ (instancetype)sharedFileTool &#123; // 由于我们已经重写了init方法保证了单例对象的唯一了，所以这里直接调用init方法即可。 return [[self alloc] init];&#125;@end MRC下就是这样，我们的目的就是只能创建和初始化一次对象，不给机会释放，也不给机会重新初始化，从而保证了该对象的唯一。 那现在来看看ARC下是如何实现单例的吧。其实ARC下与MRC的区别就是ARC下我们不用自己再手动去释放资源了，从而使代码上大同小异，如下所示。123456789101112131415161718192021222324#import "LXFFileTool.h"@implementation LXFFileToolstatic LXFFileTool *_fileTools = nil;+ (instancetype)allocWithZone:(struct _NSZone *)zone &#123; if (_fileTools == nil) &#123; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; _fileTools = [super allocWithZone:zone]; &#125;); &#125; return _fileTools;&#125;- (instancetype)init &#123; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; _fileTools = [super init]; &#125;); return _fileTools;&#125;+ (instancetype)sharedFileTool &#123; return [[self alloc] init];&#125; 批量创建单例 现在我们已经知道了ARC与MRC下分别是如何创建单例的了，但是如果我们一个项目里需要多个单例，那我们只能把代码复制粘贴再改改就完事吗？这未免也太麻烦了吧。那我们能不能做到快速且方便的创建单例对象呢？可以的，利用宏 首先先说下一些关于宏的知识吧 使用 #define 关键字来定义宏 宏定义只能是单行的，不能换行 那现在来讨论下一些疑惑吧，你说宏只能单行，可是创建单例的代码可是有很多行呀！还有我们如何做到自定义类方法名(就是 sharedXXX )？好，我们来介绍下宏下的两个特殊符号 宏的特殊符号  作用 \ 用来转译换行符，即屏蔽换行符 ## 将两个相邻的标记(token)连接为一个单独的标记 想了解其它关于宏的预处理命令可以自行百度参考”C语言的预处理命令” 简单来说，\用于取消换行，##用来连接，而我们就用##来实现自定义类方法名 创建一个头文件Singleton.h用来存放宏定义先来看看定义.h中 sharedXXX 是如何通过宏来定义的12// .h文件的实现#define SingletonH(methodName) + (instancetype)shared##methodName; 现在回到LXFFileTool.h中，直接一行定义sharedFileTool这个类方法1234#import "Singleton.h"@interface LXFFileTool : NSObjectSingletonH(FileTool)@end 我们只需要将方法名FileTool传入SingletonH()中就可以拼接为sharedFileTool 那现在再来看看定义.m中创建单例的方式，以ARC为例1234567891011121314151617181920212223#define SingletonM(methodName) \static id _instance = nil; \+ (instancetype)allocWithZone:(struct _NSZone *)zAone &#123; \ if (_instance == nil) &#123; \ static dispatch_once_t onceToken; \ dispatch_once(&amp;onceToken, ^&#123; \ _instance = [super allocWithZone:zone]; \ &#125;); \ &#125; \ return _instance; \&#125; \\- (instancetype)init &#123; \ static dispatch_once_t onceToken; \ dispatch_once(&amp;onceToken, ^&#123; \ _instance = [super init]; \ &#125;); \ return _instance; \&#125; \\+ (instancetype)shared##methodName &#123; \ return [[self alloc] init]; \&#125; 在每一个行后面加上(反斜杠)取消换行，使用##来拼接传入的方法名，但还有一点需要注意：最后一行不能加反斜杠 回到LXFFileTool.m中，一行实现创建单例1234#import "LXFFileTool.h"@implementation LXFFileToolSingletonM(FileTool)@end 好，现在还有一个问题，就是如果我的项目中有个别文件是需要MRC环境的，那我该怎么办才能让创建单例也是如此简单呢？很简单，加个判断就好了，大致判断如下，详情看文章最后附上的Demo12345#if __has_feature(objc_arc) // ARC// 写上ARC下的定义代码#else // 非ARC// 写上MRC下的定义代码#endif 好了，现在用起来是不是方便多了？我们只要创建一个类，然后在.h文件中写SingletonH(XXX)，再在.m文件中写SingletonM(XXX)就可以实现单例了~ 指定环境顺便提下如何在MRC下指定某个类文件使用的环境为ARC如图，可以在 Build Phases -&gt; Compile Sources 中双击某个需要ARC环境的类文件，然后写上 1-fobjc-arc 如果是指定MRC，则写上1-fno-objc-arc Demo最后，附上Demo: LXFSingleton]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - Swift UIButton中ImageView的animationImages动画执行完毕后，图标变暗]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-Swift-UIButton%E4%B8%ADImageView%E7%9A%84animationImages%E5%8A%A8%E7%94%BB%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%E5%90%8E%EF%BC%8C%E5%9B%BE%E6%A0%87%E5%8F%98%E6%9A%97%2F</url>
    <content type="text"><![CDATA[查看官方文档的说明 当该属性设置为true时，按钮在高亮状态下，图片会绘制成高亮（前提是没有手动设置高亮图片）。并且该值的默认值为true所以我们也可以将属性adjustsImageWhenHighlighted设置为false，不让系统自动帮我们设置高亮状态下显示的图片即可。 + 情况贴出重要代码 123456// 设置按钮图片动画数组voiceButton.imageView?.animationImages = [ #imageLiteral(resourceName: "message_voice_sender_playing_1"), #imageLiteral(resourceName: "message_voice_sender_playing_2"), #imageLiteral(resourceName: "message_voice_sender_playing_3")] 12// 开始动画voiceButton.imageView?.startAnimating() 12// 停止动画voiceButton.imageView?.stopAnimating() 原因这个按钮在结束动画之后之所以会变暗，是因为它在动画结束之后自动显示为高亮图片，不信？那只好上证据了~12// 设置语音按钮的高亮图片voiceButton.setImage(#imageLiteral(resourceName: "message_voice_sender_normal"), for: .highlighted) 那知道原因之后就很好解决了 解决方案方案一：设置按钮的高亮图片将按钮的高亮图片与普通状态下的一致即可。这里就再赘述了 方案二：adjustsImageWhenHighlighted = false在UIButton中有这么一个属性1adjustsImageWhenHighlighted 查看官方文档的说明当该属性设置为true时，按钮在高亮状态下，图片会绘制成高亮（前提是没有手动设置高亮图片）。并且该值的默认值为true所以我们也可以将属性adjustsImageWhenHighlighted设置为false，不让系统自动帮我们设置高亮状态下显示的图片即可。 效果 附上相关项目：Swift 3.0 高仿微信]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift 3.0 高仿喜马拉雅FM]]></title>
    <url>%2F2017%2F09%2F12%2FSwift-3-0-%E9%AB%98%E4%BB%BF%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85FM%2F</url>
    <content type="text"><![CDATA[基于Swift 3.0 编写而成,运行环境要求: Xcode 8.0 + 高仿喜马拉雅FMgitHub: https://github.com/LinXunFeng/LXFFM 说明基于Swift 3.0 编写而成,运行环境要求: Xcode 8.0 LXFFM原OC版: https://github.com/Eastwu5788/XMLYFM从原版作者的源代码上学到了很多,十分感谢.由于只是本人OC转Swift的试练项目,所以有些内容并没有实现,哈哈 效果图]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - Swift UITableView的scrollToRow的坑]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-Swift-UITableView%E7%9A%84scrollToRow%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[今天鄙人使用SnapKit来布局cell，然后用scrollToRow来滚到底部就遇到了一个很奇葩的现象。我设置了在键盘弹出后聊天消息列表会自动滚到底部。1.随便输入一条消息，点发送后，在聊天消息列表中并没有滚到最新消息那一行。2.退出键盘不做任何操作再打开键盘也是滚到刚才那里(即最新消息的上一条所在位置)3.只有在退出键盘后把聊天消息列表的消息向上拉一点距离露出最新消息所在的cell之后，再点击才有用 + 简介在tableView中，我们一般会用到scrollToRow这个来控制tableView滚到指定的某一行。一般写法如下所示123456// MARK: 滚到底部func scrollToBottom(animated: Bool = false) &#123; if dataArr.count &gt; 0 &#123; tableView.scrollToRow(at: IndexPath(row: dataArr.count - 1, section: 0), at: .bottom, animated: animated) &#125;&#125; 情况今天鄙人使用SnapKit来布局cell，然后用scrollToRow来滚到底部就遇到了一个很奇葩的现象。我设置了在键盘弹出后聊天消息列表会自动滚到底部。1.随便输入一条消息，点发送后，在聊天消息列表中并没有滚到最新消息那一行。2.退出键盘不做任何操作再打开键盘也是滚到刚才那里(即最新消息的上一条所在位置)3.只有在退出键盘后把聊天消息列表的消息向上拉一点距离露出最新消息所在的cell之后，再点击才有用 分析在无奈之下，经过了一步步的探索，终于发现了问题的所在首先我们要了解一下scrollToRow执行后会调用哪些函数及顺序会调用这两个方法1func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell 1func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&gt; CGFloat 步骤一我在 heightForRow 中写了具体的数据，也就是把高度写死，不再是动态获取。接着执行程序得到如下结果比如我原本有10条数据，现在加入了一条后执行了scrollToRow，它会1.先调用 heightForRow 11次，即包括最新加入的那一条2.然后再调用 cellForRow3.最后在调一次 heightForRow后面的2和3是针对最新消息的 步骤二我在 heightForRow 中不再写死高度，而是从模型数据中动态获取高度(高度是在cell布局后获取的，再赋值到模型数据中的cellHeight变量)1执行程序得到这个结果：调用 heightForRow 11次，然后就没了 好吧，问题就出现在对heightForRow的第11次调用，前10次都有返回具体的高度，而最后一次是0~。 结论现在清楚了，要想在调用 scrollToRow 到指定的那一行，前提条件是那一行的高度不能为0。所以在上面的情况中，发送完消息后，最新消息的cell的确是插入到了tableView，也有显示出来(后面我自己测的)，但就是无法滚到最新消息那一行，就是因为 heightForRow 返回的高度为0在上面的情况中，向上拉一点距离露出cell后scrollToRow才有效就是因为此时heightForRow返回的高度不再为0 解决方案按本人自身的情况来说，有两种解决方法 第一种在传入的模型数据中给予明确计算出来的数值就好。 第二种我使用SnapKit来自动布局cell的位置然后再来获取高度，这做法主要就是为了避免运算。所以我不选用第一种解决方法好了，方法如下：1234// dataArr是用来存放模型的数组let indexPath = IndexPath(row: dataArr.count - 1, section: 0)// 调用tableView的数据源办法_ = self.tableView(tableView, cellForRowAt: indexPath) 在插入最新消息后，调用tableView的数据源方法来让它先对cell进行布局，这样就获取到了cell的高度，然后再执行 scrollToRow 就好了。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - Swift 仿微信聊天图片显示]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-Swift-%E4%BB%BF%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[其实原理比较简单，准备一张图片MaskImgae，先对其进行拉伸，然后按照其轮廓对图片进行裁剪就行了 + 效果图如图所示，图片左侧有个小箭头 原理其实原理比较简单，准备一张图片MaskImgae，先对其进行拉伸，然后按照其轮廓对图片进行裁剪就行了 步骤这里摘重点说，布局什么的按自己意愿去弄吧。我固定了图片的显示大小为 102 * 152 1、对MaskImgae进行拉伸123456// 设置拉伸范围let stretchInsets = UIEdgeInsetsMake(30, 28, 23, 28)// 待拉伸的图片let stretchImage = UIImage(named: "SenderImageNodeMask")// 进行拉伸let bubbleMaskImage = stretchImage.resizableImage(withCapInsets: stretchInsets, resizingMode: .stretch) 拉伸的效果如图 2、对imageView设置裁剪区域这里我的 imageView 叫 chatImgView上面的拉伸效果图是临时把拉伸好的图片赋值给了chatImgView，只是为了给大家看到效果而已，各位看官如果有赋值请记得改回来~~ 好，下面进行裁剪12345678910111213141516// 新建一个图层let layer = CALayer()// 设置图层显示的内容为拉伸过的MaskImgaelayer.contents = bubbleMaskImage.cgImage// 设置拉伸范围(注意：这里contentsCenter的CGRect是比例（不是绝对坐标）)layer.contentsCenter = self.CGRectCenterRectForResizableImage(bubbleMaskImage)// 设置图层大小与chatImgView相同layer.frame = CGRect(x: 0, y: 0, width: 102, height: 152)// 设置比例layer.contentsScale = UIScreen.main.scale// 设置不透明度layer.opacity = 1// 设置裁剪范围self.chatImgView.layer.mask = layer// 设置裁剪掉超出的区域self.chatImgView.layer.masksToBounds = true 12345678910func CGRectCenterRectForResizableImage(_ image: UIImage) -&gt; CGRect &#123; // LXFLog("\(image.capInsets)") // 这里的image.capInsets就是UIEdgeInsetsMake(30, 28, 23, 28) return CGRect( x: image.capInsets.left / image.size.width, y: image.capInsets.top / image.size.height, width: (image.size.width - image.capInsets.right - image.capInsets.left) / image.size.width, height: (image.size.height - image.capInsets.bottom - image.capInsets.top) / image.size.height )&#125; 这样就完成了 解释一下下UIEdgeInsetsMakeMaskImgae 的大小为 56 * 5012// UIEdgeInsetsMake(top: CGFloat, left: CGFloat, bottom: CGFloat, right: CGFloat)UIEdgeInsetsMake(30, 28, 23, 28) 红色范围就是要拉伸的范围(随手一扣，不太准确，意思意思下就好了~~) contentsCenter这是对某个区域进行全面拉伸，如果不设置的话默认值为1CGRect(x: 0, y: 0, width: 1, height: 1) 就是直接进行缩放那我们先来看看，如果不对contentsCenter这个值进行设置会是什么效果我们来看下官方解释 1234var contentsCenter: CGRect &#123; get set &#125;Description The rectangle that defines how the layer contents are scaledif the layer’s contents are resized. Animatable. 翻译：如果图层的内容是重新设置了尺寸的，那定义的这个矩形(contentsCenter)是为了告诉图层，图层的内容是如何被缩放的 那明了，我们的图片是被拉伸后再绘制到layer上的，为了正确显示我们的图片，我们得告诉layer它是怎么被进行拉伸的。是的，就是下面代码所指定的范围1UIEdgeInsetsMake(30, 28, 23, 28) 但是，正如上面提到过的，contentsCenter所要赋值的CGRect是比例，不是绝对坐标，所以现在我们得通过(30, 28, 23, 28)获取比例值，转换方法已经在上面给出了，就是CGRectCenterRectForResizableImage我们来打印下 image.capInsets的内容12345LXFLog("\(image.capInsets)")LXFLog("\(image.capInsets.top)")LXFLog("\(image.capInsets.bottom)")LXFLog("\(image.capInsets.left)")LXFLog("\(image.capInsets.right)") 打印结果12345UIEdgeInsets(top: 30.0, left: 28.0, bottom: 23.0, right: 28.0)30.023.028.028.0 好，现在结合 下面的图 与 CGRectCenterRectForResizableImage 方法中的代码就很明确比例是怎么取到的了 附上相关项目：Swift 3.0 高仿微信]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - Swift UICollectionView横向分页的问题]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-Swift-UICollectionView%E6%A8%AA%E5%90%91%E5%88%86%E9%A1%B5%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[有两种方式可以解决，数据只有11个，要分两页需要16个，那我们可以直接添加数据到16个，然后在dataSource中返回cell时进行判断及处理即可。不过对于现在来说太小题大做了，我选第二种方式~ + UICollectionView横向分页的问题情况直接看图已经设置collectionView的isPagingEnabled为true了，可是出现了这种情况，原因就是collectionView的contentSize不够。 12345678&lt;UICollectionView: 0x7fc565076000; frame = (0 0; 375 197); clipsToBounds = YES; gestureRecognizers = &lt;NSArray: 0x6180000557e0&gt;; layer = &lt;CALayer: 0x61000022a5a0&gt;; contentOffset: &#123;187.5, 0&#125;; contentSize: &#123;562.5, 192.25&#125;&gt; 解决方案有两种方式可以解决，数据只有11个，要分两页需要16个，那我们可以直接添加数据到16个，然后在dataSource中返回cell时进行判断及处理即可。不过对于现在来说太小题大做了，我选第二种方式~ 直接修改contentSize我自定义了一个继承于UICollectionViewFlowLayout的Layout(LXFChatMoreCollectionLayout)，让UICollectionView在创建的时候使用了它 在 LXFChatMoreCollectionLayout.swift 中我们需要重写父类的collectionViewContentSize，将contentSize取出来修改为我们自己创建的newSize就可以了代码如下1234567override var collectionViewContentSize: CGSize &#123; let size: CGSize = super.collectionViewContentSize let collectionViewWidth: CGFloat = self.collectionView!.frame.size.width let nbOfScreen: Int = Int(ceil(size.width / collectionViewWidth)) let newSize: CGSize = CGSize(width: collectionViewWidth * CGFloat(nbOfScreen), height: size.height) return newSize&#125; 注：ceil函数的作用是求不小于给定实数的最小整数。ceil(2)=ceil(1.2)=cei(1.5)=2.00 效果 至于如何让item水平布局，请参考《iOS - Swift UICollectionView横向分页滚动，cell左右排版》 附上相关项目：Swift 3.0 高仿微信]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - Swift UICollectionView横向分页滚动，cell左右排版]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-Swift-UICollectionView%E6%A8%AA%E5%90%91%E5%88%86%E9%A1%B5%E6%BB%9A%E5%8A%A8%EF%BC%8Ccell%E5%B7%A6%E5%8F%B3%E6%8E%92%E7%89%88%2F</url>
    <content type="text"><![CDATA[最近在做表情键盘时遇到一个问题，我用UICollectionView来布局表情，使用横向分页滚动，但在最后一页出现了如图所示的情况 + 情况最近在做表情键盘时遇到一个问题，我用UICollectionView来布局表情，使用横向分页滚动，但在最后一页出现了如图所示的情况 情况分析图是的，现在的item分布就是这个鬼样子现在想要做的，就是将现在这个鬼样子变成另外一种样子，如图那怎么办？只好重新布局item了 解决方案我是自定了一个Layout(LXFChatEmotionCollectionLayout)，让UICollectionView在创建的时候使用了它 在 LXFChatEmotionCollectionLayout.swift 中 添加一个属性来保存所有item的attributes12// 保存所有item的attributesfileprivate var attributesArr: [UICollectionViewLayoutAttributes] = [] 重新布局12345678910111213141516171819202122232425262728293031323334353637// MARK:- 重新布局override func prepare() &#123; super.prepare() let itemWH: CGFloat = kScreenW / CGFloat(kEmotionCellNumberOfOneRow) // 设置itemSize itemSize = CGSize(width: itemWH, height: itemWH) minimumLineSpacing = 0 minimumInteritemSpacing = 0 scrollDirection = .horizontal // 设置collectionView属性 collectionView?.isPagingEnabled = true collectionView?.showsHorizontalScrollIndicator = false collectionView?.showsVerticalScrollIndicator = true let insertMargin = (collectionView!.bounds.height - 3 * itemWH) * 0.5 collectionView?.contentInset = UIEdgeInsetsMake(insertMargin, 0, insertMargin, 0) /// 重点在这里 var page = 0 let itemsCount = collectionView?.numberOfItems(inSection: 0) ?? 0 for itemIndex in 0..&lt;itemsCount &#123; let indexPath = IndexPath(item: itemIndex, section: 0) let attributes = UICollectionViewLayoutAttributes(forCellWith: indexPath) page = itemIndex / (kEmotionCellNumberOfOneRow * kEmotionCellRow) // 通过一系列计算, 得到x, y值 let x = itemSize.width * CGFloat(itemIndex % Int(kEmotionCellNumberOfOneRow)) + (CGFloat(page) * kScreenW) let y = itemSize.height * CGFloat((itemIndex - page * kEmotionCellRow * kEmotionCellNumberOfOneRow) / kEmotionCellNumberOfOneRow) attributes.frame = CGRect(x: x, y: y, width: itemSize.width, height: itemSize.height) // 把每一个新的属性保存起来 attributesArr.append(attributes) &#125;&#125; 返回所有当前可见的Attributes123456789override func layoutAttributesForElements(in rect: CGRect) -&gt; [UICollectionViewLayoutAttributes]? &#123; var rectAttributes: [UICollectionViewLayoutAttributes] = [] _ = attributesArr.map(&#123; if rect.contains($0.frame) &#123; rectAttributes.append($0) &#125; &#125;) return rectAttributes&#125; 大功告成 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import UIKitlet kEmotionCellNumberOfOneRow = 8let kEmotionCellRow = 3class LXFChatEmotionCollectionLayout: UICollectionViewFlowLayout &#123; // 保存所有item fileprivate var attributesArr: [UICollectionViewLayoutAttributes] = [] // MARK:- 重新布局 override func prepare() &#123; super.prepare() let itemWH: CGFloat = kScreenW / CGFloat(kEmotionCellNumberOfOneRow) // 设置itemSize itemSize = CGSize(width: itemWH, height: itemWH) minimumLineSpacing = 0 minimumInteritemSpacing = 0 scrollDirection = .horizontal // 设置collectionView属性 collectionView?.isPagingEnabled = true collectionView?.showsHorizontalScrollIndicator = false collectionView?.showsVerticalScrollIndicator = true let insertMargin = (collectionView!.bounds.height - 3 * itemWH) * 0.5 collectionView?.contentInset = UIEdgeInsetsMake(insertMargin, 0, insertMargin, 0) var page = 0 let itemsCount = collectionView?.numberOfItems(inSection: 0) ?? 0 for itemIndex in 0..&lt;itemsCount &#123; let indexPath = IndexPath(item: itemIndex, section: 0) let attributes = UICollectionViewLayoutAttributes(forCellWith: indexPath) page = itemIndex / (kEmotionCellNumberOfOneRow * kEmotionCellRow) // 通过一系列计算, 得到x, y值 let x = itemSize.width * CGFloat(itemIndex % Int(kEmotionCellNumberOfOneRow)) + (CGFloat(page) * kScreenW) let y = itemSize.height * CGFloat((itemIndex - page * kEmotionCellRow * kEmotionCellNumberOfOneRow) / kEmotionCellNumberOfOneRow) attributes.frame = CGRect(x: x, y: y, width: itemSize.width, height: itemSize.height) // 把每一个新的属性保存起来 attributesArr.append(attributes) &#125; &#125; override func layoutAttributesForElements(in rect: CGRect) -&gt; [UICollectionViewLayoutAttributes]? &#123; var rectAttributes: [UICollectionViewLayoutAttributes] = [] _ = attributesArr.map(&#123; if rect.contains($0.frame) &#123; rectAttributes.append($0) &#125; &#125;) return rectAttributes &#125; &#125; 附上相关项目：Swift 3.0 高仿微信]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - 通过runtime获取某个类中所有的变量和方法]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-%E9%80%9A%E8%BF%87runtime%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E7%B1%BB%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[苹果官方的类中只提供给我们一小部分成员变量和方法,但有时候我们需要的恰好就没有提供,这样就会令开发人员十分懊恼了,那怎样才能获取该类中所有的变量及方法,用来查找是否有相对应的变量和方法呢?我们可以使用苹果自带的 运行时(runtime) 来获取+ 苹果官方的类中只提供给我们一小部分成员变量和方法,但有时候我们需要的恰好就没有提供,这样就会令开发人员十分懊恼了,那怎样才能获取该类中所有的变量及方法,用来查找是否有相对应的变量和方法呢?我们可以使用苹果自带的 运行时(runtime) 来获取 运行时(Runtime): 苹果官方一套C语言库 能做很多底层操作(比如访问隐藏的一些成员变量\成员方法….) 以下以 UITextField 为例 一. 包含运行时头文件1#import &lt;objc/runtime.h&gt; 二. 获取所有的成员变量123456789101112131415161718unsigned int count = 0; // 拷贝出所胡的成员变量列表Ivar *ivars = class_copyIvarList([UITextField class], &amp;count); for (int i = 0; i&lt;count; i++) &#123; // 取出成员变量 Ivar ivar = *(ivars + i); // 打印成员变量名字 LXFLog(@"%s", ivar_getName(ivar)); // 打印成员变量的数据类型 LXFLog(@"%s", ivar_getTypeEncoding(ivar));&#125; // 释放free(ivars); Swift的写法如下1234567var count: UInt32 = 0let ivars = class_copyIvarList(UIViewController.self, &amp;count)!for i in 0..&lt;count &#123; let namePoint = ivar_getName(ivars[Int(i)])! let name = String(cString: namePoint) print(name)&#125; 三. 获取所有的成员方法// 下面的UITextField改为你想获取所有属性的类名// methCount: 这个类所有属性的个数123456789101112131415unsigned int methCount = 0;Method *meths = class_copyMethodList([UITextField class], &amp;methCount); for(int i = 0; i &lt; methCount; i++) &#123; Method meth = meths[i]; SEL sel = method_getName(meth); const char *name = sel_getName(sel); NSLog(@"%s", name);&#125; free(meths); 最后,通过KVC的方式给相应的成员变量赋值即可!如:12345// 修改点位文字颜色UILabel *placeholderLabel = [self valueForKeyPath:@"_placeholderLabel"];placeholderLabel.textColor = [UIColor redColor];// 或者这样[self setValue:[UIColor grayColor] forKeyPath:@"_placeholderLabel.textColor"];]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - 实现UINavigation全屏动返回(二)]]></title>
    <url>%2F2017%2F09%2F12%2FiOS-%E5%AE%9E%E7%8E%B0UINavigation%E5%85%A8%E5%B1%8F%E5%8A%A8%E8%BF%94%E5%9B%9E-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[在 iOS - 实现UINavigation全屏滑动返回(一) 中我们实现了滑动返回的功能，但不是全屏滑动返回，得在左侧边缘轻扫才能滑动返回~UINavigationController自带的只能在边缘轻扫才能滑动返回，这用户体验是不好的，接下来实现全屏滑动返回! + 回顾在 iOS - 实现UINavigation全屏滑动返回(一) 中我们实现了滑动返回的功能，但不是全屏滑动返回，得在左侧边缘轻扫才能滑动返回~UINavigationController自带的只能在边缘轻扫才能滑动返回，这用户体验是不好的，接下来实现全屏滑动返回! 思路既然自带的滑动返回只能是在边缘，那我们能不能修改使它触摸范围变大甚至全屏呢？先来看下系统手势有没有提供属性或方法供我们使用1NSLog(@"%@", self.interactivePopGestureRecognizer); 打印信息：123456/*&lt;UIScreenEdgePanGestureRecognizer: 0x7fd542611e20; state = Possible; delaysTouchesBegan = YES; view = &lt;UILayoutContainerView 0x7fd542706300&gt;; target= &lt;(action=handleNavigationTransition:, target=&lt;_UINavigationInteractiveTransition 0x7fd542611ce0&gt;)&gt;&gt;*/ 原来系统手势的类型为 UIScreenEdgePanGestureRecognizer ，转到定义，发现有一个属性1UIRectEdge edges 是个结构体12345678typedef NS_OPTIONS(NSUInteger, UIRectEdge) &#123; UIRectEdgeNone = 0, UIRectEdgeTop = 1 &lt;&lt; 0, UIRectEdgeLeft = 1 &lt;&lt; 1, UIRectEdgeBottom = 1 &lt;&lt; 2, UIRectEdgeRight = 1 &lt;&lt; 3, UIRectEdgeAll = UIRectEdgeTop | UIRectEdgeLeft | UIRectEdgeBottom | UIRectEdgeRight&#125; 只提供了这几样，都是边缘的，这样就只好另寻他路了。既然没有提供方式给我们现实要求，那我们就自己添加一个拖动手势 UIPanGestureRecognizer来替它执行滑动返回功能。12UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:target action:@selector(handleNavigationTransition:)];[self.view addGestureRecognizer:pan]; 添加一个拖动手势，让他执行系统手势的操作，调用handleNavigationTransition:方法（刚才打印的信息中可以得知），现在的问题就是target是谁？我们可以看看UIScreenEdgePanGestureRecognizer中是否有线索呢？1UIScreenEdgePanGestureRecognizer *gest = self.interactivePopGestureRecognizer; 找了半天没找着，但是UIScreenEdgePanGestureRecognizer继承于UIPanGestureRecognizer，而UIPanGestureRecognizer又继承于UIGestureRecognizer，在UIGestureRecognizer提供的方法中我们可以推断出一定有target，而且还是强引用的私有属性！那我们就可以用OC强大的杀手锏KVC来得到这个属性，但是前提是我们得知道target所指属性是什么名字参照我的另一篇文章：iOS - 通过runtime获取某个类中所有的变量和方法1234567891011121314151617// OC runtime 机制// 只能动态获取当前类的成员属性，不能获取其子类，或者父类的属性unsigned int count = 0;// 拷贝出所胡的成员变量列表Ivar *ivars = class_copyIvarList([UIGestureRecognizer class], &amp;count);for (int i = 0; i&lt;count; i++) &#123; // 取出成员变量 Ivar ivar = *(ivars + i); // 打印成员变量名字 NSLog(@"%s", ivar_getName(ivar)); // 打印成员变量的数据类型 NSLog(@"%s", ivar_getTypeEncoding(ivar));&#125; // 释放 free(ivars); 在打印中我们找到了UIGestureRecognizer的私有属性 _targets，是个数组，而且只有一个元素，元素的类型如图所示那就好办了，这样我们就可以得到target了12NSArray *targets = [gest valueForKeyPath:@"_targets"]; // 打印可以发现里面就一个元素id target = [targets[0] valueForKeyPath:@"_target"]; 这样我们就差不多实现全屏滑动返回的功能，但是有个bug如图所示，在最后里回到根控制器界面后我再一次向右滑动，接着点击Button，它没有将FirstVC弹出，这就是传说中的bug，那我们现在在做的，就是在根控制器不让滑动返回生效，即禁用手势。监听手势，遵守协议UIGestureRecognizerDelegate，实现代理方法 12// 当当前控制器是是根控制器时不让移除当前控制器(换句话说就是禁止手势)pan.delegate = self; 1234567#pragma mark - UIGestureRecognizerDelegate// 当开始滑动时调用- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer &#123; // 当为根控制器是不让移除当前控制器，非根控制器时允许移除 NSLog(@"%ld", self.viewControllers.count); BOOL open = self.viewControllers.count &gt; 1; return open;&#125; 最后说两句这样就可以全屏滑动了，不过让我们来看看我们添加手势的习惯123UIPanGestureRecognizer *myPan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(pan)];[self.view addGestureRecognizer:myPan];myPan.delegate = self; 我们在添加手势时设置了target为self，而delegate也为self那是不是可以推断出系统手势的delegate就是我们刚刚想要的target呢，答案是是的1id target = self.interactivePopGestureRecognizer.delegate; 所以我们的target就可以通过这种方式获得，不用KVC的方式哦，最后别忘了禁用系统手势12// 禁止系统的手势self.interactivePopGestureRecognizer.enabled = NO; 这样，我们就实现了全屏滑动返回的功能了~ 源码 Objective-C 记得遵守协议： UIGestureRecognizerDelegateLXFNavigationController.m12345678910111213- (void)viewDidLoad &#123; [super viewDidLoad]; // 系统的手势 UIScreenEdgePanGestureRecognizer *gest = self.interactivePopGestureRecognizer; // target id target = self.interactivePopGestureRecognizer.delegate; // 禁止系统的手势 self.interactivePopGestureRecognizer.enabled = NO; UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:target action:@selector(handleNavigationTransition:)]; [self.view addGestureRecognizer:pan]; // 监听代理 pan.delegate = self;&#125; 12345678#pragma mark - UIGestureRecognizerDelegate// 当开始滑动时调用- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer &#123; // 当为根控制器是不让移除当前控制器，非根控制器时允许移除 NSLog(@"%ld", self.viewControllers.count); BOOL open = self.viewControllers.count &gt; 1; return open;&#125; Swift LXFNavigationController.swift1234567891011override func viewDidLoad() &#123; super.viewDidLoad() guard let targets = interactivePopGestureRecognizer!.value(forKey: &quot;_targets&quot;) as? [NSObject] else &#123; return &#125; let targetObjc = targets.first let target = targetObjc?.value(forKey: &quot;target&quot;) let action = Selector((&quot;handleNavigationTransition:&quot;)) let panGes = UIPanGestureRecognizer(target: target, action: action) view.addGestureRecognizer(panGes)&#125;]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS - 实现UINavigation全屏动返回(一)]]></title>
    <url>%2F2017%2F09%2F11%2FiOS-%E5%AE%9E%E7%8E%B0UINavigation%E5%85%A8%E5%B1%8F%E5%8A%A8%E8%BF%94%E5%9B%9E-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[interactivePopGestureRecognizer 是UINavigationController自带手势，当我们自定义了导航条的返回按钮后，这个手势就自动失效了，也就是说无法滑动返回。+ 要点interactivePopGestureRecognizer 是UINavigationController自带手势，当我们自定义了导航条的返回按钮后，这个手势就自动失效了，也就是说无法滑动返回。 条件很多情况下我们不得不自定义导航条的返回按钮，但是我们也要滑动返回上一级的效果。 思路既然自动失效，那我们就告诉它什么时候生效。 在非根控制器下生效(用于滑动返回上一级) 在根控制器下失效(防止根控制器被移除，当然系统不会让我们把它移除，只是会出现bug)翻译：第一个被添加的控制器成为永远不会被出栈的根控制器 步骤自定义一个 UINavigationController ，即继承于 UINavigationController ，名字为 LXFNavigationController ，将代理设为自己，遵守协议 UINavigationControllerDelegate ，实现代理方法 navigationController:didShowViewController:animated: 代码LXFNavigationController.m 12/** 系统手势代理 */@property(nonatomic, strong) id popGesture; 1234567- (void)viewDidLoad &#123; [super viewDidLoad]; // 记录系统手势代理 self.popGesture = self.interactivePopGestureRecognizer; self.delegate = self;&#125; 123456789101112131415161718#pragma mark - UINavigationControllerDelegate// 当控制器显示完毕的时候调用- (void)navigationController:(UINavigationController *)navigationController didShowViewController:(UIViewController *)viewController animated:(BOOL)animated &#123; // 根据 栈 先进后出 if (self.viewControllers[0] == viewController) &#123; // 根控制器 // 还原代理 self.interactivePopGestureRecognizer.delegate = self.popGesture; &#125; else &#123; // 非控制器 // 清空手势代理就能实现滑动返回，iOS6不支持 self.interactivePopGestureRecognizer.delegate = nil; &#125; // 如果当前控制器为根控制器，则使手势失效，不然手势会将根控制器移除 if (self.viewControllers.count == 1) &#123; self.interactivePopGestureRecognizer.enabled = NO; &#125; else &#123; self.interactivePopGestureRecognizer.enabled = YES; &#125;&#125; 附上Demo 最后说两句这样就可以了，但是注意了，现在实现的是滑动返回功能，并没有全屏滑动返回~~接下来看下一篇吧 iOS - 实现UINavigation全屏滑动返回(二)]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
</search>
