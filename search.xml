<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>打造Moya便捷解析库，提供RxSwift拓展</title>
      <link href="/2018/05/24/%E6%89%93%E9%80%A0Moya%E4%BE%BF%E6%8D%B7%E8%A7%A3%E6%9E%90%E5%BA%93%EF%BC%8C%E6%8F%90%E4%BE%9BRxSwift%E6%8B%93%E5%B1%95/"/>
      <url>/2018/05/24/%E6%89%93%E9%80%A0Moya%E4%BE%BF%E6%8D%B7%E8%A7%A3%E6%9E%90%E5%BA%93%EF%BC%8C%E6%8F%90%E4%BE%9BRxSwift%E6%8B%93%E5%B1%95/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>MoyaMapper是基于Moya和SwiftyJSON封装的工具，以Moya的plugin的方式来实现间接解析，支持RxSwift</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>1、相信大家在使用Swift开发时，<a href="https://github.com/Moya/Moya" target="_blank" rel="noopener">Moya</a>是首选的网络工具，在模型解析这一块，Swift版模型解析的相关第三方库有很多，本人最习惯用的就是<a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="noopener">SwiftyJSON</a>。</p><p>2、下面会开始讲解整个主要的开发功能与思想。</p><p>3、以下内容是基于大家会使用Moya和SwiftJSON的前提下所著，还不会的同学可以先简单了解后再来阅读本篇文章哦～</p><h2 id="二、功能开发与思想讲解"><a href="#二、功能开发与思想讲解" class="headerlink" title="二、功能开发与思想讲解"></a>二、功能开发与思想讲解</h2><h3 id="1、尝试模型解析"><a href="#1、尝试模型解析" class="headerlink" title="1、尝试模型解析"></a>1、尝试模型解析</h3><p>Moya请求服务器返回的数据以Response类返回给我们，那我们就给Response类做一个扩展，这里以解析模型为例<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要传入一个参数，告知我们要转换出什么模型</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapObject</span>&lt;T: Modelable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="comment">// 模型解析过程</span></span><br><span class="line">    。。。</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="type">T</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Q: 那中间的解析过程该怎么写呢？</p><p>A: <strong>可以让开发者遵守某个协议，实现指定的转换方法并描述转换关系。其转换过程我们不需要知道，交给开发者即可。</strong></p><p>那接着我们来定义一个协议Modelable，并声明转换方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Modelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="number">_</span> json: JSON)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>开发者创建一个<code>MyMoel</code>的结构体，遵守协议<code>Modelable</code>,并实现<code>mapping</code>，书写转换关系<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyModel</span>: <span class="title">Modelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _id = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="number">_</span> json: JSON)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>._id = json[<span class="string">"_id"</span>].stringValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以目前的现状来分析一下：<code>mapObject</code>可以让开发者传入<code>模型类型</code>，而我们的协议方法却并非是个类方法。那我们需要先得到这个<code>模型类型</code>的对象，再来调用<code>mapping</code>方法</p><h3 id="2、模型解析的驱动开发"><a href="#2、模型解析的驱动开发" class="headerlink" title="2、模型解析的驱动开发"></a>2、模型解析的驱动开发</h3><p>Q: 怎么得到这个对象？</p><p>A: <strong>可以在协议中声明一个初始化方法来创建对象。是的，我们在mapObject中创建对应模型类型的对象，调用mapping方法来转换数据，再把模型对象传出去即可。</strong></p><p>那我们在<code>Modelable</code>中声明一个init方法，并传入一个参数，区别于其它初始化方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Modelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="number">_</span> json: JSON)</span></span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> json: <span class="type">JSON</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>OK，现在把<code>mapObject</code>方法补齐模型解析过程</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapObject</span>&lt;T: Modelable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> modelJson = <span class="type">JSON</span>(data)[<span class="string">"modelKey"</span>]</span><br><span class="line">    <span class="comment">// 模型解析过程</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="type">T</span>.<span class="keyword">init</span>(modelJson)</span><br><span class="line">    obj.mapping(modelJson)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、自定义解析键名"><a href="#3、自定义解析键名" class="headerlink" title="3、自定义解析键名"></a>3、自定义解析键名</h3><p>Q: 这样是搞定解析了，但是网络请求回来的json格式错综复杂，有什么办法可以让开发者来自行指定model对应的键名呢？</p><p>A: <strong>嗯嗯，既然解析过程是在 Response 扩展里操作的，那我们可以通过协议定义键名属性，并且使用 Runtime 给Response动态添加一个属性，来记录遵守协议后的相应类名</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ModelableParameterType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// 请求成功时状态码对应的值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> successValue: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="comment">/// 状态码对应的键</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> statusCodeKey: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="comment">/// 请求后的提示语对应的键</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> tipStrKey: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="comment">/// 请求后的主要模型数据的键</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> modelKey: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:- runtime</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">AssociatedKeys</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">var</span> lxf_modelableParameterKey = <span class="string">"lxf_modelableParameterKey"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> lxf_modelableParameter: <span class="type">ModelableParameterType</span>.<span class="type">Type</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> value = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedKeys</span>.lxf_modelableParameterKey) <span class="keyword">as</span> <span class="type">AnyObject</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> type = value <span class="keyword">as</span>? <span class="type">ModelableParameterType</span>.<span class="type">Type</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="type">NullParameter</span>.<span class="keyword">self</span> &#125;</span><br><span class="line">            <span class="keyword">return</span> type</span><br><span class="line">        &#125; <span class="keyword">set</span> &#123;</span><br><span class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedKeys</span>.lxf_modelableParameterKey, newValue, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>这里有个坑：_SwiftValue问题</strong> (献上 <a href="https://stackoverflow.com/questions/42033735/failing-cast-in-swift-from-any-to-protocol/42034523#42034523" target="_blank" rel="noopener">参考链接</a>)<br>如果我们存储的不是OC对象，那么<code>objc_getAssociatedObject</code>取出来的值的类型统统为<code>_SwiftValue</code>，直接<code>as? ModelableParameterType.Type</code>绝对是nil，需要在取出来后<code>as AnyObject</code>再转换为其它类型才会成功～～ </p></blockquote><p>现在开发者就可以创建一个类来遵守<code>ModelableParameterType</code>协议，并自定义解析键名<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NetParameter</span> : <span class="title">ModelableParameterType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> successValue: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"false"</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> statusCodeKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"error"</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> tipStrKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"errMsg"</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> modelKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"results"</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4、插件注入"><a href="#4、插件注入" class="headerlink" title="4、插件注入"></a>4、插件注入</h3><p>Q: 厉害了，不过要在什么时机下存储这个自定义键名的<code>NetParameter</code>？</p><p>A: 额，这个～～～ 哦，对了，可以通过Moya提供的插件机制！</p><p>翻出Moya中的Plugin.Swift，找到这个<code>process</code>方法，看看方法说明。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 在结束之前，可以被用来修改请求结果</span></span><br><span class="line"><span class="comment">/// Called to modify a result before completion.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(<span class="number">_</span> result: Result&lt;Moya.Response, MoyaError&gt;, target: TargetType)</span></span> -&gt; <span class="type">Result</span>&lt;<span class="type">Moya</span>.<span class="type">Response</span>, <span class="type">MoyaError</span>&gt;</span><br></pre></td></tr></table></figure></p><p>那好，我们也做一个插件<code>MoyaMapperPlugin</code>给开发者使用，在创建<code>MoyaMapperPlugin</code>时把自定义解析键名的类型传进来<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">MoyaMapperPlugin</span>: <span class="title">PluginType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parameter: <span class="type">ModelableParameterType</span>.<span class="type">Type</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>&lt;<span class="type">T</span>: <span class="type">ModelableParameterType</span>&gt;(<span class="number">_</span> type: <span class="type">T</span>.<span class="type">Type</span>) &#123;</span><br><span class="line">        parameter = type</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// modify response</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(<span class="number">_</span> result: Result&lt;Response, MoyaError&gt;, target: TargetType)</span></span> -&gt; <span class="type">Result</span>&lt;<span class="type">Response</span>, <span class="type">MoyaError</span>&gt; &#123;</span><br><span class="line">        <span class="number">_</span> = result.<span class="built_in">map</span> &#123; (response) -&gt; <span class="type">Response</span> <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// 趁机添加相关数据 </span></span><br><span class="line">            response.lxf_modelableParameter = parameter</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用：开发者在创建<code>MoyaProvider</code>对象时，顺便注入插件。(OS: 这一步堪称“注入灵魂”)<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MoyaProvider</span>&lt;<span class="type">LXFNetworkTool</span>&gt;(plugins: [<span class="type">MoyaMapperPlugin</span>(<span class="type">NetParameter</span>.<span class="keyword">self</span>)])</span><br></pre></td></tr></table></figure></p><h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><blockquote><p>以上就是主要的踩坑过程了。模型数组解析和指定解析也跟这些差不多的，这里就不再赘述。本人已经将其封装成一个开源库 <a href="https://github.com/LinXunFeng/MoyaMapper" target="_blank" rel="noopener">MoyaMapper</a>，包含了上述已经和未曾说明的功能，下面会讲解如何去使用。以上部分可以称为开胃菜，目的就是平滑过渡到下面MoyaMapper的具体使用。</p></blockquote><p>可能单单使用<code>MoyaMapper</code>的默认子库<code>Core</code>，作用体会上并不会很深。但是，如果你也是使用RxSwift来开发项目的话，请安装<code>&#39;MoyaMapper/Rx&#39;</code>吧，绝对一个字：「爽」</p><h2 id="二、MoyaMapper的使用"><a href="#二、MoyaMapper的使用" class="headerlink" title="二、MoyaMapper的使用"></a>二、MoyaMapper的使用</h2><p><img src="/images/2018/05/打造Moya便捷解析库，提供RxSwift拓展/MoyaMapper.png" alt="MoyaMapper"></p><p>MoyaMapper是基于Moya和SwiftyJSON封装的工具，以Moya的plugin的方式来实现间接解析，支持RxSwift</p><p><img src="/images/2018/05/打造Moya便捷解析库，提供RxSwift拓展/JSON数据对照.png" alt="JSON数据对照"></p><h3 id="1、定义并注入自定义键名类"><a href="#1、定义并注入自定义键名类" class="headerlink" title="1、定义并注入自定义键名类"></a>1、定义并注入自定义键名类</h3><ol><li>定义一个遵守ModelableParameterType协议的结构体</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 各参数返回的内容请参考上面JSON数据对照图</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NetParameter</span> : <span class="title">ModelableParameterType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> successValue: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"false"</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> statusCodeKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"error"</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> tipStrKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">""</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> modelKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"results"</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>此外，这里还可以做简单的路径处理，以应付各种情况，以’&gt;’隔开</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 假设返回的json数据关于请求状态的相关数据如下所示，</span><br><span class="line">error: &#123;</span><br><span class="line">    'errorStatus':false</span><br><span class="line">    'errMsg':'error Argument type'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们指明解析路径：error对象下的errMsg字段，一层层表示下去即可</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">var</span> tipStrKey: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">"error&gt;errMsg"</span> &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>以plugin的方式传递给MoyaProvider</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MoyaMapperPlugin这里只需要传入类型</span></span><br><span class="line"><span class="type">MoyaProvider</span>&lt;<span class="type">LXFNetworkTool</span>&gt;(plugins: [<span class="type">MoyaMapperPlugin</span>(<span class="type">NetParameter</span>.<span class="keyword">self</span>)])</span><br></pre></td></tr></table></figure><h3 id="2、定义解析模型"><a href="#2、定义解析模型" class="headerlink" title="2、定义解析模型"></a>2、定义解析模型</h3><p>创建一个遵守Modelable协议的结构体</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyModel</span>: <span class="title">Modelable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> _id = <span class="string">""</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> json: <span class="type">JSON</span>) &#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mapping</span><span class="params">(<span class="number">_</span> json: JSON)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>._id = json[<span class="string">"_id"</span>].stringValue</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">遵守<span class="type">Modelable</span>协议，实现协议的两个方法，在`mapping`方法中描述模型字段的具体解析</span><br></pre></td></tr></table></figure><h3 id="3、解析数据"><a href="#3、解析数据" class="headerlink" title="3、解析数据"></a>3、解析数据</h3><h4 id="0x00-请求结果与模型解析"><a href="#0x00-请求结果与模型解析" class="headerlink" title="0x00 请求结果与模型解析"></a>0x00 请求结果与模型解析</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Result</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapResult</span><span class="params">(params: ModelableParamsBlock? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">MoyaMapperResult</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Model</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapObject</span>&lt;T: Modelable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>, modelKey: String? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">T</span></span><br><span class="line"><span class="comment">// Result+Model</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapObjResult</span>&lt;T: Modelable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>, params: ModelableParamsBlock? = <span class="literal">nil</span>)</span></span> -&gt; (<span class="type">MoyaMapperResult</span>, <span class="type">T</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Models</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapArray</span>&lt;T: Modelable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>, modelKey: String? = <span class="literal">nil</span>)</span></span> -&gt; [<span class="type">T</span>]</span><br><span class="line"><span class="comment">// Result+Models</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">mapArrayResult</span>&lt;T: Modelable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>, params: ModelableParamsBlock? = <span class="literal">nil</span>)</span></span> -&gt; (<span class="type">MoyaMapperResult</span>, [<span class="type">T</span>])</span><br></pre></td></tr></table></figure><p>上面的五个方法，观其名，知其意，这里就不过多解释了，主要注意两点：</p><ul><li><p>result</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元祖类型</span></span><br><span class="line"><span class="comment">// 参数1：根据statusCodeKey取出的值与successValue是否相等</span></span><br><span class="line"><span class="comment">// 参数2：根据tipStrKey取出的值</span></span><br><span class="line">result：(<span class="type">Bool</span>, <span class="type">String</span>)</span><br></pre></td></tr></table></figure></li><li><p>params</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// params: ModelableParamsBlock? = nil</span></span><br><span class="line"><span class="comment">// 这里只有在特殊场景下才需要使用到。如：项目中需要在某处使用特定接口，但是返回的json格式跟自己项目的不一样，并且只有这么一两处用得着该额外接口，那就需要我们这个参数了，以Block的方式返回解析参数类型。</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="0x01、特定解析"><a href="#0x01、特定解析" class="headerlink" title="0x01、特定解析"></a>0x01、特定解析</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Model</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">toJSON</span><span class="params">(modelKey: String? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">JSON</span></span><br><span class="line"><span class="comment">// 获取指定路径的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">fetchJSONString</span><span class="params">(path: String? = <span class="literal">nil</span>, keys: [JSONSubscriptType])</span></span> -&gt; <span class="type">String</span></span><br></pre></td></tr></table></figure><p>这两个方法，如果没有指定路径，默认都是针对modelKey的<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetchJSONString(keys: &lt;[JSONSubscriptType]&gt;)</span></span><br><span class="line"><span class="number">1</span>、通过 keys 传递数组, 该数组可传入的类型为 <span class="type">Int</span> 和 <span class="type">String</span></span><br><span class="line"><span class="number">2</span>、默认是以 modelKey 所示路径，来获取相应的数值。如果modelKey并非是你所想要使用的解析路径，可以使用下方的重载方法重新指定路径即可</span><br><span class="line"></span><br><span class="line"><span class="comment">// response.fetchJSONString(path: &lt;String?&gt;, keys: &lt;[JSONSubscriptType]&gt;)</span></span><br></pre></td></tr></table></figure></p><p><strong>MoyaMapper也提供了Rx子库，为方便RxSwift的流式编程下便捷解析数据</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MoyaMapper默认只安装Core下的文件</span><br><span class="line">pod <span class="string">'MoyaMapper'</span></span><br><span class="line"></span><br><span class="line">RxSwift拓展</span><br><span class="line">pod <span class="string">'MoyaMapper/Rx'</span></span><br></pre></td></tr></table></figure><p>具体使用还不是很明白的同学可以下载并运行<code>Example</code>看看</p><p><strong>如果<a href="https://github.com/LinXunFeng/MoyaMapper" target="_blank" rel="noopener">MoyaMapper</a>有什么不足的地方，欢迎提出issues，感谢大家的支持</strong></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> RxSwift </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 面向协议方式封装空白页功能</title>
      <link href="/2018/04/07/iOS-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E6%96%B9%E5%BC%8F%E5%B0%81%E8%A3%85%E7%A9%BA%E7%99%BD%E9%A1%B5%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/04/07/iOS-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E6%96%B9%E5%BC%8F%E5%B0%81%E8%A3%85%E7%A9%BA%E7%99%BD%E9%A1%B5%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>为了良好的交互体验，相信大家在对待<code>scrollView</code>无数据时的提示页都会使用一些第三方来定制，最典型的就是使用<a href="https://github.com/dzenbot/DZNEmptyDataSet" target="_blank" rel="noopener">DZNEmptyDataSet</a>。但是每个界面都写一堆与<code>DZNEmptyDataSetDelegate</code>，<code>DZNEmptyDataSetSource</code>相关的代码就不太好，那一般情况下自然的就会采用继承的方式来避免。而Swift除了可以面向对象编程，它还可以面向协议编程。那可不可以也用协议来解决情况呢？嘿嘿，这个可以有，那我们接下来就来试试怎么通过协议的方式来避免上述情况，并且实现一行代码添加空白页功能</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>为了良好的交互体验，相信大家在对待<code>scrollView</code>无数据时的提示页都会使用一些第三方来定制，最典型的就是使用<a href="https://github.com/dzenbot/DZNEmptyDataSet" target="_blank" rel="noopener">DZNEmptyDataSet</a>。但是每个界面都写一堆与<code>DZNEmptyDataSetDelegate</code>，<code>DZNEmptyDataSetSource</code>相关的代码就不太好，那一般情况下自然的就会采用继承的方式来避免。而Swift除了可以面向对象编程，它还可以面向协议编程。那可不可以也用协议来解决情况呢？嘿嘿，这个可以有，那我们接下来就来试试怎么通过协议的方式来避免上述情况，并且实现一行代码添加空白页功能</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果对面向协议有疑问的同学可以看下我之前的两篇文章</p><p><a href="http://linxunfeng.top/2017/09/12/iOS-Swift-面向协议编程（一）/">iOS - Swift 面向协议编程（一）</a> </p><p><a href="http://linxunfeng.top/2017/09/12/iOS-Swift-面向协议编程（二）/">iOS - Swift 面向协议编程（二）</a></p><p>之前的文章中提到了，协议除了起规范作用，还有别一个用处，就是赋予能力。我们现在的目的就是让目标控制器或者目标视图在遵守我们的协议后，就可以有实现空白页的功能。</p><h2 id="一、基本实现"><a href="#一、基本实现" class="headerlink" title="一、基本实现"></a>一、基本实现</h2><h3 id="1、创建协议"><a href="#1、创建协议" class="headerlink" title="1、创建协议"></a>1、创建协议</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:- 空视图占位协议</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">LXFEmptyDataSetable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、确定面向类"><a href="#2、确定面向类" class="headerlink" title="2、确定面向类"></a>2、确定面向类</h3><p>确定我们面向的类，一般<code>tableView</code>或者<code>collectionView</code>都是写在控制器里，那我们面向的类就规定为<code>UIViewController</code>，或许也有人写在<code>UIView</code>里，不过这里先按<code>UIViewController</code>来写吧<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:- UIViewController - 空视图占位协议</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">LXFEmptyDataSetable</span> <span class="title">where</span> <span class="title">Self</span> : <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 3、的实现的方法写在这里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、定义功能方法"><a href="#3、定义功能方法" class="headerlink" title="3、定义功能方法"></a>3、定义功能方法</h3><p>将<code>scrollView</code>传递进来，让我们定义的方法来暗地里做些操作<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lxf_EmptyDataSet</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class="line">    scrollView.emptyDataSetDelegate = <span class="keyword">self</span></span><br><span class="line">    scrollView.emptyDataSetSource = <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4、设置数据源和代理"><a href="#4、设置数据源和代理" class="headerlink" title="4、设置数据源和代理"></a>4、设置数据源和代理</h3><p>在<code>3、定义功能方法</code>中将<code>delegate</code>和<code>source</code>设置为了<code>self</code> ，而协议是无法遵守再次遵守其它协议的，那让什么来遵守对应的协议呢？要明白这里的<code>self</code>指的是<code>UIViewController</code>,考虑到<code>UIView</code>的可能，这里我就让万物对象之父<code>NSObject</code>来遵守，并实现对应的数据源方法和代理方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObject</span> : <span class="title">DZNEmptyDataSetDelegate</span>, <span class="title">DZNEmptyDataSetSource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">image</span><span class="params">(forEmptyDataSet scrollView: UIScrollView!)</span></span> -&gt; <span class="type">UIImage</span>! &#123;</span><br><span class="line">        <span class="comment">// 返回提示图片</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">title</span><span class="params">(forEmptyDataSet scrollView: UIScrollView!)</span></span> -&gt; <span class="type">NSAttributedString</span>! &#123;</span><br><span class="line">        <span class="comment">// 设置富文本标题</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">verticalOffset</span><span class="params">(forEmptyDataSet scrollView: UIScrollView!)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="comment">// 设置纵向偏移</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二、定制空白页"><a href="#二、定制空白页" class="headerlink" title="二、定制空白页"></a>二、定制空白页</h2><p>通过上述步骤后，只要让<code>UIViewController</code>遵守我们的协议，再调用一下<code>lxf_EmptyDataSet</code>方法就可以实现数据空白页了。但是，这样直接写死的方式很不好，有时候一些场景是需要我们做出定制的，那怎么实现定制呢？协议又不能有自己的变量来存放我们的定制。</p><font color="red"><em>这里先做出一个限定，我们要使用重载方法来完成该功能，实现即可高定制，又可使用默认定制。</em></font><p>回到刚刚的话题，使用UserDefaults来实现可以吗？可以，但是比较麻烦，因为UserDefaults是单例，整个进程共用这一份资源，如果你当前<code>controller</code>遵守了我们的协议<code>LXFEmptyDataSetable</code>并做出了定制，那么当下一个<code>controller</code>在遵守协议后使用了<code>默认定制</code>时，那你要怎么办？还要区分<code>scrollView</code>，那就得保存当前<code>scrollView</code>，在退出当前<code>controller</code>后还要把对应的东西置空。好咯好咯，那你说到底要怎么搞才最合适？</p><blockquote><p>解决方案：拓展<code>UIScrollView</code>！！！有没有发现？，非常地恰巧，我们定义的方法<code>lxf_EmptyDataSet</code>需要外界将<code>UIScrollView</code>传递进来，在<code>DZNEmptyDataSet</code>的数据源方法和代理方法也有<code>scrollView</code>。那让<code>UIScrollView</code>来携带我们的定制就好啦。</p></blockquote><h3 id="1、定义定制相关的枚举"><a href="#1、定义定制相关的枚举" class="headerlink" title="1、定义定制相关的枚举"></a>1、定义定制相关的枚举</h3><p>这里我定义了常用的定制相关的枚举<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">LXFEmptyDataSetAttributeKeyType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// 纵向偏移(-50)  CGFloat</span></span><br><span class="line">    <span class="keyword">case</span> verticalOffset</span><br><span class="line">    <span class="comment">/// 提示语(暂无数据)  String</span></span><br><span class="line">    <span class="keyword">case</span> tipStr</span><br><span class="line">    <span class="comment">/// 提示语的font(system15)  UIFont</span></span><br><span class="line">    <span class="keyword">case</span> tipFont</span><br><span class="line">    <span class="comment">/// 提示语颜色(D2D2D2)  UIColor</span></span><br><span class="line">    <span class="keyword">case</span> tipColor</span><br><span class="line">    <span class="comment">/// 提示图(LXFEmptyDataPic) UIImage</span></span><br><span class="line">    <span class="keyword">case</span> tipImage</span><br><span class="line">    <span class="comment">/// 允许滚动(true) Bool</span></span><br><span class="line">    <span class="keyword">case</span> allowScroll</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2、拓展UIScrollView"><a href="#2、拓展UIScrollView" class="headerlink" title="2、拓展UIScrollView"></a>2、拓展UIScrollView</h3><p>为<code>UIScrollView</code>定义一个定制相关的属性字典<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIScrollView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">AssociatedKeys</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">var</span> lxf_emptyAttributeDict:[<span class="type">LXFEmptyDataSetAttributeKeyType</span> : <span class="type">Any</span>]?</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/// 属性字典</span></span><br><span class="line">    <span class="keyword">var</span> lxf_emptyAttributeDict: [<span class="type">LXFEmptyDataSetAttributeKeyType</span> : <span class="type">Any</span>]? &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedKeys</span>.lxf_emptyAttributeDict) <span class="keyword">as</span>? [<span class="type">LXFEmptyDataSetAttributeKeyType</span> : <span class="type">Any</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedKeys</span>.lxf_emptyAttributeDict, newValue <span class="keyword">as</span> [<span class="type">LXFEmptyDataSetAttributeKeyType</span> : <span class="type">Any</span>]?, objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、完善lxf-EmptyDataSet方法"><a href="#3、完善lxf-EmptyDataSet方法" class="headerlink" title="3、完善lxf_EmptyDataSet方法"></a>3、完善lxf_EmptyDataSet方法</h3><p>这里我们让外界通过闭包的方式来定制自己的空白页<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:- UIViewController - 空视图占位协议</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">LXFEmptyDataSetable</span> <span class="title">where</span> <span class="title">Self</span> : <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">lxf_EmptyDataSet</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView, attributeBlock: <span class="params">(<span class="params">()</span></span></span></span>-&gt;([<span class="type">LXFEmptyDataSetAttributeKeyType</span> : <span class="type">Any</span>]))? = <span class="literal">nil</span>) &#123;</span><br><span class="line">        scrollView.lxf_emptyAttributeDict = attributeBlock != <span class="literal">nil</span> ? attributeBlock!() : <span class="literal">nil</span></span><br><span class="line">        scrollView.emptyDataSetDelegate = <span class="keyword">self</span></span><br><span class="line">        scrollView.emptyDataSetSource = <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4、使用定制属性字典"><a href="#4、使用定制属性字典" class="headerlink" title="4、使用定制属性字典"></a>4、使用定制属性字典</h3><p>这里以返回提示图片的方法为例吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public func image(forEmptyDataSet scrollView: UIScrollView!) -&gt; UIImage! &#123;</span><br><span class="line">    guard let tipImg = scrollView.lxf_emptyAttributeDict?[.tipImage] as? UIImage else &#123;</span><br><span class="line">        return UIImage(named: &quot;LXFEmptyDataPic&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    return tipImg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、外界的使用姿势"><a href="#5、外界的使用姿势" class="headerlink" title="5、外界的使用姿势"></a>5、外界的使用姿势</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LXFEmptyDemoController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        initUI()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LXFEmptyDemoController</span>: <span class="title">LXFEmptyDataSetable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">initUI</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tableView = <span class="type">UITableView</span>()</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 高定制</span></span><br><span class="line">        <span class="keyword">self</span>.lxf_EmptyDataSet(tableView) &#123; () -&gt; ([<span class="type">LXFEmptyDataSetAttributeKeyType</span> : <span class="type">Any</span>]) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                .tipStr:<span class="string">"哟哟哟"</span>,</span><br><span class="line">                .verticalOffset:-<span class="number">150</span>,</span><br><span class="line">                .allowScroll: <span class="literal">false</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 默认定制</span></span><br><span class="line">        <span class="comment">// self.lxf_EmptyDataSet(tableView)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 面向协议方式封装空白页功能/lxf_EmptyDataSet.png" alt="大功告成"></p><h2 id="三、开源库"><a href="#三、开源库" class="headerlink" title="三、开源库"></a>三、开源库</h2><p>我对这个过程进行一次整理，并做成一个名为 <a href="https://github.com/LinXunFeng/LXFProtocolTool" target="_blank" rel="noopener">LXFProtocolTool</a> 的库并上传至gitHub。可以使用<code>Cocoapods</code>的方式来安装使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;LXFProtocolTool&apos;</span><br></pre></td></tr></table></figure><p>我也将 <a href="http://linxunfeng.top/2017/09/12/iOS-Swift-面向协议编程（二）/">iOS - Swift 面向协议编程（二）</a> 中提及的通过协议便捷加载xib的功能也集成了进来。大家可以根据自己的需要在Podfile写明要安装的功能</p><ul><li>Xib加载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;LXFProtocolTool/LXFNibloadable&apos;</span><br></pre></td></tr></table></figure><ul><li>空白视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;LXFProtocolTool/LXFEmptyDataSetable&apos;</span><br></pre></td></tr></table></figure><p>创建这个库的目的是为了通过协议的方式来方便快捷地实现一些的实用功能，目前功能不多，不过往后会逐渐增加，或许你有什么想实现的功能也可以提出来，喜欢的就给个Star鼓励下我吧 🚀 🚀 🚀 </p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 组件化开发（四）：fastlane实现pod自动化</title>
      <link href="/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Afastlane%E5%AE%9E%E7%8E%B0pod%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Afastlane%E5%AE%9E%E7%8E%B0pod%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>在第一次组件化的时候，需要执行很多操作，这些操作可以在【<a href="http://linxunfeng.top/2018/04/06/iOS-组件化开发（一）：远程私有库的基本使用/">iOS 组件化开发（一）：远程私有库的基本使用</a>】，这里就不再赘述，在组件化后的重复性操作就是升级，而升级这个过程是一模一样的。那么，我们有什么办法可以很方便的搞定这一过程来节约我们大量的时间呢？</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><p><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/fastlane.png" alt=""></p><blockquote><p>在第一次组件化的时候，需要执行很多操作，这些操作可以在【<a href="http://linxunfeng.top/2018/04/06/iOS-组件化开发（一）：远程私有库的基本使用/">iOS 组件化开发（一）：远程私有库的基本使用</a>】，这里就不再赘述，在组件化后的重复性操作就是升级，而升级这个过程是一模一样的。那么，我们有什么办法可以很方便的搞定这一过程来节约我们大量的时间呢？</p></blockquote><h2 id="一、升级必备操作"><a href="#一、升级必备操作" class="headerlink" title="一、升级必备操作"></a>一、升级必备操作</h2><p>修改完核心代码后，一共还需要做以下几步：<br><br>1、修改spec文件（修改s.version，s.description等）<br><br>2、<code>pod install</code> （使Example与pod下来的库产生关联）<br><br>3、提交本地仓库代码至远程仓库<br><br>4、打标签，并提交至远程<br><br>5、验证spec，并提至私有索引库</p><h2 id="二、Fastlane"><a href="#二、Fastlane" class="headerlink" title="二、Fastlane"></a>二、Fastlane</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p><a href="https://docs.fastlane.tools/" target="_blank" rel="noopener">Fastlane文档说明 </a><br>Fastlane是一个ruby脚本集合，它可以按照我们指定的路线，在指定位置执行我们所要执行的操作。这里我们称这样的路线为「航道(lane)」，这样的操作称为「Action」</p><p>Action是Fastlane自动化流程中的最小执行单元，用来执行Fastlane脚本中的命令，关于更多的描述可以到<a href="https://docs.fastlane.tools/actions/Actions/" target="_blank" rel="noopener">Actions - fastlane docs</a>查看，里面也介绍了常用的action有哪些，顺带附上<a href="https://github.com/fastlane/fastlane/tree/master/fastlane/lib/fastlane/actions" target="_blank" rel="noopener">action的源码地址</a>，这个源码在后面自定义起参考作用</p><h3 id="2、-安装"><a href="#2、-安装" class="headerlink" title="2、 安装"></a>2、 安装</h3><ul><li><p>确保ruby为最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install ruby</span><br></pre></td></tr></table></figure></li><li><p>安装fastlane</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/local/bin fastlane</span><br></pre></td></tr></table></figure></li><li><p>查看当前fastlane版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane --version</span><br></pre></td></tr></table></figure></li><li><p>查看所有action</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane actions</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、fastlane初始化"><a href="#三、fastlane初始化" class="headerlink" title="三、fastlane初始化"></a>三、fastlane初始化</h3><p>cd到你的本地组件仓库的根目录</p><ul><li><del>初始化fastlane</del><br><del><code>fastlane init</code></del><br><del>不过这个步骤对我们来说可以跳过，在init后提示你输入一些东西，包括上传需要用到的APPLE ID什么的一堆东西，由于我们并不涉及这些，所以我们使用更方便的方式</del></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个fastlane文件夹</span><br><span class="line"># 进入fastlane目录</span><br><span class="line"># 创建一个Fastfile文件</span><br><span class="line">mkdir fastlane</span><br><span class="line">cd fastlane</span><br><span class="line">touch Fastfile</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/目录结构.png" alt="目录结构"></p><h3 id="1、修改Fastfile"><a href="#1、修改Fastfile" class="headerlink" title="1、修改Fastfile"></a>1、修改Fastfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">desc &apos;描述航道作用&apos;</span><br><span class="line">lane :航道名称 do |options|</span><br><span class="line"></span><br><span class="line">// options 可以用来传递参数</span><br><span class="line">// 示例：varName = options[:name]</span><br><span class="line"></span><br><span class="line">// 航道上需要执行的操作</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>航道上要扫描的操作可以到<a href="https://docs.fastlane.tools/actions" target="_blank" rel="noopener">Actions</a>上查找，可以通过关键字搜索，如下图<br><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/cocoapods.png" alt="cocoapods"><br>点进去可以看到具体的使用及参数说明</p><p><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/使用说明.png" alt="使用说明"></p><p>这里附上本人的Fastfile内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">desc &apos;LXFUpdatePodTool 航道用来自动化升级维护私有库&apos;</span><br><span class="line">lane : LXFUpdatePodTool do |options|</span><br><span class="line"></span><br><span class="line">tagNum = options[:tag]</span><br><span class="line">podspecName = options[:specName]</span><br><span class="line"></span><br><span class="line"># 航道上需要执行的操作</span><br><span class="line"># 具体action到 https://docs.fastlane.tools/actions 上面查找</span><br><span class="line"># 这里的路径以仓库根目录为准</span><br><span class="line"></span><br><span class="line"># 1、修改spec文件（修改s.version，s.description等）</span><br><span class="line"># 2、pod install （使Example与pod下来的库产生关联）</span><br><span class="line">cocoapods(</span><br><span class="line">  clean: true,</span><br><span class="line">  podfile: &quot;./Example/Podfile&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3、提交本地仓库代码至远程仓库</span><br><span class="line">git_add(path: &quot;.&quot;)</span><br><span class="line">git_commit(path: &quot;.&quot;, message: &quot;upgrade repo&quot;)</span><br><span class="line">push_to_git_remote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 4、打标签，并提交至远程</span><br><span class="line">add_git_tag(</span><br><span class="line">  tag: tagNum</span><br><span class="line">)</span><br><span class="line">push_git_tags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 5、验证spec，并提至私有索引库</span><br><span class="line">pod_lib_lint(allow_warnings: true)</span><br><span class="line"># 因为本地索引库repo的名字是基本上不会去改变的，所以这里直接写死 LXFSpecs</span><br><span class="line"># podspec的名字需要由外界传入</span><br><span class="line">pod_push(path: &quot;#&#123;podspecName&#125;.podspec&quot;, repo: &quot;LXFSpecs&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><h3 id="2、验证Fastfile"><a href="#2、验证Fastfile" class="headerlink" title="2、验证Fastfile"></a>2、验证Fastfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane lanes</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/Fastfile验证成功.png" alt="Fastfile验证成功"></p><h3 id="3、执行fastlane"><a href="#3、执行fastlane" class="headerlink" title="3、执行fastlane"></a>3、执行fastlane</h3><p><strong>需要在组件仓库的根目录下执行</strong><br><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/根目录.png" alt="根目录"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane LXFUpdatePodTool tag:0.1.1 specName:LXFMain</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/开始执行.png" alt="开始执行"></p><p><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/上传完成.png" alt="上传完成"></p><p>整个执行过程不超过30秒～</p><h2 id="四、自定义Action"><a href="#四、自定义Action" class="headerlink" title="四、自定义Action"></a>四、自定义Action</h2><p>以上的过程已经可以完成一整个自动化更新了，但是有一点需要注意的是，这个输入的tag可能会面临一个问题，那就是本地和远程都可能已经存在，即发生冲突，这个时候我们可以选择自动删除本地和远程冲突的那个tag，再重新上传当前tag</p><h3 id="1、创建一个新的action"><a href="#1、创建一个新的action" class="headerlink" title="1、创建一个新的action"></a>1、创建一个新的action</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane new_action</span><br></pre></td></tr></table></figure><p>按要求输入Action名称<br><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/输入action名称.png" alt="输入action名称"></p><p>完成后fastlane目录下就会多出一个名为actions的文件夹，里面存放的就是你自定义action<br><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/actions文件夹.png" alt=""></p><h3 id="2、编辑自定义action"><a href="#2、编辑自定义action" class="headerlink" title="2、编辑自定义action"></a>2、编辑自定义action</h3><p>打开remove_git_tag.rb，开始自定义我们的action吧，什么？不会语法怎么办？可以参考别人的嘛，上面给出的<a href="https://github.com/fastlane/fastlane/tree/master/fastlane/lib/fastlane/actions" target="_blank" rel="noopener">action的源码地址</a>就有用武之地了，比如<a href="https://github.com/fastlane/fastlane/blob/master/fastlane/lib/fastlane/actions/pod_push.rb" target="_blank" rel="noopener">pod_push</a>。这里我直接贴出我已经完成的主要代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># 可以使用 fastlane action remove_git_tag 来参看详细描述</span><br><span class="line"></span><br><span class="line">def self.run(params)</span><br><span class="line">  # 这里写要执行的操作 </span><br><span class="line">  # params[:参数名称] 参数名称与下面self.available_options中的保持一致</span><br><span class="line">  tagNum = params[:tagNum]</span><br><span class="line">  rmLocalTag = params[:rmLocalTag]</span><br><span class="line">  rmRemoteTag = params[:rmRemoteTag]</span><br><span class="line"></span><br><span class="line">  command = []</span><br><span class="line">  if rmLocalTag</span><br><span class="line">    # 删除本地标签</span><br><span class="line">    # git tag -d 标签名称</span><br><span class="line">    command &lt;&lt; &quot;git tag -d #&#123;tagNum&#125;&quot;</span><br><span class="line">  end</span><br><span class="line">  if rmRemoteTag</span><br><span class="line">    # 删除远程标签</span><br><span class="line">    # git push origin :标签名称</span><br><span class="line">    command &lt;&lt; &quot;git push origin :#&#123;tagNum&#125;&quot;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  result = Actions.sh(command.join(&apos;&amp;&apos;))</span><br><span class="line">  UI.success(&quot;Successfully remove tag 🚀 &quot;)</span><br><span class="line">  return result</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def self.description</span><br><span class="line">  # 对当前脚本的简单描述</span><br><span class="line">  &quot;删除tag&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def self.details</span><br><span class="line">  # 对当前脚本的具体描述</span><br><span class="line">  &quot;使用当前action来删除本地和远程冲突的tag&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def self.available_options</span><br><span class="line">  # 用来传递参数</span><br><span class="line">  [ </span><br><span class="line">    FastlaneCore::ConfigItem.new(key: :tagNum,</span><br><span class="line">                                  description: &quot;输入即将删除的tag&quot;,</span><br><span class="line">                                  is_string: true),</span><br><span class="line">    FastlaneCore::ConfigItem.new(key: :rmLocalTag,</span><br><span class="line">                                  description: &quot;是否删除本地tag&quot;,</span><br><span class="line">                                  optional:true,</span><br><span class="line">                                  is_string: false,</span><br><span class="line">                                  default_value: true),</span><br><span class="line">    FastlaneCore::ConfigItem.new(key: :rmRemoteTag,</span><br><span class="line">                                  description: &quot;是否删除远程tag&quot;,</span><br><span class="line">                                  optional:true,</span><br><span class="line">                                  is_string: false,</span><br><span class="line">                                  default_value: true)</span><br><span class="line">  ]</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def self.authors</span><br><span class="line">  # 作者姓名</span><br><span class="line">  [&quot;LinXunFeng&quot;]</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="3、查看action描述"><a href="#3、查看action描述" class="headerlink" title="3、查看action描述"></a>3、查看action描述</h3><p>同样，这里先cd到组件库的根目录下执行，原因是这个自定义action只存在当前根目录下的fastlane中，其它fastlane的非自定义的action就不用在当前根目录下操作～<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane action remove_git_tag</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/查看具体描述.png" alt="查看具体描述"></p><h3 id="4、测试执行"><a href="#4、测试执行" class="headerlink" title="4、测试执行"></a>4、测试执行</h3><p>先来看看当前组件库已存在的tag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/已存在的tag.png" alt="已存在的tag"></p><p>可以看到，我是已经有一个<code>0.1.1</code>版本的了。这时我们再来执行一次LXFUpdatePodTool航道<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane LXFUpdatePodTool tag:0.1.1 specName:LXFMain</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018/04/iOS 组件化开发（四）：fastlane实现pod自动化/自动清除.png" alt="自动清除"></p><h2 id="五、工具拿走"><a href="#五、工具拿走" class="headerlink" title="五、工具拿走"></a>五、工具拿走</h2><p><a href="https://github.com/LinXunFeng/LXFUpdatePodTool" target="_blank" rel="noopener">LXFUpdatePodTool</a> 已经传到我的GitHub上，需要的同学就拿走吧，顺手给个Star咯 Orz</p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> Cocoapods </tag>
            
            <tag> iOS </tag>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 组件化开发（三）：加载资源文件</title>
      <link href="/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
      <url>/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>经过前两篇文章的学习，相信对组件化开发有了大致的了解，那我们这篇文章就来讲讲资源文件的加载吧</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>经过前两篇文章的学习，相信对组件化开发有了大致的了解，那我们这篇文章就来讲讲资源文件的加载吧</p></blockquote><p>这里我新建了一个LXFMain组件库，主要是用来显示TabBar的玩意，然后再进行组件化抽离出来，其中的过程这里不再赘述，还没了解过的同学建议先阅读下这两篇文章吧</p><p><a href="http://linxunfeng.top/2018/04/06/iOS-组件化开发（一）：远程私有库的基本使用/">iOS 组件化开发（一）：远程私有库的基本使用</a></p><p><a href="http://linxunfeng.top/2018/04/06/iOS-组件化开发（二）：远程私有库的更新与子库/">iOS 组件化开发（二）：远程私有库的更新与子库</a></p><p>这里跟之前不一样的地方在于多了图片资源，组件的核心代码放在Classes文件夹中，而图片我们则存放于Assets目录下，如图所示 </p><p><img src="/images/2018/04/iOS 组件化开发（三）：加载资源文件/存放位置.png" alt="存放位置"></p><h3 id="一、修改Spec"><a href="#一、修改Spec" class="headerlink" title="一、修改Spec"></a>一、修改Spec</h3><p>将关于资源加载的注释去掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s.resource_bundles = &#123;</span><br><span class="line"> # &apos;LXFMain&apos; =&gt; [&apos;LXFMain/Assets/*.png&apos;]</span><br><span class="line"> &apos;LXFMain&apos; =&gt; [&apos;LXFMain/Assets/*&apos;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回到LXFMain的模板库，我们进行一次本地的安装和测试(<code>pod install</code>)</p><p><img src="/images/2018/04/iOS 组件化开发（三）：加载资源文件/修改Spec-podInstall.png" alt=""></p><p>可以看到，图片资源也安装进来了，但是运行的效果如下图，图片并不能成功加载出来</p><p><img src="/images/2018/04/iOS 组件化开发（三）：加载资源文件/没有图标.png" alt="没有图标"></p><h2 id="二、修改加载资源代码"><a href="#二、修改加载资源代码" class="headerlink" title="二、修改加载资源代码"></a>二、修改加载资源代码</h2><p>这是当前加载图片的相关代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[UIImage imageNamed:@&quot;图片名称&quot;];</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018/04/iOS 组件化开发（三）：加载资源文件/showInFinder.png" alt="show in finder"></p><p>右击显示包内容<br><img src="/images/2018/04/iOS 组件化开发（三）：加载资源文件/LXFMain.framework.png" alt="LXFMain.framework"></p><p>图片就在这个<code>LXFMain.bundle</code>里面(这里就不截图看了)，这里主要是让大家对这个目录结构有个了解</p><p>我们对<code>imageNamed</code>进行跳转到定义操作<br><img src="/images/2018/04/iOS 组件化开发（三）：加载资源文件/imageNamed.png" alt="imageNamed"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// load from main bundle</span><br></pre></td></tr></table></figure><p>可以看到，官方注释着<code>imageNamed</code>加载的是main bundle中的资源,mainBundle的位置如下图<br><img src="/images/2018/04/iOS 组件化开发（三）：加载资源文件/mainBundle.png" alt="mainBundle"></p><p>这样当然就无法加载到图片啦，我们需要让它加载自己当前所在bundle里的图片 ，所以加载图片的代码需要进行修改<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *normalImgName = <span class="string">@"个人@2x.png"</span>;</span><br><span class="line"><span class="built_in">NSBundle</span> *curBundle = [<span class="built_in">NSBundle</span> bundleForClass:<span class="keyword">self</span>.class]; <span class="comment">// 获取当前bundle</span></span><br><span class="line"><span class="built_in">NSString</span> *normalImgPath = [curBundle pathForResource:normalImgName ofType:<span class="literal">nil</span> inDirectory:<span class="string">@"LXFMain.bundle"</span>];</span><br><span class="line"><span class="built_in">UIImage</span> *normalImage = [<span class="built_in">UIImage</span> imageWithContentsOfFile:normalImgPath];</span><br></pre></td></tr></table></figure></p><p>但是直接写<code>LXFMain.bundle</code>并不好，不可控，所以还需要改进一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NSString *normalImgName = [NSString stringWithFormat:@&quot;%@@2x.png&quot;, normalImg];</span><br><span class="line">NSBundle *curBundle = [NSBundle bundleForClass:self.class];</span><br><span class="line">//  *********** 重点 ***********   //</span><br><span class="line">NSString *curBundleName = curBundle.infoDictionary[@&quot;CFBundleName&quot;];</span><br><span class="line">NSString *curBundleDirectory = [NSString stringWithFormat:@&quot;%@.bundle&quot;, curBundleName];</span><br><span class="line">NSString *normalImgPath = [curBundle pathForResource:normalImgName ofType:nil inDirectory:curBundleDirectory];</span><br><span class="line">//  ***************************   //</span><br><span class="line">UIImage *normalImage = [UIImage imageWithContentsOfFile:normalImgPath];</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018/04/iOS 组件化开发（三）：加载资源文件/成功加载.png" alt="成功加载"></p><h2 id="三、聊聊xib"><a href="#三、聊聊xib" class="headerlink" title="三、聊聊xib"></a>三、聊聊xib</h2><p>Xib的加载也是如此<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSBundle *curBundle = [NSBundle bundleForClass:self.class];</span><br><span class="line">LXFCenterView *centerView = (LXFCenterView *)[curBundle loadNibNamed:@&quot;LXFCenterView&quot; owner:nil options:nil].firstObject;</span><br><span class="line">centerView.frame = CGRectMake(30, 140, 200, 100);</span><br><span class="line">[self.view addSubview:centerView];</span><br></pre></td></tr></table></figure></p><p>不过xib中值得一提的是，如果是直接在xib中拖入一个imageView控件来设置图片的加载，我们则需要在图片名字前加上当前bundle名称<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LXFMain.bundle/个人</span><br></pre></td></tr></table></figure></p><p>这里除了当前xib要加载的图片不属于mainBundle这个原因之外，还有一点就是xib文件与bundle存放位置属于同一级别，故直接使用相对路径的方式，在图片名字前加上bundle名称即可。</p><p><img src="/images/2018/04/iOS 组件化开发（三）：加载资源文件/同一目录级别.png" alt="同一目录级别"></p><p><img src="/images/2018/04/iOS 组件化开发（三）：加载资源文件/xib上的操作.png" alt="xib上的操作"></p><p>虽然无法在xib上直接看到效果，不过确实是有效的<br><img src="/images/2018/04/iOS 组件化开发（三）：加载资源文件/xib成功显示图片.png" alt="xib成功显示图片"></p><h2 id="四、遇到的小问题"><a href="#四、遇到的小问题" class="headerlink" title="四、遇到的小问题"></a>四、遇到的小问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] Unable to find a pod with name, author, summary, or description matching `lxfmain`</span><br></pre></td></tr></table></figure><p>我做完一切操作后发现搜索报上面那个错，解决方案是删除本地索引文件，然后再搜索一遍，系统会自动帮你再生成一切本地索引文件，然后就搞定了～<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/Library/Caches/CocoaPods/search_index.json </span><br><span class="line">pod search lxfmain</span><br></pre></td></tr></table></figure></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> Cocoapods </tag>
            
            <tag> iOS </tag>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 组件化开发（二）：远程私有库的更新与子库</title>
      <link href="/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%AD%90%E5%BA%93/"/>
      <url>/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%AD%90%E5%BA%93/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>在上一篇【<a href="http://linxunfeng.top/2018/04/06/iOS-组件化开发（一）：远程私有库的基本使用/">iOS 组件化开发（一）：远程私有库的基本使用</a>】中我们已经实战了远程私有库的基本操作，但是组件不可能上传一次就完事了，随着业务的增加，我们的组件可能还需要添加更多的东西，或者修复一些问题，这就需要我们对私有库代码进行升级与维护</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>在上一篇【<a href="http://linxunfeng.top/2018/04/06/iOS-组件化开发（一）：远程私有库的基本使用/">iOS 组件化开发（一）：远程私有库的基本使用</a>】中我们已经实战了远程私有库的基本操作，但是组件不可能上传一次就完事了，随着业务的增加，我们的组件可能还需要添加更多的东西，或者修复一些问题，这就需要我们对私有库代码进行升级与维护</p></blockquote><p>这里以对基础组件里添加了一个Cache工具为例</p><p><img src="/images/2018/04/iOS 组件化开发（二）：远程私有库的更新与子库/添加Cache工具.png" alt="添加Cache工具"></p><p>添加完成后我们需要更新到远程仓库</p><h2 id="一、更新远程仓库"><a href="#一、更新远程仓库" class="headerlink" title="一、更新远程仓库"></a>一、更新远程仓库</h2><p>cd 到本地仓库的位置，执行以下操作</p><h3 id="1、代码更新"><a href="#1、代码更新" class="headerlink" title="1、代码更新"></a>1、代码更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;更新描述&apos;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（二）：远程私有库的更新与子库/代码升级.png" alt="代码升级"></p><h3 id="2、版本更新"><a href="#2、版本更新" class="headerlink" title="2、版本更新"></a>2、版本更新</h3><p><strong>版本更新 这一步非常重要，为更新索引库做准备</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &apos;新版本号&apos; -m &apos;注释&apos;</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（二）：远程私有库的更新与子库/版本升级.png" alt="版本升级"></p><p>查看远程仓库，标签数已经有2个了，点进去就可以看到0.2.0，这里我们就不去看了<br><img src="/images/2018/04/iOS 组件化开发（二）：远程私有库的更新与子库/2个标签.png" alt=""></p><h2 id="二、修改描述文件并更新索引库"><a href="#二、修改描述文件并更新索引库" class="headerlink" title="二、修改描述文件并更新索引库"></a>二、修改描述文件并更新索引库</h2><h3 id="1、修改Sepc"><a href="#1、修改Sepc" class="headerlink" title="1、修改Sepc"></a>1、修改Sepc</h3><p>打开你的<code>xx.podspec</code>文件，将原本的版本号改为<code>0.2.0</code>，与刚刚的tag保持一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.version = &apos;0.2.0&apos;</span><br></pre></td></tr></table></figure></p><h3 id="2、验证远程Spec"><a href="#2、验证远程Spec" class="headerlink" title="2、验证远程Spec"></a>2、验证远程Spec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint --private</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（二）：远程私有库的更新与子库/验证远程Spec.png" alt="验证远程Spec"></p><h3 id="3、更新索引库"><a href="#3、更新索引库" class="headerlink" title="3、更新索引库"></a>3、更新索引库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo push 索引库名称 xxx.podspec</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（二）：远程私有库的更新与子库/更新索引库.png" alt="更新索引库"></p><h2 id="三、更新使用"><a href="#三、更新使用" class="headerlink" title="三、更新使用"></a>三、更新使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// --no-repo-update 不更新本地索引库</span><br><span class="line">// 因为刚刚已经自己手动更新过了，所以这里我们选择跳过更新</span><br><span class="line">pod update --no-repo-update</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（二）：远程私有库的更新与子库/更新框架.png" alt="更新框架"></p><p><img src="/images/2018/04/iOS 组件化开发（二）：远程私有库的更新与子库/更新成功.png" alt="更新成功"></p><hr><h2 id="四、第三方依赖"><a href="#四、第三方依赖" class="headerlink" title="四、第三方依赖"></a>四、第三方依赖</h2><p>当我们的私有库需要依赖其它第三方才可以正常使用时，我们就需要在spec文件中开启依赖，例如下面所示代码，表明当前仓库需要依赖AFN和SDWebImage<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 3.2.0&apos;</span><br><span class="line">s.dependency &apos;SDWebImage&apos;, &apos;~&gt; 4.3.3&apos;</span><br></pre></td></tr></table></figure></p><p>修改后更新操作同上所述，这里就不再赘述了。</p><p>但是这里存在一个问题，如果来了一位新的小伙伴，他所负责的部分只需要LXFBase下的Category，而LXFBase下的Cache才需要依赖SDWebImage，此时他若是pod一整个LXFBase岂不是平白无故安装了第三方依赖库，那应该怎么做呢？</p><blockquote><p>方案就是可以通过子库Subspecs来解决因需要一个小小的工具而依赖整个基础组件的问题</p></blockquote><h2 id="五、子库Subspecs"><a href="#五、子库Subspecs" class="headerlink" title="五、子库Subspecs"></a>五、子库Subspecs</h2><p>什么是Subspecs？这里我们可以搜索一下SDWebImage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search &apos;SDWebImage&apos;</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（二）：远程私有库的更新与子库/Subspecs.png" alt="Subspecs"></p><p>可以看到，如果我们只需要用到SDWebImage中的GIF功能，那么并不需要将整个SDWebImage都下载下来，在Podfile中将<del><code>pod &#39;SDWebImage&#39;</code></del> 改为 <code>pod SDWebImage/GIF</code>即可单独使用这一功能</p><p>那接下来我们就来看看怎么描述一个子库吧</p><h3 id="子库格式"><a href="#子库格式" class="headerlink" title="子库格式"></a>子库格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.subspec &apos;子库名称&apos; do |别名|</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>因为这里已经分离出子库了，所以<code>s.source_files</code>和<code>s.dependency</code>就不能这么使用了，需要我们在子库里分别指定，所以我们直接把原来的<code>s.source_files</code>和<code>s.dependency</code>都注释掉。写法参考如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># s.source_files = &apos;LXFBase/Classes/**/*&apos;</span><br><span class="line"># s.dependency &apos;SDWebImage&apos;, &apos;~&gt; 4.3.3&apos;</span><br><span class="line"></span><br><span class="line">s.subspec &apos;Cache&apos; do |c|</span><br><span class="line">  c.source_files = &apos;LXFBase/Classes/Cache/**/*&apos;</span><br><span class="line">  c.dependency &apos;SDWebImage&apos;, &apos;~&gt; 4.3.3&apos;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">s.subspec &apos;Category&apos; do |c|</span><br><span class="line">  c.source_files = &apos;LXFBase/Classes/Category/**/*&apos;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">s.subspec &apos;Tool&apos; do |t|</span><br><span class="line">  t.source_files = &apos;LXFBase/Classes/Tool/**/*&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>修改后再按之前的步骤更新索引库和组件库就可以了</p><p><strong>ps: 在添加第三方依赖描述后做验证或者上传操作可能会很慢，因为它在克隆第三方库如SDWebImage，有兴趣的可以在命令后面加入<code>--verbose</code>来查看详情情况</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint --private --verbose</span><br></pre></td></tr></table></figure></p><p>在成功更新组件库和索引库后我们再来搜索一下试试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search &apos;LXFBase&apos;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018/04/iOS 组件化开发（二）：远程私有库的更新与子库/subspec添加成功.png" alt="subspec添加成功"></p><p>现在就可以爱装哪个就装哪个了，在Podfile中指定要安装的子库就行了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;LXFBase/Cache&apos;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（二）：远程私有库的更新与子库/安装指定子库与依赖库.png" alt="安装指定子库与依赖库"></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> Cocoapods </tag>
            
            <tag> iOS </tag>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 组件化开发（一）：远程私有库的基本使用</title>
      <link href="/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/04/06/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>随着项目功能的不断增加，越来越多的开发人员加入，业务主线也随之越来越多，造成耦合越来越严重，编译越来越慢，测试不独立等一系列问题。为了解决此类情况，我们可以考虑到使用组件化开发</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>随着项目功能的不断增加，越来越多的开发人员加入，业务主线也随之越来越多，造成耦合越来越严重，编译越来越慢，测试不独立等一系列问题。为了解决此类情况，我们可以考虑到使用组件化开发</p></blockquote><p>1.概念<br>组件化就是将一个单一工程的项目, 分解成为各个独立的组件， 然后按照某种方式, 任意组织成一个拥有完整业务逻辑的工程。</p><p>2.优势</p><ul><li>独立：独立编写、编译、运行、测试</li><li>重用：功能代码的重复使用。比如不同项目使用同一功能模块</li><li>高效：任意增删模块，实现高效迭代</li><li>组件化还可以配合二进制化, 提高项目编译速度</li></ul><p>3.组件分类<br>大体上分三类：基础组件、功能组件和业务组件<br></p><ul><li>基础组件：也称为公共组件，存放平时定义的宏、常量、协议、分类、对必要的第三方的封装类，以及各种处理工具类，如：时间、日期、设备信息、文件处理、沙盒管理等</li><li>功能组件： 自定义视图控件、一些特定功能的封装（如录音、播放音频封装）</li><li>业务组件：各种业务线</li></ul><hr><blockquote><p>本篇先来介绍下远程私有库的基本使用，建议按顺序看完之后，回来再看一遍步骤归纳，加深了解，如有不足之处，欢迎指出，感谢 : )</p></blockquote><h2 id="步骤归纳"><a href="#步骤归纳" class="headerlink" title="步骤归纳"></a>步骤归纳</h2><ol><li><p>创建远程索引库和私有库</p></li><li><p>将远程索引库添加到本地 <code>pod repo add 索引库名称 索引库地址</code></p></li><li><p>在本地创建一个pod模板库 <code>pod lib create 组件名称</code><br>将框架的核心代码添加到Classes目录下<br>本地安装测试核心代码是否可用 <code>pod install</code><br>修改Spec描述文件<br>将修改好的模板库上传至远程私有库</p></li><li><p>上传代码和打标签<br><br><code>git init</code><br><br><code>git add .</code><br><br><code>git commit -m &quot;提交描述&quot;</code><br><br><code>git remote add origin 远程私有库地址</code><br><br><code>git push origin master</code><br><br><code>git tag &#39;0.1.0&#39;</code><br><br><code>git push --tags</code></p></li><li><p>提交spec至私有索引库<br><br><code>pod lib lint --private</code><br><br><code>pod spec lint --private</code><br><br><code>pod repo push 索引库的本地名称 xx.podspec</code></p></li><li><p>使用<br><br><code>source 官方索引库url</code><br><br><code>source 私有索引库url</code><br><br><code>pod &#39;组件名称&#39;</code><br><br><code>pod install</code></p></li></ol><p><strong>接下来我们就来实战如何创建和使用私有库</strong></p><h2 id="一、创建私有索引库"><a href="#一、创建私有索引库" class="headerlink" title="一、创建私有索引库"></a>一、创建私有索引库</h2><p>这里以码云为例，创建一个LXFSpecs的私有索引库，这玩意的作用如其名，就是用来索引的</p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/私有索引库.png" alt="私有索引库"></p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/LXFSpecs.png" alt="LXFSpecs"></p><h2 id="二、本地添加私有索引库"><a href="#二、本地添加私有索引库" class="headerlink" title="二、本地添加私有索引库"></a>二、本地添加私有索引库</h2><h3 id="1、查看本地索引库"><a href="#1、查看本地索引库" class="headerlink" title="1、查看本地索引库"></a>1、查看本地索引库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/查看本地索引库.png" alt="查看本地索引库"></p><p>如图，目前本地仅有github上的那个公有索引库</p><h3 id="2、添加私有索引库"><a href="#2、添加私有索引库" class="headerlink" title="2、添加私有索引库"></a>2、添加私有索引库</h3><p>将我们刚刚新建的私有索引库LXFSpecs添加到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// pod repo add 索引库名称 索引库地址</span><br><span class="line">pod repo add LXFSpecs https://gitee.com/LinXunFeng/LXFSpecs.git</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/添加私有索引库.png" alt=""></p><p>现在本地就有两个索引库，好，索引库的事情就先放一边去了～</p><h2 id="三、创建组件库"><a href="#三、创建组件库" class="headerlink" title="三、创建组件库"></a>三、创建组件库</h2><p>码云上的创建操作同上，这里以LXFBase为例，创建基础组件库<br><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/LXFBase.png" alt="LXFBase"></p><h3 id="1、快速创建模版库"><a href="#1、快速创建模版库" class="headerlink" title="1、快速创建模版库"></a>1、快速创建模版库</h3><p>到合适的位置创建一个与组件名相同的文件夹，cd进去后，使用如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// pod lib create 组件名</span><br><span class="line">pod lib create LXFBase</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/快速创建模版库.png" alt=""></p><p>这里会让你配置一些信息，根据自己的情况自行配置即可。</p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/快速创建模版库-配置.png" alt="配置"></p><h3 id="2、添加组件内容"><a href="#2、添加组件内容" class="headerlink" title="2、添加组件内容"></a>2、添加组件内容</h3><p>创建完成后会自动帮我们打开相应的Example项目，LXFBase目录中会出现如图这些文件，我们把基础组件相关的东西丢到Classes文件夹中，并且把<code>ReplaceMe.m</code>文件删除</p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/目录结构.png" alt="目录结构"></p><p>默认Classes文件夹中存放的文件就是pod install时要下载下来的文件，当然可以通过修改spec文件的配置来更改位置</p><h3 id="3、安装与测试本地库"><a href="#3、安装与测试本地库" class="headerlink" title="3、安装与测试本地库"></a>3、安装与测试本地库</h3><p>在Example项目的Podfile文件中可以看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;LXFBase&apos;, :path =&gt; &apos;../&apos;</span><br></pre></td></tr></table></figure></p><p>模板库已经默认帮我们在Podfile中指定了LXFBase.podspec的位置，使组件LXFBase可以正常安装使用和方便测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/安装与测试本地库-podinstall.png" alt="pod install"></p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/安装与测试本地库-pod.png" alt="pod"></p><p>可以看到我们已经将本地的组件添加进Example中了，现在可以尽情地做你想做的测试，确保组件的可用。</p><p>测试组件没有问题后，我们接下来就要将podspec文件上传至私有索引库，不过在此之前，需要对spec进行修改。</p><h3 id="4、-修改Spec"><a href="#4、-修改Spec" class="headerlink" title="4、 修改Spec"></a>4、 修改Spec</h3><p>具体的配置说明可以参考<a href="https://juejin.im/post/5ac446b8f265da238d50ecfa" target="_blank" rel="noopener">Cocoapods 创建第三方框架</a></p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/修改Spec-podspec.png" alt="podspec"></p><p>主要的修改内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  s.name             = &apos;LXFBase&apos;</span><br><span class="line">  s.version          = &apos;0.1.0&apos;</span><br><span class="line">  s.summary          = &apos;LXFBase.&apos;</span><br><span class="line">  s.description      = &lt;&lt;-DESC</span><br><span class="line">LXFBase是基础组件库，包括分类和常用工具</span><br><span class="line">                       DESC</span><br><span class="line">  s.homepage         = &apos;https://gitee.com/LinXunFeng/LXFBase&apos;</span><br><span class="line">  s.source           = &#123; :git =&gt; &apos;https://gitee.com/LinXunFeng/LXFBase.git&apos;, :tag =&gt; s.version.to_s &#125;</span><br><span class="line">  s.source_files = &apos;LXFBase/Classes/**/*&apos;</span><br></pre></td></tr></table></figure><h2 id="四、上传组件代码"><a href="#四、上传组件代码" class="headerlink" title="四、上传组件代码"></a>四、上传组件代码</h2><h3 id="1、将代码提交到组件仓库"><a href="#1、将代码提交到组件仓库" class="headerlink" title="1、将代码提交到组件仓库"></a>1、将代码提交到组件仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;firstCommit&apos;</span><br><span class="line">git remote add origin https://gitee.com/LinXunFeng/LXFBase.git</span><br><span class="line">// 第一次push如果报错的话可以加上-f</span><br><span class="line">// git push -f origin master</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="2、打标签"><a href="#2、打标签" class="headerlink" title="2、打标签"></a>2、打标签</h3><p>标签<code>0.1.0</code>与spec中的<code>s.version</code>保持一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag &apos;0.1.0&apos;</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/上传组件代码-tag.png" alt="tag"></p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/上传组件代码-标签上传成功.png" alt="标签上传成功"></p><h2 id="五、提交podspec到私有索引库"><a href="#五、提交podspec到私有索引库" class="headerlink" title="五、提交podspec到私有索引库"></a>五、提交podspec到私有索引库</h2><p>在上传spec文件前我们可以做一个验证来节省时间，不然每次都推送很久结果还是验证失败，会气死人的～</p><h3 id="1、本地验证Spec的必填字段"><a href="#1、本地验证Spec的必填字段" class="headerlink" title="1、本地验证Spec的必填字段"></a>1、本地验证Spec的必填字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 本地验证不会验证 s.source 中的tag</span><br><span class="line">pod lib lint</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/提交podspec到私有索引库-podLibLint.png" alt="pod lib lint"></p><h3 id="2、远程验证"><a href="#2、远程验证" class="headerlink" title="2、远程验证"></a>2、远程验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 远程验证会验证 s.source 中的tag，如果此时没有打上相应的标签则会报错</span><br><span class="line">pod spec lint</span><br></pre></td></tr></table></figure><p>如果你刚才没有打标签并上传至远程私有库就来进行远程验证，肯定是会报错的</p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/提交podspec到私有索引库-tagError.png" alt="tag Error"></p><p>在打完并上传tag后再进行远程验证，就会验证成功了，验证成功后我们就可以进行下一步操作：提交podspec文件到索引库</p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/提交podspec到私有索引库-podSpecLint.png" alt="pod spec lint"></p><ul><li>验证私有库提示<br>如果验证的是私有库，则在后面加上<code>--private</code>,否则会有警告，你可以选择<code>--allow-warnings</code>来忽略该警告<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint --private</span><br><span class="line">pod spec lint --private</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、提交podspec"><a href="#3、提交podspec" class="headerlink" title="3、提交podspec"></a>3、提交podspec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// pod repo push 私有索引库名称 spec名称.podspec </span><br><span class="line">pod repo push LXFSpecs LXFBase.podspec</span><br></pre></td></tr></table></figure><p>这里的操作过程：先将我们的代码直接push到本地索引库LXFSpecs，推送后会自动帮我们同步到远程索引库</p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/提交podspec到私有索引库-提交成功.png" alt="提交成功"></p><p>再来看看码云上的私有索引库LXFSpecs</p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/提交podspec到私有索引库-LXFBase.podspec.png" alt="LXFBase.podspec"></p><p>来测试下搜索我们的组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search &apos;LXFBase&apos;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/提交podspec到私有索引库-搜索成功.png" alt="搜索成功"></p><h2 id="六、使用私有库"><a href="#六、使用私有库" class="headerlink" title="六、使用私有库"></a>六、使用私有库</h2><p>这时我们可以来试试通过pod形式来添加组件LXFBase，创建一个新的项目</p><h3 id="1、添加Podfile文件"><a href="#1、添加Podfile文件" class="headerlink" title="1、添加Podfile文件"></a>1、添加Podfile文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure><h3 id="2、在Podfile的最顶部添加如下描述"><a href="#2、在Podfile的最顶部添加如下描述" class="headerlink" title="2、在Podfile的最顶部添加如下描述"></a>2、在Podfile的最顶部添加如下描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 第二行是为了保证公有库的正常使用</span><br><span class="line">source &apos;https://gitee.com/LinXunFeng/LXFSpecs.git&apos;</span><br><span class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;</span><br></pre></td></tr></table></figure><h3 id="3、添加使用组件LXFBase"><a href="#3、添加使用组件LXFBase" class="headerlink" title="3、添加使用组件LXFBase"></a>3、添加使用组件LXFBase</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;LXFBase&apos;</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/使用私有库-LXFBase.png" alt=""></p><h3 id="4、安装组件"><a href="#4、安装组件" class="headerlink" title="4、安装组件"></a>4、安装组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/使用私有库-安装成功.png" alt="安装成功"><br><img src="/images/2018/04/iOS 组件化开发（一）：远程私有库的基本使用/使用私有库-成功添加组件内容.png" alt="成功添加组件内容"></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> Cocoapods </tag>
            
            <tag> iOS </tag>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cocoapods 创建第三方框架</title>
      <link href="/2018/04/06/Cocoapods-%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/04/06/Cocoapods-%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>将框架中的主要文件放入到一个指定文件夹中，比如叫Classes或者Lib都可以</excerpt></p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="一、上传项目到github"><a href="#一、上传项目到github" class="headerlink" title="一、上传项目到github"></a>一、上传项目到github</h2><p>将框架中的主要文件放入到一个指定文件夹中，比如叫Classes或者Lib都可以<br><img src="/images/2018/04/Cocoapods 创建第三方框架/目录结构.png" alt="目录结构"></p><ul><li>打开终端，cd到框架目录 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/lxf/xxxx/LXFPhotoHelper</span><br></pre></td></tr></table></figure><ul><li>初始化仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>将当前目录添加到缓存区</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><ul><li>提交到本地仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;描述&apos;</span><br></pre></td></tr></table></figure><ul><li>添加远程仓库地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/LinXunFeng/xxx.git</span><br></pre></td></tr></table></figure><ul><li>提交到远程仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>如果出现如下提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &apos;https://github.com/xxx/xxx.git/&apos;: The requested URL returned error: 403</span><br></pre></td></tr></table></figure></p><p>原因是本地缓存了用户名和密码<br>编辑.git目录下的config文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi .git/config</span><br></pre></td></tr></table></figure></p><p>找到url那一行，在github.com前加上用户名后保存，再重新执行推送操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = https://LinXunFeng@github.com/LinXunFeng/xxx.git</span><br></pre></td></tr></table></figure></p><ul><li>打标签</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 具体说明可以执行`git tag --help`后查看</span><br><span class="line">// git tag -a &apos;版本号&apos; -m &apos;tag描述&apos;</span><br><span class="line">// 注意一下，这里打的标签只是在本地</span><br><span class="line">git tag &apos;0.0.1&apos;</span><br></pre></td></tr></table></figure><ul><li>推着所有标签至远程仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 只推着指定版本</span><br><span class="line">// git push origin 版本号 </span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><h2 id="二、创建并修改podspec文件"><a href="#二、创建并修改podspec文件" class="headerlink" title="二、创建并修改podspec文件"></a>二、创建并修改podspec文件</h2><ul><li>创建Spec文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 名称一般与工程名称保持一致</span><br><span class="line">pod spec create 框架名称</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/2018/04/Cocoapods 创建第三方框架/podspec文件.png" alt="podspec文件"></p><ul><li>修改Spec文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s.name         = &quot;LXFPhotoHelper（仓库名称）&quot;</span><br><span class="line">s.version      = &quot;0.0.1（版本号，这里跟下面s.source中的tag有关）&quot;</span><br><span class="line">s.summary      = &quot;对你自己仓库的简单描述，不要写太多字&quot;</span><br><span class="line">s.description  = &quot;这个是详细描述，这里需要注意的是，这里文字的长度需要比  </span><br><span class="line">s.summary的要长，不然会出现警告&quot;</span><br><span class="line">s.homepage     = &quot;仓库首页地址，如https://github.com/LinXunFeng/LXFPhotoHelper&quot;</span><br><span class="line">s.license      = &quot;MIT&quot;</span><br><span class="line">s.author       = &#123; &quot;LinXunFeng&quot; =&gt; &quot;598600855@qq.com&quot; &#125;</span><br><span class="line"># source存放的地址是代码的真正地址</span><br><span class="line">s.source       = &#123; :git =&gt; &quot;仓库对应的git地址，如https://github.com/LinXunFeng/LXFPhotoHelper.git&quot;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class="line"># pod install时真正下载下来的文件路径，这里指定的是你仓库下的Classes目录中的所有.h和.m文件（填写的是相对地址）</span><br><span class="line"># ** 通配目录</span><br><span class="line">s.source_files  = &quot;Classes&quot;, &quot;Classes/**/*.&#123;h,m&#125;&quot;</span><br><span class="line"></span><br><span class="line"># s.library = &quot;sqlite3&quot; # 框架依赖系统的sqlite3</span><br></pre></td></tr></table></figure></li></ul><p>也可以上官网的手册【<a href="https://guides.cocoapods.org/syntax/podspec.html" target="_blank" rel="noopener">Podspec Syntax Reference</a>】上查看</p><p>这里需要我们注意的是<code>s.version= &quot;0.0.1&quot;</code>，这里的版本号要与刚刚打的tag一致</p><h2 id="三、注册trunk"><a href="#三、注册trunk" class="headerlink" title="三、注册trunk"></a>三、注册trunk</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// --verbose 打印详情信息</span><br><span class="line">// pod trunk register 邮箱 &apos;你的名称&apos; --verbose</span><br><span class="line">pod trunk register 598600855@qq.com &apos;LinXunFeng&apos; --verbose</span><br></pre></td></tr></table></figure><p>然后去验证邮箱<br><img src="/images/2018/04/Cocoapods 创建第三方框架/验证成功.png" alt="验证成功"><br>验证成功后会提示我们回到终端，并敲入<code>pod trunk push 名称.podspec</code></p><h2 id="四、上传Spec"><a href="#四、上传Spec" class="headerlink" title="四、上传Spec"></a>四、上传Spec</h2><p>执行<code>pod trunk push</code>后会有一个审核的过程，如果提示没有通过，有ERROR就修改好后重新push，如果只是WARN可以选择在<code>pod trunk push</code>后面加上<code>--allow-warnings</code>来忽略它们<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push LXFPhotoHelper.podspec --allow-warnings</span><br></pre></td></tr></table></figure></p><p>如果出现如下信息，则说明你的框架名字已被占用，得重新改个名字～<br>所以，在创建你自己的cocoapods仓库时最好是到<a href="https://cocoapods.org/" target="_blank" rel="noopener">cocoapods.org</a>上先查一下有没有相同名字的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] You (xxx@qq.com) are not allowed to push new versions for this pod. The owners of this pod are yyy@qq.com.</span><br></pre></td></tr></table></figure></p><p>上传成功后会自动帮我们更新本地仓库，如果无法搜索到自己的框架，可以先删掉本地的索引文件后再搜索一次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ~/Library/Caches/CocoaPods/search_index.json</span><br></pre></td></tr></table></figure></p><p>当使用pod search 命令可以搜索自己的框架时, 那么就意味着审核通过了</p></the>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> Cocoapods </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python - 虚拟环境</title>
      <link href="/2018/04/02/Python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/04/02/Python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>平时在开发时我们都会先安装一些python需要的包，每次安装都会有一个版本，如果不同项目需要不同版本的包时就会出现不兼容的情况。应对这种情况我们就可以搭建多个虚拟环境来应对不同的环境需求，在虚拟环境中搭建一个Python项目运行所需要的那些包，将来根据运行的项目来切换不同环境即可</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>平时在开发时我们都会先安装一些python需要的包，每次安装都会有一个版本，如果不同项目需要不同版本的包时就会出现不兼容的情况。应对这种情况我们就可以搭建多个虚拟环境来应对不同的环境需求，在虚拟环境中搭建一个Python项目运行所需要的那些包，将来根据运行的项目来切换不同环境即可</p></blockquote><p>我们可以在当前用户的家目录中找到【.virtualenvs】文件夹，查看当前所有的虚拟环境</p><p><img src="/images/2018/04/Python - 虚拟环境/virtualenvs.png" alt="virtualenvs"></p><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><ul><li>创建：mkvirtualenv [虚拟环境名称]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv lxfenv1</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/Python - 虚拟环境/mkvirtualenv.png" alt="安装成功"></p><p>注：创建的过程需要联网</p><p><img src="/images/2018/04/Python - 虚拟环境/目录结构.png" alt="目录结构"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Installing setuptools, pkg_resources, pip, wheel...done.</span><br></pre></td></tr></table></figure><p>刚刚安装时提示安装的这些东西就存放在你创建好的虚拟环境下的【lib/python2.7/site-packages/】目录中</p><p><img src="/images/2018/04/Python - 虚拟环境/lib目录.png" alt="lib目录"></p><ul><li>退出：deactivate<br>当我们安装好虚拟环境后默认就使用了该虚拟环境，如图标识处可以看出</li></ul><p><img src="/images/2018/04/Python - 虚拟环境/当前环境.png" alt="当前环境"></p><p>如果你想退出当前的虚拟环境，或以使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/Python - 虚拟环境/退出环境.png" alt="退出环境"></p><ul><li>进入：workon [虚拟环境名称]</li></ul><p>使用指定的虚拟环境则使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon lxfenv1</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/Python - 虚拟环境/workon.png" alt="workon"></p><ul><li>删除：rmvirtualenv [虚拟环境名称]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmvirtualenv lxfenv1</span><br></pre></td></tr></table></figure><h2 id="安装拓展包"><a href="#安装拓展包" class="headerlink" title="安装拓展包"></a>安装拓展包</h2><ul><li>查看当前安装好的包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br><span class="line">或者</span><br><span class="line">pip freeze</span><br></pre></td></tr></table></figure><p><img src="/images/2018/04/Python - 虚拟环境/查看当前安装好的包.png" alt="查看当前安装好的包"></p><p>ps: 上图<code>pip list</code>中列出的四个包是安装虚拟环境必定会安装的包<br>如图，<code>pip list</code>会列出所有的包，而<code>pip freeze</code>只会列出扩展的包</p><ul><li>安装指定包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install django==1.8.2</span><br><span class="line"># ==1.8.2 为指定版本号，不写则直接安装最新的包</span><br></pre></td></tr></table></figure></li></ul><p><strong>注： pip install xxx 会自动删除旧版本，再安装新版本</strong></p><p>如果不知道包名可以到<a href="https://pypi.python.org" target="_blank" rel="noopener">pypi</a>上搜索</p><p><img src="/images/2018/04/Python - 虚拟环境/安装指定的包.png" alt="安装指定的包"></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RxSwift + MJRefresh 打造自动处理刷新控件状态</title>
      <link href="/2017/10/24/RxSwift-MJRefresh-%E6%89%93%E9%80%A0%E8%87%AA%E5%8A%A8%E5%A4%84%E7%90%86%E5%88%B7%E6%96%B0%E6%8E%A7%E4%BB%B6%E7%8A%B6%E6%80%81/"/>
      <url>/2017/10/24/RxSwift-MJRefresh-%E6%89%93%E9%80%A0%E8%87%AA%E5%8A%A8%E5%A4%84%E7%90%86%E5%88%B7%E6%96%B0%E6%8E%A7%E4%BB%B6%E7%8A%B6%E6%80%81/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>MVVM的模式中，多出了ViewModel这个角色，将逻辑处理、网络请求等繁杂操作中ViewController中抽离出来，ViewController得以瘦身。<br>结合RxSwift架构，我们一般就会在ViewModel中定义一个input收集繁杂操作所需的信息，通过一个transform方法将input作为参数传入，进而得到一个output供controller使用。</p><p>在使用RxSwift开发时会大量的使用到这种形式，其中就包括我们的网络请求。</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>本文是基于 <a href="http://linxunfeng.top/2017/09/12/iOS-RxSwift-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/">iOS - RxSwift 项目实战记录</a> 所述，如果你还未阅读过，建议你最好还先阅读一遍，并下载Demo熟悉一下 : )</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MVVM的模式中，多出了ViewModel这个角色，将逻辑处理、网络请求等繁杂操作中ViewController中抽离出来，ViewController得以瘦身。<br>结合RxSwift架构，我们一般就会在ViewModel中定义一个input收集繁杂操作所需的信息，通过一个transform方法将input作为参数传入，进而得到一个output供controller使用。</p><p>在使用RxSwift开发时会大量的使用到这种形式，其中就包括我们的网络请求。<br>结合 <a href="http://linxunfeng.top/2017/09/12/iOS-RxSwift-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/">iOS - RxSwift 项目实战记录</a> 中所述的“MJRefresh在RxSwift中的使用”，在output中定义了一个变量<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> refreshStatus = <span class="type">Variable</span>&lt;<span class="type">LXFRefreshStatus</span>&gt;(.<span class="keyword">none</span>)</span><br></pre></td></tr></table></figure></p><p>controller通过output将其进行监听，从而当值发生变化时，controller就能实时获取当前应所处的刷新状态<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vmOutput.refreshStatus.asObservable().subscribe(onNext: &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] status <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> status &#123;</span><br><span class="line">    <span class="keyword">case</span> .beingHeaderRefresh:</span><br><span class="line">        <span class="keyword">self</span>?.tableView.mj_header.beginRefreshing()</span><br><span class="line">    <span class="keyword">case</span> .endHeaderRefresh:</span><br><span class="line">        <span class="keyword">self</span>?.tableView.mj_header.endRefreshing()</span><br><span class="line">    <span class="keyword">case</span> .beingFooterRefresh:</span><br><span class="line">        <span class="keyword">self</span>?.tableView.mj_footer.beginRefreshing()</span><br><span class="line">    <span class="keyword">case</span> .endFooterRefresh:</span><br><span class="line">        <span class="keyword">self</span>?.tableView.mj_footer.endRefreshing()</span><br><span class="line">    <span class="keyword">case</span> .noMoreData:</span><br><span class="line">        <span class="keyword">self</span>?.tableView.mj_footer.endRefreshingWithNoMoreData()</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).addDisposableTo(rx_disposeBag)</span><br></pre></td></tr></table></figure></p><p>如果在一个项目多处使用到了这种方式，我们就可以看到弊端——重复代码，过于冗余。</p><p>难道我们每次都要在controller中进行如此操作吗？</p><h2 id="面向协议"><a href="#面向协议" class="headerlink" title="面向协议"></a>面向协议</h2><p>关于协议的内容可以看下我之前的这两篇文章<br><a href="http://linxunfeng.top/2017/09/12/iOS-Swift-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/">iOS - Swift 面向协议编程（一）</a></p><p> <a href="http://linxunfeng.top/2017/09/12/iOS-Swift-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/">iOS - Swift 面向协议编程（二）</a></p><p>总结协议的两大作用：1、规范  2、定制能力</p><p>定义协议 Refreshable </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ============================ Refreshable ================================ */</span></span><br><span class="line"><span class="comment">// 需要使用 MJExtension 的控制器使用</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Refreshable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Refreshable</span> <span class="title">where</span> <span class="title">Self</span> : <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">initRefreshHeader</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView, <span class="number">_</span> action: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">MJRefreshHeader</span> &#123;</span><br><span class="line">        scrollView.mj_header = <span class="type">MJRefreshNormalHeader</span>(refreshingBlock: &#123; action() &#125;)</span><br><span class="line">        <span class="keyword">return</span> scrollView.mj_header</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">initRefreshFooter</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView, <span class="number">_</span> action: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) -&gt; <span class="type">MJRefreshFooter</span> &#123;</span><br><span class="line">        scrollView.mj_footer = <span class="type">MJRefreshAutoNormalFooter</span>(refreshingBlock: &#123; action() &#125;)</span><br><span class="line">        <span class="keyword">return</span> scrollView.mj_footer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在controller中遵循 Refreshable 协议，通过initRefreshHeader方法或者initRefreshFooter方法给tableView或者collectionView赋予头部或尾部刷新的能力，并且书写下拉刷新时需要执行的代码<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下拉刷新为例</span></span><br><span class="line"><span class="keyword">let</span> refreshHeader = initRefreshHeader(liveCollectionView) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// 下拉后需要执行的操作 </span></span><br><span class="line">    <span class="keyword">self</span>?.vmOutput?.requestCommand.onNext(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来再讲讲output，只要有网络请求的地方，就会需要需要监听请求状态，既然这样，那么可以为output定义一个协议OutputRefreshProtocol，专门用来规范必需声明的属性<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ============================ OutputRefreshProtocol ================================ */</span></span><br><span class="line"><span class="comment">// viewModel 中 output使用</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">OutputRefreshProtocol</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 告诉外界的tableView当前的刷新状态</span></span><br><span class="line">    <span class="keyword">var</span> refreshStatus : <span class="type">Variable</span>&lt;<span class="type">LXFRefreshStatus</span>&gt; &#123;<span class="keyword">get</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着让output去遵循该协议，并进行初始化刷新状态的值为.none<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct LXFLiveOutput: OutputRefreshProtocol &#123;</span><br><span class="line">    var refreshStatus: Variable&lt;LXFRefreshStatus&gt;</span><br><span class="line">    </span><br><span class="line">    let sections: Driver&lt;[LXFLiveSection]&gt;</span><br><span class="line">    init(sections: Driver&lt;[LXFLiveSection]&gt;) &#123;</span><br><span class="line">        self.sections = sections</span><br><span class="line">        refreshStatus = Variable&lt;LXFRefreshStatus&gt;(.none)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到此为止，其实跟之前没啥两样，只是使controller更方便初始化刷新控件而已。接下来才是本文的重点。</p><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>刷新的状态无非也就那么几种，下拉重载数据，上拉加载更多，请求完成时结束下拉或上拉等等。。。那我们何必要在每个controller中再去管理这等琐事？？<br>而至此，刷新控件的状态是由变量 refreshStatus 来决定，此时 refreshStatus 又声明在 OutputRefreshProtocol 协议中，我们何不再定义一个方法，将刷新控件的状态交给refreshStatus自己来帮我们处理呢～</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">OutputRefreshProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">autoSetRefreshHeaderStatus</span><span class="params">(header: MJRefreshHeader?, footer: MJRefreshFooter?)</span></span> -&gt; <span class="type">Disposable</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> refreshStatus.asObservable().subscribe(onNext: &#123; (status) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">switch</span> status &#123;</span><br><span class="line">            <span class="keyword">case</span> .beingHeaderRefresh:</span><br><span class="line">                header?.beginRefreshing()</span><br><span class="line">            <span class="keyword">case</span> .endHeaderRefresh:</span><br><span class="line">                header?.endRefreshing()</span><br><span class="line">            <span class="keyword">case</span> .beingFooterRefresh:</span><br><span class="line">                footer?.beginRefreshing()</span><br><span class="line">            <span class="keyword">case</span> .endFooterRefresh:</span><br><span class="line">                footer?.endRefreshing()</span><br><span class="line">            <span class="keyword">case</span> .noMoreData:</span><br><span class="line">                footer?.endRefreshingWithNoMoreData()</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时需要我们将刷新控件的对象 header / footer 传入到方法中，实现自动控制刷新控件状态。</p><h2 id="总结使用"><a href="#总结使用" class="headerlink" title="总结使用"></a>总结使用</h2><p>一、output中遵守协议 OutputRefreshProtocol， 并初始化 refreshStatus 的值为 none</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LXFLiveOutput</span>: <span class="title">OutputRefreshProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> refreshStatus: <span class="type">Variable</span>&lt;<span class="type">LXFRefreshStatus</span>&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> sections: <span class="type">Driver</span>&lt;[<span class="type">LXFLiveSection</span>]&gt;</span><br><span class="line">    <span class="keyword">init</span>(sections: <span class="type">Driver</span>&lt;[<span class="type">LXFLiveSection</span>]&gt;) &#123;</span><br><span class="line">        <span class="keyword">self</span>.sections = sections</span><br><span class="line">        refreshStatus = <span class="type">Variable</span>&lt;<span class="type">LXFRefreshStatus</span>&gt;(.<span class="keyword">none</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、controller 遵守协议 Refreshable，通过协议中的方法初始化刷新控件及对应的操作，并将刷新控件对象作为参数传入到自动处理状态方法中<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LXFLiveViewController</span>: <span class="title">Refreshable</span></span></span><br></pre></td></tr></table></figure></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> refreshHeader = initRefreshHeader(liveCollectionView) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">self</span>?.vmOutput?.requestCommand.onNext(())</span><br><span class="line">&#125;</span><br><span class="line">vmOutput?.autoSetRefreshHeaderStatus(header: refreshHeader, footer: <span class="literal">nil</span>).disposed(by: rx.disposeBag)</span><br></pre></td></tr></table></figure><p>三、viewModel中根据实际情况实时更新 refreshStatus 的刷新状态</p><p><img src="/images/2017/10/RxSwift-MJExtension-打造自动处理刷新控件状态/1.png" alt="image.png"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>协议：<a href="https://github.com/LinXunFeng/LXFBiliBili/blob/master/LXFBiliBili/LXFBiliBili/Classes/Common/Protocol/Lib/Refreshable.swift" target="_blank" rel="noopener">Refreshable.swift</a><br>ViewModel：<a href="https://github.com/LinXunFeng/LXFBiliBili/blob/master/LXFBiliBili/LXFBiliBili/Classes/Main/Home/Controller/Live/ViewModel/LXFLiveViewModel.swift" target="_blank" rel="noopener">LXFLiveViewModel</a><br>Controller：<a href="https://github.com/LinXunFeng/LXFBiliBili/blob/master/LXFBiliBili/LXFBiliBili/Classes/Main/Home/Controller/Live/LXFLiveViewController.swift" target="_blank" rel="noopener">LXFLiveViewController</a></p><p><a href="https://github.com/LinXunFeng/LXFBiliBili" target="_blank" rel="noopener">LXFBiliBili</a></p><p><img src="/images/2017/10/RxSwift-MJExtension-打造自动处理刷新控件状态/2.gif" alt="LXFBiliBili"></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> RxSwift </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - 视频采集详解</title>
      <link href="/2017/10/16/iOS-%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86%E8%AF%A6%E8%A7%A3/"/>
      <url>/2017/10/16/iOS-%E8%A7%86%E9%A2%91%E9%87%87%E9%9B%86%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p><a href="https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/04_MediaCapture.html#//apple_ref/doc/uid/TP40010188-CH5-SW2" target="_blank" rel="noopener">苹果官方文档-AVFoundation</a></p><p>为了管理从相机或者麦克风等这样的设备捕获到的信息，我们需要输入对象(input)和输出对象(output)，并且使用一个会话(AVCaptureSession)来管理 input 和 output 之前的数据流</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><p><a href="https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/04_MediaCapture.html#//apple_ref/doc/uid/TP40010188-CH5-SW2" target="_blank" rel="noopener">苹果官方文档-AVFoundation</a></p><p>为了管理从相机或者麦克风等这样的设备捕获到的信息，我们需要输入对象(input)和输出对象(output)，并且使用一个会话(AVCaptureSession)来管理 input 和 output 之前的数据流：</p><table><thead><tr><th>类名</th><th style="text-align:left">简介</th></tr></thead><tbody><tr><td>AVCaptureDevice</td><td style="text-align:left">输入设备，例如 摄像头 麦克风</td></tr><tr><td>AVCaptureInput</td><td style="text-align:left">输入端口 [使用其子类]</td></tr><tr><td>AVCaptureOutput</td><td style="text-align:left">设备输出 [使用其子类]，输出视频文件或者静态图像</td></tr><tr><td>AVCaptureSession</td><td style="text-align:left">管理输入到输出的数据流</td></tr><tr><td>AVCaptureVideoPreviewLayer</td><td style="text-align:left">展示采集 预览View</td></tr></tbody></table><p>如图，通过单个 session，也可以管理多个 input 和 output 对象之间的数据流，从而得到视频、静态图像和预览视图<br><img src="/images/2017/10/iOS-视频采集详解/1.png" alt="多个输入输出设备"></p><p>如图，input 可以有一个或多个输入端口，output 也可以有一个或多个数据来源（如：一个 <a href="https://developer.apple.com/documentation/avfoundation/avcapturemoviefileoutput" target="_blank" rel="noopener">AVCaptureMovieFileOutput</a> 对象可以接收视频数据和音频数据）</p><p>当添加 input 和 output 到 session 中时，session 会自动建立起一个连接(AVCaptureConnection)。我们可以使用这个 connection 来设置从 input 或者 从 output 得到的数据的有效性，也可以用来监控在音频信道中功率的平均值和峰值。</p><p><img src="/images/2017/10/iOS-视频采集详解/2.png" alt="AVCaptureConnection"></p><h2 id="使用-Session-来管理数据流"><a href="#使用-Session-来管理数据流" class="headerlink" title="使用 Session 来管理数据流"></a>使用 Session 来管理数据流</h2><p>创建一个 session 用来管理捕获到的数据，需要先将 inputs 和 outputs 添加到 session 中，当 session 执行 [startRunning] 方法后就会开始将数据流发送至 session，通过执行[stopRunning] 方法来结束数据流的发送。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">AVCaptureSession</span> *captureSession = [[<span class="built_in">AVCaptureSession</span> alloc] init];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 inputs 和 outputs</span></span><br><span class="line"></span><br><span class="line">[session startRunning];</span><br></pre></td></tr></table></figure></p><p>在 [session startRunning] 之前我们需要进行一些基本的配置 (如：设备分辨率，添加输入输出对象等)</p><h3 id="设置分辨率"><a href="#设置分辨率" class="headerlink" title="设置分辨率"></a>设置分辨率</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置分辨率 720P 标清</span></span><br><span class="line"><span class="keyword">if</span> ([captureSession canSetSessionPreset:<span class="built_in">AVCaptureSessionPreset1280x720</span>]) &#123;</span><br><span class="line">    captureSession.sessionPreset = <span class="built_in">AVCaptureSessionPreset1280x720</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附苹果官方文档中可供配置的分辨率列表</p><p><img src="/images/2017/10/iOS-视频采集详解/3.png" alt="分辨率列表"></p><p>其中高分辨率(AVCaptureSessionPresetHigh) 为默认值，会根据当前设备进行自适应，但是这样之后导出来的文件就会很大，一般情况下设置为标清(AVCaptureSessionPreset1280x720) 就可以了</p><h3 id="输入对象"><a href="#输入对象" class="headerlink" title="输入对象"></a>输入对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 直接使用后置摄像头</span><br><span class="line">AVCaptureDevice *videoDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 在这个方法中的 mediaType 有三个选项供我们使用</span><br><span class="line">// AVMediaTypeVideo 视频</span><br><span class="line">// AVMediaTypeAudio 音频</span><br><span class="line">// AVMediaTypeMuxed 混合(视频 + 音频)</span><br><span class="line">+ (nullable AVCaptureDevice *)defaultDeviceWithMediaType:(AVMediaType)mediaType;</span><br></pre></td></tr></table></figure><p>但是这种方式只能获取到后置摄像头，如果想要获取前置摄像头，可使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AVCaptureDevice *videoDevice;</span><br><span class="line">NSArray *devices = [AVCaptureDevice devices];</span><br><span class="line">for (AVCaptureDevice *device in devices) &#123;</span><br><span class="line">   if(device.position == AVCaptureDevicePositionFront) &#123;</span><br><span class="line">        // 前置摄像头</span><br><span class="line">        videoDevice = device;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 通过设备获取输入对象</span><br><span class="line">AVCaptureDeviceInput *videoInput = [AVCaptureDeviceInput deviceInputWithDevice:videoDevice error:nil];</span><br><span class="line">// 给会话添加输入</span><br><span class="line">if([captureSession canAddInput:videoInput]) &#123;</span><br><span class="line">    [captureSession addInput:videoInput];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出对象"><a href="#输出对象" class="headerlink" title="输出对象"></a>输出对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 视频输出：设置视频原数据格式：YUV, RGB </span><br><span class="line">// 苹果不支持YUV的渲染，只支持RGB渲染，这意味着： YUV =&gt; RGB</span><br><span class="line">AVCaptureVideoDataOutput *videoOutput = [[AVCaptureVideoDataOutput alloc] init];</span><br><span class="line"></span><br><span class="line">// videoSettings: 设置视频原数据格式 YUV FULL</span><br><span class="line">videoOutput.videoSettings = @&#123;(NSString *)kCVPixelBufferPixelFormatTypeKey:@(kCVPixelFormatType_420YpCbCr8BiPlanarFullRange)&#125;;</span><br><span class="line"></span><br><span class="line">// 设置代理：获取帧数据</span><br><span class="line">// 队列：串行/并行，这里使用串行，保证数据顺序 </span><br><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;LinXunFengSerialQueue&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">[videoOutput setSampleBufferDelegate:self queue:queue];</span><br><span class="line"></span><br><span class="line">// 给会话添加输出对象</span><br><span class="line">if([captureSession canAddOutput:videoOutput]) &#123;</span><br><span class="line">    // 给会话添加输入输出就会自动建立起连接</span><br><span class="line">    [captureSession addOutput:videoOutput];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，输出对象可以设置帧率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 帧率：1秒10帧就差不多比较流畅了</span><br><span class="line">videoOutput.minFrameDuration = CMTimeMake(1, 10);</span><br></pre></td></tr></table></figure><p>输出对象在设置视频原数据格式时使用 videoSettings 属性，需要赋值的类型是字典<br>格式有两种，一种是YUV，另一种是RGB（一般我们都使用YUV，因为体积比RGB小）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// key</span><br><span class="line">kCVPixelBufferPixelFormatTypeKey 指定解码后的图像格式</span><br><span class="line"></span><br><span class="line">// value</span><br><span class="line">kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange  : YUV420 用于标清视频[420v]</span><br><span class="line">kCVPixelFormatType_420YpCbCr8BiPlanarFullRange   : YUV422 用于高清视频[420f] </span><br><span class="line">kCVPixelFormatType_32BGRA : 输出的是BGRA的格式，适用于OpenGL和CoreImage</span><br><span class="line"></span><br><span class="line">区别：</span><br><span class="line">1、前两种是相机输出YUV格式，然后转成RGBA，最后一种是直接输出BGRA，然后转成RGBA;</span><br><span class="line">2、420v 输出的视频格式为NV12；范围： (luma=[16,235] chroma=[16,240])</span><br><span class="line">3、420f 输出的视频格式为NV12；范围： (luma=[0,255] chroma=[1,255])</span><br></pre></td></tr></table></figure><h3 id="预览图层"><a href="#预览图层" class="headerlink" title="预览图层"></a>预览图层</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AVCaptureVideoPreviewLayer *previewLayer = [AVCaptureVideoPreviewLayer layerWithSession:captureSession];</span><br><span class="line">previewLayer.frame = self.view.bounds;</span><br><span class="line">[self.view.layer  addSublayer:previewLayer];</span><br></pre></td></tr></table></figure><p>实时显示摄像头捕获到的图像，但不适用于滤镜渲染</p><h3 id="代理方法"><a href="#代理方法" class="headerlink" title="代理方法"></a>代理方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - AVCaptureVideoDataOutputSampleBufferDelegate</span><br><span class="line">/*</span><br><span class="line"> CMSampleBufferRef: 帧缓存数据，描述当前帧信息</span><br><span class="line"> CMSampleBufferGetXXX : 获取帧缓存信息</span><br><span class="line"> CMSampleBufferGetDuration : 获取当前帧播放时间</span><br><span class="line"> CMSampleBufferGetImageBuffer : 获取当前帧图片信息</span><br><span class="line"> */</span><br><span class="line">// 获取帧数据</span><br><span class="line">- (void)captureOutput:(AVCaptureOutput *)output didOutputSampleBuffer:(CMSampleBufferRef)sampleBuffer fromConnection:(AVCaptureConnection *)connection &#123;</span><br><span class="line">    // captureSession 会话如果没有强引用，这里不会得到执行</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;----- sampleBuffer ----- %@&quot;, sampleBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取帧播放时间</span></span><br><span class="line"><span class="built_in">CMTime</span> duration = <span class="built_in">CMSampleBufferGetDuration</span>(sampleBuffer);</span><br></pre></td></tr></table></figure><p>在代理方法中，可以把 sampleBuffer 数据渲染出来去显示画面。适用于滤镜渲染<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 获取图片帧数据</span><br><span class="line">CVImageBufferRef imageBuffer = CMSampleBufferGetImageBuffer(sampleBuffer);</span><br><span class="line">CIImage *ciImage = [CIImage imageWithCVImageBuffer:imageBuffer];</span><br><span class="line">UIImage *image = [UIImage imageWithCIImage:ciImage];</span><br><span class="line"></span><br><span class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    self.imageView.image = image;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>需要注意的是：代理方法中的所有动作所在队列都是在异步串行队列中，所以更新UI的操作需要回到主队列中进行！！</p><p>但是此时会发现，画面是向左旋转了90度，因为默认采集的视频是横屏的，需要我们进一步做调整。以下步骤添加在[session startRunning];之前即可，但是一定要在添加了 input 和 output之后～<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 获取输入与输出之间的连接</span><br><span class="line">AVCaptureConnection *connection = [videoOutput connectionWithMediaType:AVMediaTypeVideo];</span><br><span class="line">// 设置采集数据的方向</span><br><span class="line">connection.videoOrientation = AVCaptureVideoOrientationPortrait;</span><br><span class="line">// 设置镜像效果镜像</span><br><span class="line">connection.videoMirrored = YES;</span><br></pre></td></tr></table></figure></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/LinXunFeng/LXFAudioVideo" target="_blank" rel="noopener">LXFAudioVideo</a></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - 采集音视频及写入文件</title>
      <link href="/2017/09/26/iOS-%E9%87%87%E9%9B%86%E9%9F%B3%E8%A7%86%E9%A2%91%E5%8F%8A%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/"/>
      <url>/2017/09/26/iOS-%E9%87%87%E9%9B%86%E9%9F%B3%E8%A7%86%E9%A2%91%E5%8F%8A%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>音视频采集包括两部分：视频采集和音频采集。在iOS中可以同步采集视频与音频，通过系统框架AVFoundation，可以帮助我们采集音频与视频，对于视频还可以进行切换前后摄像头，最终我们将录制好的视频写入沙盒中</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>音视频采集包括两部分：视频采集和音频采集。在iOS中可以同步采集视频与音频，通过系统框架AVFoundation，可以帮助我们采集音频与视频，对于视频还可以进行切换前后摄像头，最终我们将录制好的视频写入沙盒中</p></blockquote><p><img src="/images/2017/09/iOS - 采集音视频及写入文件/1.gif" alt="目录"></p><h2 id="音视频数据的采集与展示"><a href="#音视频数据的采集与展示" class="headerlink" title="音视频数据的采集与展示"></a>音视频数据的采集与展示</h2><h3 id="一、初始化视频的输入与输出"><a href="#一、初始化视频的输入与输出" class="headerlink" title="一、初始化视频的输入与输出"></a>一、初始化视频的输入与输出</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒加载一个session，所有的操作都需要session来执行</span></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="built_in">lazy</span> <span class="keyword">var</span> session: <span class="type">AVCaptureSession</span> = <span class="type">AVCaptureSession</span>()</span><br><span class="line"><span class="comment">// 保存视频输出</span></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> videoOutput: <span class="type">AVCaptureVideoDataOutput</span>?</span><br><span class="line"><span class="comment">// 保存视频输入</span></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> videoInput: <span class="type">AVCaptureDeviceInput</span>?</span><br><span class="line"><span class="comment">// 保存预览图层</span></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> previewLayer: <span class="type">AVCaptureVideoPreviewLayer</span>?</span><br></pre></td></tr></table></figure><p>设置视频输入源与输出源<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置视频输入源</span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> devices = <span class="type">AVCaptureDevice</span>.devices() <span class="keyword">as</span>? [<span class="type">AVCaptureDevice</span>] <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="comment">// 获取我们的前置摄像头(后置为.back)</span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> device = devices.<span class="built_in">filter</span>(&#123; $<span class="number">0</span>.position == .front &#125;).first <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> input = <span class="keyword">try</span>? <span class="type">AVCaptureDeviceInput</span>(device: device) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="keyword">self</span>.videoInput = input</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置视频输出源</span></span><br><span class="line"><span class="keyword">let</span> output = <span class="type">AVCaptureVideoDataOutput</span>()</span><br><span class="line"><span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>.global()</span><br><span class="line"><span class="comment">// 设置代理，并在代理中获取采集到的数据，需要遵守 AVCaptureVideoDataOutputSampleBufferDelegate</span></span><br><span class="line">output.setSampleBufferDelegate(<span class="keyword">self</span>, queue: queue)</span><br><span class="line"><span class="keyword">self</span>.videoOutput = output</span><br></pre></td></tr></table></figure></p><p>设置音频的输入源与输出源<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置音频的输入源</span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> device = <span class="type">AVCaptureDevice</span>.defaultDevice(withMediaType: <span class="type">AVMediaTypeAudio</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> input = <span class="keyword">try</span>? <span class="type">AVCaptureDeviceInput</span>(device: device) <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置音频输出源</span></span><br><span class="line"><span class="keyword">let</span> output = <span class="type">AVCaptureAudioDataOutput</span>()</span><br><span class="line"><span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>.global()</span><br><span class="line"><span class="comment">// 需要遵守 AVCaptureAudioDataOutputSampleBufferDelegate</span></span><br><span class="line">output.setSampleBufferDelegate(<span class="keyword">self</span>, queue: queue)</span><br></pre></td></tr></table></figure></p><p>添加音频与视频的输入与输出到session中，但是每次添加之前需要先判断是否可以添加</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加输入与输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：每次对session进行设置之前都需要调用session的【beginConfiguration】方法</span></span><br><span class="line"><span class="comment">// 来告诉系统你现在要开始进行配置，结束配置后再调用【commitConfiguration】方法来提交配置</span></span><br><span class="line">session.beginConfiguration()</span><br><span class="line"><span class="keyword">if</span> session.canAddInput(input) &#123;</span><br><span class="line">    session.addInput(input)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.canAddOutput(output) &#123;</span><br><span class="line">    session.addOutput(output)</span><br><span class="line">&#125;</span><br><span class="line">session.commitConfiguration()</span><br></pre></td></tr></table></figure><h3 id="二、实现音视频的采集代理"><a href="#二、实现音视频的采集代理" class="headerlink" title="二、实现音视频的采集代理"></a>二、实现音视频的采集代理</h3><p>音视频虽然需要遵守的代理名称不一样，但是需要实现的方法是一致的，所以要拿到音频或者视频就得先进行判断，需要用到AVCaptureOutput的这个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// This convenience method returns the first AVCaptureConnection in the receiver&apos;s</span><br><span class="line">// connections array that has an AVCaptureInputPort of the specified mediaType. If </span><br><span class="line">// no connection with the specified mediaType is found, nil is returned.</span><br><span class="line"></span><br><span class="line">open func connection(withMediaType mediaType: String!) -&gt; AVCaptureConnection!</span><br></pre></td></tr></table></figure></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">AVCaptureVideoDataOutputSampleBufferDelegate</span>, <span class="title">AVCaptureAudioDataOutputSampleBufferDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">captureOutput</span><span class="params">(<span class="number">_</span> captureOutput: AVCaptureOutput!, didOutputSampleBuffer sampleBuffer: CMSampleBuffer!, from connection: AVCaptureConnection!)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> videoOutput?.connection(withMediaType: <span class="type">AVMediaTypeVideo</span>) == connection &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"视频数据"</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"音频数据"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、初始化一个预览图层用来显示采集到的视频（非采集所必须的步骤）"><a href="#三、初始化一个预览图层用来显示采集到的视频（非采集所必须的步骤）" class="headerlink" title="三、初始化一个预览图层用来显示采集到的视频（非采集所必须的步骤）"></a>三、初始化一个预览图层用来显示采集到的视频（非采集所必须的步骤）</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建预览图层</span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> previewLayer = <span class="type">AVCaptureVideoPreviewLayer</span>(session: session) <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">previewLayer.frame = view.bounds</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将图层添加到控制器的view的layer中</span></span><br><span class="line">view.layer.insertSublayer(previewLayer, at: <span class="number">0</span>)</span><br><span class="line"><span class="keyword">self</span>.previewLayer = previewLayer</span><br></pre></td></tr></table></figure><p>现在基本功能都有了，如果想要开始采集音视频只需要调用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始录制</span></span><br><span class="line">session.startRunning()</span><br><span class="line"><span class="comment">// 结束录制</span></span><br><span class="line">session.stopRunning()</span><br></pre></td></tr></table></figure></p><h3 id="切换镜头"><a href="#切换镜头" class="headerlink" title="切换镜头"></a>切换镜头</h3><p>其实就是换掉当前的视频输入法制，这里的过程跟上面的设置输入源一样。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.取出之前镜头的方向</span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> videoInput = videoInput <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="keyword">let</span> position: <span class="type">AVCaptureDevicePosition</span> = videoInput.device.position == .front ? .back : .front</span><br><span class="line"></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> devices = <span class="type">AVCaptureDevice</span>.devices() <span class="keyword">as</span>? [<span class="type">AVCaptureDevice</span>] <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> device = devices.<span class="built_in">filter</span>(&#123; $<span class="number">0</span>.position == position &#125;).first <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> newInput = <span class="keyword">try</span>? <span class="type">AVCaptureDeviceInput</span>(device: device) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.移除之前的input，添加新的input</span></span><br><span class="line">session.beginConfiguration()</span><br><span class="line">session.removeInput(videoInput)</span><br><span class="line"><span class="keyword">if</span> session.canAddInput(newInput) &#123;</span><br><span class="line">    session.addInput(newInput)</span><br><span class="line">&#125;</span><br><span class="line">session.commitConfiguration()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.保存最新的input</span></span><br><span class="line"><span class="keyword">self</span>.videoInput = newInput</span><br></pre></td></tr></table></figure></p><h2 id="录制视频写入文件"><a href="#录制视频写入文件" class="headerlink" title="录制视频写入文件"></a>录制视频写入文件</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> movieOutput: <span class="type">AVCaptureMovieFileOutput</span>?</span><br></pre></td></tr></table></figure><blockquote><p>在开始采集音视频的时候就要开始写入文件</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始写入文件 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、创建写入文件的输出</span></span><br><span class="line"><span class="keyword">let</span> fileOutput = <span class="type">AVCaptureMovieFileOutput</span>()</span><br><span class="line"><span class="keyword">self</span>.movieOutput = fileOutput <span class="comment">// 保存起来，用于停止写入文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置类型，不然报错(这两句很重要)</span></span><br><span class="line"><span class="keyword">let</span> connection = fileOutput.connection(withMediaType: <span class="type">AVMediaTypeVideo</span>)</span><br><span class="line">connection?.automaticallyAdjustsVideoMirroring = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> session.canAddOutput(fileOutput) &#123;</span><br><span class="line">    session.addOutput(fileOutput)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、直接开始写入文件</span></span><br><span class="line"><span class="keyword">let</span> filePath = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.documentDirectory, .userDomainMask, <span class="literal">true</span>).first! + <span class="string">"/abc.mp4"</span></span><br><span class="line"><span class="keyword">let</span> fileUrl = <span class="type">URL</span>(fileURLWithPath: filePath)</span><br><span class="line">fileOutput.startRecording(toOutputFileURL: fileUrl, recordingDelegate: <span class="keyword">self</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在停止采集音视频的时候停止写入文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 停止写入文件</span><br><span class="line">movieOutput?.stopRecording()</span><br></pre></td></tr></table></figure><p>详情请看 <a href="https://github.com/LinXunFeng/LXFRecordAndWriteMediaDemo" target="_blank" rel="noopener">DEMO</a></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - LXFDrawBoard 多功能小画板</title>
      <link href="/2017/09/25/iOS-LXFDrawBoard-%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%B0%8F%E7%94%BB%E6%9D%BF/"/>
      <url>/2017/09/25/iOS-LXFDrawBoard-%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%B0%8F%E7%94%BB%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>将LXFDrawBoard拖入项目中，导入头文件LXFDrawBoard.h，需要什么笔刷可以在Brush文件夹中找到即可使用，具体使用方法可以参考Demo<br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="LXFDrawBoard"><a href="#LXFDrawBoard" class="headerlink" title="LXFDrawBoard"></a>LXFDrawBoard</h1><p>多功能小画板 GitHub: <a href="https://github.com/LinXunFeng/LXFDrawBoard" target="_blank" rel="noopener">Demo</a></p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><blockquote><p>将LXFDrawBoard拖入项目中，导入头文件LXFDrawBoard.h，需要什么笔刷可以在Brush文件夹中找到即可使用，具体使用方法可以参考Demo</p></blockquote><p><strong>LXFDrawBoardDelegate</strong></p><p>返回需要添加的描述</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)LXFDrawBoard:(LXFDrawBoard *)drawBoard textForDescLabel:(<span class="built_in">UILabel</span> *)descLabel;</span><br></pre></td></tr></table></figure><p>当添加或修改描述时调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)LXFDrawBoard:(LXFDrawBoard *)drawBoard clickDescLabel:(<span class="built_in">UILabel</span> *)descLabel;</span><br></pre></td></tr></table></figure><h2 id="笔刷"><a href="#笔刷" class="headerlink" title="笔刷"></a>笔刷</h2><h3 id="2017–09-25-更新"><a href="#2017–09-25-更新" class="headerlink" title="2017–09-25 更新"></a>2017–09-25 更新</h3><p>橡皮擦 LXFEraserBrush<br><img src="https://github.com/LinXunFeng/LXFDrawBoard/raw/master/Screenshots/橡皮擦.gif" alt="LXFEraserBrush"></p><hr><p>铅笔 LXFPencilBrush<br><img src="http://upload-images.jianshu.io/upload_images/2144614-db7ee9b3b6dc7d3c.gif?imageMogr2/auto-orient/strip" alt="LXFPencilBrush"></p><p>箭头 LXFArrowBrush<br><img src="http://upload-images.jianshu.io/upload_images/2144614-52f9e8c9b036669a.gif?imageMogr2/auto-orient/strip" alt="LXFArrowBrush"></p><p>直线 LXFLineBrush<br><img src="http://upload-images.jianshu.io/upload_images/2144614-17043979b48ec450.gif?imageMogr2/auto-orient/strip" alt="LXFLineBrush"></p><p>文本 LXFTextBrush<br><img src="http://upload-images.jianshu.io/upload_images/2144614-9b9e9406b075d68a.gif?imageMogr2/auto-orient/strip" alt="LXFTextBrush"></p><p>矩形 LXFRectangleBrush</p><p><img src="http://upload-images.jianshu.io/upload_images/2144614-d4bfbe94682acafb.gif?imageMogr2/auto-orient/strip" alt="LXFRectangleBrush"></p><p>马赛克 LXFMosaicBrush<br><img src="http://upload-images.jianshu.io/upload_images/2144614-a0d920442de28de4.gif?imageMogr2/auto-orient/strip" alt="LXFMosaicBrush"></p><p>撤销与反撤销<br><img src="http://upload-images.jianshu.io/upload_images/2144614-5e0390d0baff8047.gif?imageMogr2/auto-orient/strip" alt="撤销与反撤销"></p></the>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Objective-C </tag>
            
            <tag> iOS项目 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - RxSwift 项目实战记录</title>
      <link href="/2017/09/12/iOS-RxSwift-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/09/12/iOS-RxSwift-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>最近刚刚把接手的OC项目搞定，经过深思熟虑后，本人决定下个项目起就使用Swift(学了这么久的Swift还没真正用到实际项目里。。。)，而恰巧RxSwift已经出来有一些时间了，语法也基本上稳定，遂只身前来试探试探这RxSwift，接着就做了个小Demo，有兴趣的同学可以瞧一瞧~</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><p><img src="/images/2017/09/iOS - RxSwift 项目实战记录/1.png" alt="ReactiveX"></p><blockquote><p>最近刚刚把接手的OC项目搞定，经过深思熟虑后，本人决定下个项目起就使用Swift(学了这么久的Swift还没真正用到实际项目里。。。)，而恰巧RxSwift已经出来有一些时间了，语法也基本上稳定，遂只身前来试探试探这RxSwift，接着就做了个小Demo，有兴趣的同学可以瞧一瞧~</p></blockquote><p><img src="/images/2017/09/iOS - RxSwift 项目实战记录/2.gif" alt="Exhibition"></p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Controller</span><br><span class="line">│   └── LXFViewController.swift// 主视图控制器</span><br><span class="line">├── Extension</span><br><span class="line">│   └── Response+ObjectMapper.swift// Response分类，Moya请求完进行Json转模型或模型数组</span><br><span class="line">├── Model</span><br><span class="line">│   └── LXFModel.swift// 模型</span><br><span class="line">├── Protocol</span><br><span class="line">│   └── LXFViewModelType.swift// 定义了模型协议</span><br><span class="line">├── Tool</span><br><span class="line">│   ├── LXFNetworkTool.swift// 封装Moya请求</span><br><span class="line">│   └── LXFProgressHUD.swift// 封装的HUD</span><br><span class="line">├── View</span><br><span class="line">│   ├── LXFViewCell.swift// 自定义cell</span><br><span class="line">│   └── LXFViewCell.xib// cell的xib文件</span><br><span class="line">└── ViewModel</span><br><span class="line">    └── LXFViewModel.swift// 视图模型</span><br></pre></td></tr></table></figure><h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RxSwift// 想玩RxSwift的必备库</span><br><span class="line">RxCocoa // 对 UIKit Foundation 进行 Rx 化</span><br><span class="line">NSObject+Rx// 为我们提供 rx_disposeBag </span><br><span class="line">Moya/RxSwift // 为RxSwift专用提供，对Alamofire进行封装的一个网络请求库</span><br><span class="line">ObjectMapper // Json转模型之必备良品</span><br><span class="line">RxDataSources// 帮助我们优雅的使用tableView的数据源方法</span><br><span class="line">Then // 提供快速初始化的语法糖</span><br><span class="line">Kingfisher// 图片加载库</span><br><span class="line">SnapKit// 视图约束库</span><br><span class="line">Reusable // 帮助我们优雅的使用自定义cell和view,不再出现Optional</span><br><span class="line">MJRefresh // 上拉加载、下拉刷新的库</span><br><span class="line">SVProgressHUD // 简单易用的HUD</span><br></pre></td></tr></table></figure><h2 id="敲黑板"><a href="#敲黑板" class="headerlink" title="敲黑板"></a>敲黑板</h2><h3 id="Moya的使用"><a href="#Moya的使用" class="headerlink" title="Moya的使用"></a>Moya的使用</h3><p>Moya是基于Alamofire的网络请求库，这里我使用了Moya/Swift，它在Moya的基础上添加了对RxSwift的接口支持。接下来我们来说下Moya的使用</p><p>一、创建一个枚举，用来存放请求类型，这里我顺便设置相应的路径，等下统一取出来直接赋值即可<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">LXFNetworkTool</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">LXFNetworkCategory</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> all     = <span class="string">"all"</span></span><br><span class="line">        <span class="keyword">case</span> android = <span class="string">"Android"</span></span><br><span class="line">        <span class="keyword">case</span> ios     = <span class="string">"iOS"</span></span><br><span class="line">        <span class="keyword">case</span> welfare = <span class="string">"福利"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> data(type: <span class="type">LXFNetworkCategory</span>, size:<span class="type">Int</span>, index:<span class="type">Int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二、为这个枚举写一个扩展，并遵循塄 TargetType，这个协议的Moya这个库规定的协议，可以按住Commond键+单击左键进入相应的文件进行查看<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LXFNetworkTool</span>: <span class="title">TargetType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// baseURL 统一基本的URL</span></span><br><span class="line">    <span class="keyword">var</span> baseURL: <span class="type">URL</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">URL</span>(string: <span class="string">"http://gank.io/api/data/"</span>)!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// path字段会追加至baseURL后面</span></span><br><span class="line">    <span class="keyword">var</span> path: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .data(<span class="keyword">let</span> type, <span class="keyword">let</span> size, <span class="keyword">let</span> index):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"<span class="subst">\(type.rawValue)</span>/<span class="subst">\(size)</span>/<span class="subst">\(index)</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// HTTP的请求方式</span></span><br><span class="line">    <span class="keyword">var</span> method: <span class="type">Moya</span>.<span class="type">Method</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .<span class="keyword">get</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 请求参数(会在请求时进行编码)</span></span><br><span class="line">    <span class="keyword">var</span> parameters: [<span class="type">String</span>: <span class="type">Any</span>]? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 参数编码方式(这里使用URL的默认方式)</span></span><br><span class="line">    <span class="keyword">var</span> parameterEncoding: <span class="type">ParameterEncoding</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">URLEncoding</span>.<span class="keyword">default</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 这里用于单元测试，不需要的就像我一样随便写写</span></span><br><span class="line">    <span class="keyword">var</span> sampleData: <span class="type">Data</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"LinXunFeng"</span>.data(using: .utf8)!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 将要被执行的任务(请求：request 下载：upload 上传：download)</span></span><br><span class="line">    <span class="keyword">var</span> task: <span class="type">Task</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .request</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 是否执行Alamofire验证，默认值为false</span></span><br><span class="line">    <span class="keyword">var</span> validate: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三、定义一个全局变量用于整个项目的网络请求<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lxfNetTool = <span class="type">RxMoyaProvider</span>&lt;<span class="type">LXFNetworkTool</span>&gt;()</span><br></pre></td></tr></table></figure></p><p>至此，我们就可以使用这个全局变量来请求数据了</p><h3 id="RxDataSources"><a href="#RxDataSources" class="headerlink" title="RxDataSources"></a>RxDataSources</h3><p>如果你想用传统的方式也行，不过这就失去了使用RxSwift的意义。好吧，我们接下来说说如何优雅的来实现tableView的数据源。其实<a href="https://github.com/RxSwiftCommunity/RxDataSources" target="_blank" rel="noopener">RxDataSources</a>官网上已经有很明确的使用说明，不过我还是总结一下整个过程吧。</p><p>概念点<br>RxDataSources是以section来做为数据结构来传输，这点很重要，可能很多同学会比较疑惑这句话吧，我在此举个例子，在传统的数据源实现的方法中有一个numberOfSection，我们在很多情况下只需要一个section，所以这个方法可实现，也可以不实现，默认返回的就是1，这给我们带来的一个迷惑点：【tableView是由row来组成的】，不知道在坐的各位中有没有是这么想的呢？？有的话那从今天开始就要认清楚这一点，【tableView其实是由section组成的】，所以在使用RxDataSources的过程中，即使你的setion只有一个，那你也得返回一个section的数组出去！！！</p><p>一、自定义Section<br>在我们自定义的Model中创建一个Section的结构体，并且创建一个扩展，遵循SectionModelType协议，实现相应的协议方法。约定俗成的写法呢请参考如下方式<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LXFModel</span>.swift</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LXFSection</span> </span>&#123;</span><br><span class="line">    <span class="comment">// items就是rows</span></span><br><span class="line">    <span class="keyword">var</span> items: [<span class="type">Item</span>]</span><br><span class="line">  <span class="comment">// 你也可以这里加你需要的东西，比如 headerView 的 title</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LXFSection</span>: <span class="title">SectionModelType</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 重定义 Item 的类型为 LXFModel</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Item</span> = <span class="type">LXFModel</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 实现协议中的方式</span></span><br><span class="line">    <span class="keyword">init</span>(original: <span class="type">LXFSection</span>, items: [<span class="type">LXFSection</span>.<span class="type">Item</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span> = original</span><br><span class="line">        <span class="keyword">self</span>.items = items</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二、在控制器下创建一个数据源属性</p><p>以下代码均在 LXFViewController.swift 文件中<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数据源属性，类型为自定义的Section类型</span></span><br><span class="line"><span class="keyword">let</span> dataSource = <span class="type">RxTableViewSectionedReloadDataSource</span>&lt;<span class="type">LXFSection</span>&gt;()</span><br></pre></td></tr></table></figure></p><p>使用数据源属性绑定我们的cell<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定cell</span></span><br><span class="line">dataSource.configureCell = &#123; ds, tv, ip, item <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// 这个地方使用了Reusable这个库，在LXFViewCell中遵守了相应的协议</span></span><br><span class="line"><span class="comment">// 使其方便转换cell为非可选型的相应的cell类型</span></span><br><span class="line">    <span class="keyword">let</span> cell = tv.dequeueReusableCell(<span class="keyword">for</span>: ip) <span class="keyword">as</span> <span class="type">LXFViewCell</span></span><br><span class="line">    cell.picView.kf.setImage(with: <span class="type">URL</span>(string: item.url))</span><br><span class="line">    cell.descLabel.text = <span class="string">"描述: <span class="subst">\(item.desc)</span>"</span></span><br><span class="line">    cell.sourceLabel.text = <span class="string">"来源: <span class="subst">\(item.source)</span>"</span></span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三、将sections序列绑定给我们的rows<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output.sections.asDriver().drive(tableView.rx.items(dataSource:dataSource)).addDisposableTo(rx_disposeBag)</span><br></pre></td></tr></table></figure></p><p>大功告成，接下来说说section序列的产生</p><h3 id="ViewModel的规范"><a href="#ViewModel的规范" class="headerlink" title="ViewModel的规范"></a>ViewModel的规范</h3><p>我们知道MVVM思想就是将原本在ViewController的视图显示逻辑、验证逻辑、网络请求等代码存放于ViewModel中，让我们手中的ViewController瘦身。这些逻辑由ViewModel负责，外界不需要关心，外界只需要结果，ViewModel也只需要将结果给到外界，基于此，我们定义了一个协议LXFViewModelType</p><p>一、创建一个LXFViewModelType.swift<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LXFViewModelType</span>.swift</span><br><span class="line"></span><br><span class="line"><span class="comment">// associatedtype 关键字 用来声明一个类型的占位符作为协议定义的一部分</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">LXFViewModelType</span> </span>&#123;</span><br><span class="line">    associatedtype <span class="type">Input</span></span><br><span class="line">    associatedtype <span class="type">Output</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">transform</span><span class="params">(input: Input)</span></span> -&gt; <span class="type">Output</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二、viewModel遵守LXFViewModelType协议</p><ol><li>我们可以为XFViewModelType的Input和Output定义别名，以示区分，如：你这个viewModel的用于请求首页模块相关联的，则可以命名为：HomeInput 和 HomeOutput</li><li>我们可以丰富我们的 Input 和 Output 。可以看到我为Output添加了一个序列，类型为我们自定义的LXFSection数组，在Input里面添加了一个请求类型(即要请求什么数据，比如首页的数据)</li><li>我们通过 transform 方法将input携带的数据进行处理，生成了一个Output</li></ol><p><strong>注意： 以下代码为了方便阅读，进行了部分删减</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LXFViewModel</span>.swift</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LXFViewModel</span>: <span class="title">LXFViewModelType</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 存放着解析完成的模型数组</span></span><br><span class="line">   <span class="keyword">let</span> models = <span class="type">Variable</span>&lt;[<span class="type">LXFModel</span>]&gt;([])</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 为LXFViewModelType的Input和Output定义别名</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Input</span> = <span class="type">LXFInput</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Output</span> = <span class="type">LXFOutput</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 丰富我们的Input和Output</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LXFInput</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 网络请求类型</span></span><br><span class="line">        <span class="keyword">let</span> category: <span class="type">LXFNetworkTool</span>.<span class="type">LXFNetworkCategory</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">init</span>(category: <span class="type">LXFNetworkTool</span>.<span class="type">LXFNetworkCategory</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.category = category</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LXFOutput</span> </span>&#123;</span><br><span class="line">        <span class="comment">// tableView的sections数据</span></span><br><span class="line">        <span class="keyword">let</span> sections: <span class="type">Driver</span>&lt;[<span class="type">LXFSection</span>]&gt;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">init</span>(sections: <span class="type">Driver</span>&lt;[<span class="type">LXFSection</span>]&gt;) &#123;</span><br><span class="line">            <span class="keyword">self</span>.sections = sections</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">transform</span><span class="params">(input: LXFViewModel.LXFInput)</span></span> -&gt; <span class="type">LXFViewModel</span>.<span class="type">LXFOutput</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> sections = models.asObservable().<span class="built_in">map</span> &#123; (models) -&gt; [<span class="type">LXFSection</span>] <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// 当models的值被改变时会调用，这是Variable的特性</span></span><br><span class="line">            <span class="keyword">return</span> [<span class="type">LXFSection</span>(items: models)] <span class="comment">// 返回section数组</span></span><br><span class="line">        &#125;.asDriver(onErrorJustReturn: [])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> output = <span class="type">LXFOutput</span>(sections: sections)</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 接下来的代码是网络请求，请结合项目查看，不然会不方便阅读和理解</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们在ViewController中初始化我们的input，通过transform得到output，然后将我们output中的sections序列绑定tableView的items<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LXFViewController</span>.swift</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化input</span></span><br><span class="line"><span class="keyword">let</span> vmInput = <span class="type">LXFViewModel</span>.<span class="type">LXFInput</span>(category: .welfare)</span><br><span class="line"><span class="comment">// 通过transform得到output</span></span><br><span class="line"><span class="keyword">let</span> vmOutput = viewModel.transform(input: vmInput)</span><br><span class="line"></span><br><span class="line">vmOutput.sections.asDriver().drive(tableView.rx.items(dataSource: dataSource)).addDisposableTo(rx_disposeBag)</span><br></pre></td></tr></table></figure></p><h3 id="RxSwift中使用MJRefresh"><a href="#RxSwift中使用MJRefresh" class="headerlink" title="RxSwift中使用MJRefresh"></a>RxSwift中使用MJRefresh</h3><p>一、定义一个枚举LXFRefreshStatus，用于标志当前刷新状态<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">LXFRefreshStatus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">none</span></span><br><span class="line">    <span class="keyword">case</span> beingHeaderRefresh</span><br><span class="line">    <span class="keyword">case</span> endHeaderRefresh</span><br><span class="line">    <span class="keyword">case</span> beingFooterRefresh</span><br><span class="line">    <span class="keyword">case</span> endFooterRefresh</span><br><span class="line">    <span class="keyword">case</span> noMoreData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二、在LXFOutput添加一个refreshStatus序列，类型为LXFRefreshStatus<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给外界订阅，告诉外界的tableView当前的刷新状态</span></span><br><span class="line"><span class="keyword">let</span> refreshStatus = <span class="type">Variable</span>&lt;<span class="type">LXFRefreshStatus</span>&gt;(.<span class="keyword">none</span>)</span><br></pre></td></tr></table></figure></p><p>我们在进行网络请求并得到结果之后，修改refreshStatus的value为相应的LXFRefreshStatus项</p><p>三、外界订阅output的refreshStatus</p><p>外界订阅output的refreshStatus，并且根据接收到的值进行相应的操作<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vmOutput.refreshStatus.asObservable().subscribe(onNext: &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] status <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> status &#123;</span><br><span class="line">    <span class="keyword">case</span> .beingHeaderRefresh:</span><br><span class="line">        <span class="keyword">self</span>?.tableView.mj_header.beginRefreshing()</span><br><span class="line">    <span class="keyword">case</span> .endHeaderRefresh:</span><br><span class="line">        <span class="keyword">self</span>?.tableView.mj_header.endRefreshing()</span><br><span class="line">    <span class="keyword">case</span> .beingFooterRefresh:</span><br><span class="line">        <span class="keyword">self</span>?.tableView.mj_footer.beginRefreshing()</span><br><span class="line">    <span class="keyword">case</span> .endFooterRefresh:</span><br><span class="line">        <span class="keyword">self</span>?.tableView.mj_footer.endRefreshing()</span><br><span class="line">    <span class="keyword">case</span> .noMoreData:</span><br><span class="line">        <span class="keyword">self</span>?.tableView.mj_footer.endRefreshingWithNoMoreData()</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).addDisposableTo(rx_disposeBag)</span><br></pre></td></tr></table></figure></p><p>四、output提供一个requestCommond用于请求数据</p><p>PublishSubject 的特点：即可以作为Observable，也可以作为Observer，说白了就是可以发送信号，也可以订阅信号<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外界通过该属性告诉viewModel加载数据（传入的值是为了标志是否重新加载）</span></span><br><span class="line"><span class="keyword">let</span> requestCommond = <span class="type">PublishSubject</span>&lt;<span class="type">Bool</span>&gt;()</span><br></pre></td></tr></table></figure></p><p>在transform中，我们对生成的output的requestCommond进行订阅<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">output.requestCommond.subscribe(onNext: &#123;[<span class="keyword">unowned</span> <span class="keyword">self</span>] isReloadData <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">self</span>.index = isReloadData ? <span class="number">1</span> : <span class="keyword">self</span>.index+<span class="number">1</span></span><br><span class="line">    lxfNetTool.request(.data(type: input.category, size: <span class="number">10</span>, index: <span class="keyword">self</span>.index)).mapArray(<span class="type">LXFModel</span>.<span class="keyword">self</span>).subscribe(&#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (event) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">switch</span> event &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .next(modelArr):</span><br><span class="line">            <span class="keyword">self</span>?.models.value = isReloadData ? modelArr : (<span class="keyword">self</span>?.models.value ?? []) + modelArr</span><br><span class="line">            <span class="type">LXFProgressHUD</span>.showSuccess(<span class="string">"加载成功"</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .error(error):</span><br><span class="line">            <span class="type">LXFProgressHUD</span>.showError(error.localizedDescription)</span><br><span class="line">        <span class="keyword">case</span> .completed:</span><br><span class="line">            output.refreshStatus.value = isReloadData ? .endHeaderRefresh : .endFooterRefresh</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).addDisposableTo(<span class="keyword">self</span>.rx_disposeBag)</span><br><span class="line">&#125;).addDisposableTo(rx_disposeBag)</span><br></pre></td></tr></table></figure></p><p>五、在ViewController中初始化刷新控件</p><p>为tableView设置刷新控件，并且在创建刷新控件的回调中使用output的requestCommond发射信号<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tableView.mj_header = <span class="type">MJRefreshNormalHeader</span>(refreshingBlock: &#123; </span><br><span class="line">    vmOutput.requestCommond.onNext(<span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br><span class="line">tableView.mj_footer = <span class="type">MJRefreshAutoNormalFooter</span>(refreshingBlock: &#123; </span><br><span class="line">    vmOutput.requestCommond.onNext(<span class="literal">false</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>总结流程：</p><ol><li><p>ViewController已经拿到output，当下拉加载数据的时候，使用output的requestCommond发射信息，告诉viewModel我们要加载数据</p></li><li><p>viewModel请求数据，在处理完json转模型或模型数组后修改models，当models的值被修改的时候会发信号给sections，sections在ViewController已经绑定到tableView的items了，所以此时tableView的数据会被更新。接着我们根据请求结果，修改output的refreshStatus属性的值</p></li><li><p>当output的refreshStatus属性的值改变后，会发射信号，由于外界之前已经订阅了output的refreshStatus，此时就会根据refreshStatus的新值来处理刷新控件的状态</p></li></ol><p>好了，附上<a href="https://github.com/LinXunFeng/RxSwiftDemo" target="_blank" rel="noopener">RxSwiftDemo</a>。完结撒花</p><div class="github-widget" data-repo="LinXunFeng/RxSwiftDemo"></div></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> RxSwift </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu 安装nginx 来搭建推流服务器</title>
      <link href="/2017/09/12/Ubuntu-%E5%AE%89%E8%A3%85nginx-%E6%9D%A5%E6%90%AD%E5%BB%BA%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2017/09/12/Ubuntu-%E5%AE%89%E8%A3%85nginx-%E6%9D%A5%E6%90%AD%E5%BB%BA%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>如果安装命令回车之后出现如下信息，请参考<a href="http://www.linuxidc.com/Linux/2009-07/20740.htm" target="_blank" rel="noopener">【Ubuntu “无法获得锁”解决方案】</a>解决，但是我亲测对我没用，直接重启搞定</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>安装两个依赖库<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install autoconf automake</span><br><span class="line">sudo apt-get install libpcre3 libpcre3-dev</span><br></pre></td></tr></table></figure></p><p>安装zlib库<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssl</span><br><span class="line">sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure></p><p>如果安装命令回车之后出现如下信息，请参考<a href="http://www.linuxidc.com/Linux/2009-07/20740.htm" target="_blank" rel="noopener">【Ubuntu “无法获得锁”解决方案】</a>解决，但是我亲测对我没用，直接重启搞定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E: 无法获得锁 /var/lib/dpkg/lock - open (11: 资源暂时不可用)</span><br><span class="line">E: 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？</span><br></pre></td></tr></table></figure></p><p>进入家目录，新建一个文件夹，这里以lxf为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir lxf</span><br></pre></td></tr></table></figure></p><p>下载所需源码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 下载nginx-rtmp源码</span><br><span class="line">wget https://github.com/arut/nginx-rtmp-module/archive/master.zip</span><br><span class="line">// 修改压缩包的名字</span><br><span class="line">mv master.zip module.zip</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 下载nginx</span><br><span class="line">wget https://github.com/nginx/nginx/archive/master.zip</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 下载nginx的依赖pcre源码</span><br><span class="line">wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz</span><br></pre></td></tr></table></figure><p>下载完成之后使用unzip命令进行解压<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip master.zip </span><br><span class="line">unzip module.zip</span><br><span class="line">tar -zxvf pcre-8.39.tar.gz</span><br></pre></td></tr></table></figure></p><p>配置编译文件，准备编译安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 先进入nginx-master目录</span><br><span class="line">cd nginx-master/</span><br></pre></td></tr></table></figure></p><p>在nginx-master目录下有一个auto文件夹，里面有一个名为configure的配置文件，我们先来通过它进行一些配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// prefix:指定安装目录</span><br><span class="line">// add-module:指定模块文件夹</span><br><span class="line">auto/configure --prefix=/usr/local/nginx --with-pcre=../pcre-8.39 --with-http_ssl_module --with-http_v2_module --with-http_flv_module --with-http_mp4_module --add-module=../nginx-rtmp-module-master/</span><br></pre></td></tr></table></figure></p><p>配置好之后会多出一个Makefile文件(一种配置文件，定义了一系列的规则来指定编译操作)与objs文件夹<br><img src="/images/2017/09/Ubuntu 安装nginx 来搭建推流服务器/1.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 编译</span><br><span class="line">make</span><br><span class="line">// 安装</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>当你make后，看到则代表编译成功<br><img src="/images/2017/09/Ubuntu 安装nginx 来搭建推流服务器/2.png" alt="make成功"><br>再执行【sudo make install】，看到这个则代表安装完成<br><img src="/images/2017/09/Ubuntu 安装nginx 来搭建推流服务器/3.png" alt="安装完成"></p><p>现在我们去测试一下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> cd /usr/local/nginx/sbin/</span><br><span class="line">sudo ./nginx -t</span><br></pre></td></tr></table></figure></p><p>看到successful说明配置文件正确！，如果是failed的话看看你是不是没加sudo<br><img src="/images/2017/09/Ubuntu 安装nginx 来搭建推流服务器/4.png" alt="配置文件正确"></p><p>启动nginx服务器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./nginx</span><br></pre></td></tr></table></figure></p><p>默认端口是80，所以直接到浏览器中直接敲入本地地址 127.0.0.1，显示【Welcome to nginx!】就代表nginx已经成功安装<br><img src="/images/2017/09/Ubuntu 安装nginx 来搭建推流服务器/5.png" alt=""></p><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>创建推流存放文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 为里以 /usr/local/var/www/hls 为例</span><br><span class="line">cd /usr/local</span><br><span class="line">sudo mkdir -p var/www/hls</span><br></pre></td></tr></table></figure></p><p>进入nginx的conf目录，使用vim编辑nginx.conf文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf</span><br><span class="line">sudo vim nginx.conf</span><br></pre></td></tr></table></figure></p><p>配置Nginx，支持http协议拉流<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /hls &#123;</span><br><span class="line">  types &#123;</span><br><span class="line">    application/vnd.apple.mpegurl    m3u8;</span><br><span class="line">    video/mp2t ts;</span><br><span class="line">  &#125;</span><br><span class="line">  root /usr/local/var/www;</span><br><span class="line">   add_header Cache-Control    no-cache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置Nginx，支持rtmp协议推流<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1935;</span><br><span class="line">        application rtmplive &#123;</span><br><span class="line">            live on;</span><br><span class="line">            max_connections 1024;</span><br><span class="line">        &#125;</span><br><span class="line">        application hls&#123;</span><br><span class="line">            live on;</span><br><span class="line">            hls on;</span><br><span class="line">            hls_path /usr/local/var/www/hls;</span><br><span class="line">            hls_fragment 1s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2017/09/Ubuntu 安装nginx 来搭建推流服务器/6.png" alt="hls"></p><p><img src="/images/2017/09/Ubuntu 安装nginx 来搭建推流服务器/7.png" alt="rtmp"></p><p>重启nginx服务器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">sudo ./nginx -s reload</span><br></pre></td></tr></table></figure></p><p>如果执行【sudo ./nginx -s reload】出现下面这个问题<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)</span><br></pre></td></tr></table></figure></p><p>就使用nginx -c的参数指定nginx.conf文件的位置，接着再reload一下就好了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></p><p>我Ubuntu地址为192.168.123.191</p><p>推流至RTMP到服务器  <a href="rtmp://192.168.123.191:1935/rtmplive/lxf" target="_blank" rel="noopener">rtmp://192.168.123.191:1935/rtmplive/lxf</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i 异形.契约.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.123.191:1935/rtmplive/lxf</span><br></pre></td></tr></table></figure></p><p>推流至HLS到服务器  <a href="http://192.168.123.191/hls/lxf.m3u8" target="_blank" rel="noopener">http://192.168.123.191/hls/lxf.m3u8</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i 异形.契约.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.123.191:1935/hls/lxf</span><br></pre></td></tr></table></figure></p><p>如果出现如下错误说明你的电脑没安装ffmpeg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: ffmpeg: command not found</span><br></pre></td></tr></table></figure></p><p>使用Homebrew来安装FFmpeg<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 安装Homebrew</span><br><span class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br><span class="line">// 安装FFmpeg</span><br><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure></p><p>开始推流，终端上就开始不断的刷新推流信息<br><img src="/images/2017/09/Ubuntu 安装nginx 来搭建推流服务器/8.png" alt="开始推流"></p><p>我们可以用电脑上的VLC这个软件来测试是否推流成功<br><img src="/images/2017/09/Ubuntu 安装nginx 来搭建推流服务器/9.png" alt="VLC"></p><p><img src="/images/2017/09/Ubuntu 安装nginx 来搭建推流服务器/10.png" alt="打开流"></p><p>OK，rmtp打开正常，hls就不演示了，一样的<br><img src="/images/2017/09/Ubuntu 安装nginx 来搭建推流服务器/11.png" alt="rmtp打开成功"></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - 给高仿微信添加直播聊天功能</title>
      <link href="/2017/09/12/iOS-%E7%BB%99%E9%AB%98%E4%BB%BF%E5%BE%AE%E4%BF%A1%E6%B7%BB%E5%8A%A0%E7%9B%B4%E6%92%AD%E8%81%8A%E5%A4%A9%E5%8A%9F%E8%83%BD/"/>
      <url>/2017/09/12/iOS-%E7%BB%99%E9%AB%98%E4%BB%BF%E5%BE%AE%E4%BF%A1%E6%B7%BB%E5%8A%A0%E7%9B%B4%E6%92%AD%E8%81%8A%E5%A4%A9%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>抽空给之前做的开源项目<a href="https://github.com/LinXunFeng/LXFWeChat" target="_blank" rel="noopener">【高仿微信】</a>添加直播功能，由于时间有限，做得不是很完美，有空再去完善吧，能用就好~~</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>抽空给之前做的开源项目<a href="https://github.com/LinXunFeng/LXFWeChat" target="_blank" rel="noopener">【高仿微信】</a>添加直播功能，由于时间有限，做得不是很完美，有空再去完善吧，能用就好~~</p></blockquote><p>在此提供存放于百度云的完整项目<a href="https://pan.baidu.com/s/1bpB55Bx" target="_blank" rel="noopener">【高仿微信】- 百度云</a><br>希望各位能在我的GitHub上献出一个宝贵的Star <a href="https://github.com/LinXunFeng/LXFWeChat" target="_blank" rel="noopener">【高仿微信】- GitHub</a><br>谢谢</p><p>注意：直播功能的使用（对方需要先进入到对应的聊天界面）</p><blockquote><p>两个测试账号： lxf lqr  密码都是123456</p></blockquote><p><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/8.gif" alt="直播聊天"></p><h2 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h2><p>首先第一件事当然就是搭建一个推流服务器，这里请跳转参考我之前写好的文章吧<a href="/2017/09/12/Ubuntu-安装nginx-来搭建推流服务器/">【Ubuntu 安装nginx 来搭建推流服务器】</a>，这里我的服务器的ip地址是：192.168.123.191</p><p>APP上推流我使用的是第三方的库 <a href="https://github.com/LaiFengiOS/LFLiveKit" target="_blank" rel="noopener">LFLiveKit</a>，这个第三方库已经帮我们处理了很多事情，而且还包括美颜~~。当然，有时间我们还是要去了解一下底层的东西，这里就先不赘述，过几天抽空再做总结。</p><p>关键代码如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化配置</span></span><br><span class="line"><span class="keyword">let</span> audioConfiguration = <span class="type">LFLiveAudioConfiguration</span>.<span class="keyword">default</span>()</span><br><span class="line"><span class="keyword">let</span> videoConfiguration = <span class="type">LFLiveVideoConfiguration</span>.defaultConfiguration(<span class="keyword">for</span>: .low2, outputImageOrientation: .portrait)</span><br><span class="line"><span class="comment">// 初始化session</span></span><br><span class="line"><span class="keyword">let</span> session = <span class="type">LFLiveSession</span>(audioConfiguration: audioConfiguration, videoConfiguration: videoConfiguration)</span><br><span class="line"><span class="comment">// 设置代理</span></span><br><span class="line"><span class="comment">// session?.delegate = self</span></span><br><span class="line"><span class="comment">// 设置展示的View</span></span><br><span class="line">session?.preView = <span class="keyword">self</span>.view</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stream = <span class="type">LFLiveStreamInfo</span>()</span><br><span class="line">stream.url = <span class="string">"rtmp://192.168.123.191:1935/rtmplive/lxf"</span>; <span class="comment">// 服务器地址</span></span><br><span class="line">session.startLive(stream)</span><br><span class="line"><span class="comment">// 开始推流</span></span><br><span class="line">session.running = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="拉流"><a href="#拉流" class="headerlink" title="拉流"></a>拉流</h2><p>这里我使用的是B站的开源库 <a href="https://github.com/Bilibili/ijkplayer" target="_blank" rel="noopener">ijkplayer</a> </p><p>为了方便可以用这个 <a href="https://github.com/LinXunFeng/IJKFramework" target="_blank" rel="noopener">编译好的B站开源库</a></p><p>需要注意的是：IJKPlayer默认使用的是软解码(FFMpeng)，如果需要使用硬解码需要我们进行相应的设置<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置"videotoolbox"的值为0为软解码(默认)，设置为1则是硬解码</span></span><br><span class="line"><span class="keyword">let</span> options = <span class="type">IJKFFOptions</span>.byDefault()</span><br><span class="line">options?.setOptionIntValue(<span class="number">1</span>, forKey: <span class="string">"videotoolbox"</span>, of: kIJKFFOptionCategoryPlayer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ijkPlayer = <span class="type">IJKFFMoviePlayerController</span>(contentURLString: <span class="string">"rtmp://192.168.123.191:1935/rtmplive/lxf"</span>, with: options)</span><br><span class="line"><span class="comment">// 需保存起来</span></span><br><span class="line"><span class="keyword">self</span>.ijkPlayer = ijkPlayer</span><br><span class="line">ijkPlayer?.view.frame = view.bounds</span><br><span class="line">view.addSubview(ijkPlayer!.view)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备播放，当视频准备好的时候会自动进行播放</span></span><br><span class="line">ijkPlayer?.prepareToPlay()</span><br></pre></td></tr></table></figure></p><h2 id="将IJKPlayer打包"><a href="#将IJKPlayer打包" class="headerlink" title="将IJKPlayer打包"></a>将IJKPlayer打包</h2><p>从B站的gitHub上下载的 <a href="https://github.com/Bilibili/ijkplayer" target="_blank" rel="noopener">ijkplayer</a> 需要手动编译出来，跟着说明走就可以了，这里就不赘述咯，接下来我们将它打包，方便使用</p><p>如果你不跟着说明走的话会提示找不到 avformat.h 这个头文件<br><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/1.png" alt="avformat.h"></p><p>这时你需要在终端cd到ijkplayer这个目录，然后执行 init-ios.sh文件，如图</p><p><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/2.png" alt="目录"></p><p><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/3.png" alt="init-ios.sh"></p><p>然后经过一段漫长的时间之后，在ios目录下就多出了这些ffmpeg相关的目录</p><p><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/4.png" alt="ffmpeg相关目录"></p><p>这个操作是在下载ffmpeg源码，然缺失的avformat.h就在里面</p><p><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/5.png" alt="avformat.h"></p><p>打开项目 IJKMediaPlayer<br><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/6.png" alt="打开项目"></p><p>设置为 release，这样打出来的包会小些<br><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/7.png" alt="Edit Scheme"></p><p><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/8.png" alt="release"></p><p>选择真机和模拟器，各Command+B编译一次<br><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/9.png" alt="真机"><br><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/10.png" alt="模拟器"></p><p>右击，Show in Finder<br><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/11.png" alt=""></p><p>如图，就有两个文件夹，里面存放着的就是我们编译出来的库<br><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/12.png" alt="Paste_Image.png"></p><p>可以使用如下命令查看信息<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -info IJKMediaFramework</span><br></pre></td></tr></table></figure></p><p><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/13.png" alt="查看所支持的处理器"><br>默认模拟器编译出来的包是不支持i386，如果希望支持的话<br>进入项目的 Build Settings，将 Build Active Architecture Only 设置为NO<br><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/14.png" alt="Build Active Architecture Only"></p><p>好，现在对编译出来的包进行合并，这样就即支持真机，也支持模拟器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 格式</span><br><span class="line">// lipo -create  path1  path2  -output  frameName</span><br><span class="line"></span><br><span class="line">lipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework</span><br></pre></td></tr></table></figure></p><p><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/15.png" alt="合并"></p><p>将合并出来的IJKMediaFramework替换 IJKMediaFramework.framework中的IJKMediaFramework，最后将替换好的 IJKMediaFramework.framework 拖入到项目中使用即可。<br><img src="/images/2017/09/iOS - 给高仿微信添加直播聊天功能/16.png" alt="替换"></p><p>最后，附上编译好的IJKMediaFramework<br>链接:<a href="https://pan.baidu.com/s/1eRYlJ7W" target="_blank" rel="noopener">https://pan.baidu.com/s/1eRYlJ7W</a> 密码:9iaw</p><div class="github-widget" data-repo="LinXunFeng/LXFWeChat"></div></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - 揭露Block的内部实现原理</title>
      <link href="/2017/09/12/iOS-%E6%8F%AD%E9%9C%B2Block%E7%9A%84%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2017/09/12/iOS-%E6%8F%AD%E9%9C%B2Block%E7%9A%84%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>想必大家对block都很熟悉了，虽然都会用，但是你真的知道它的原理吗？比如为什么要加上__block，这个修饰符到底有什么用？不加会有什么后果？block又是如何实现的等等。。。该篇文章就为大家揭晓关于Block的实现原理~</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>想必大家对block都很熟悉了，虽然都会用，但是你真的知道它的原理吗？比如为什么要加上__block，这个修饰符到底有什么用？不加会有什么后果？block又是如何实现的等等。。。该篇文章就为大家揭晓关于Block的实现原理~</p></blockquote><h2 id="抛砖引玉"><a href="#抛砖引玉" class="headerlink" title="抛砖引玉"></a>抛砖引玉</h2><p>先给出问题，大家思考下结果吧，如果分别调用以下两个方法，结果如何？<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> blockFunc1()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">void</span> (^block)() = ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"num equal %d"</span>, num);</span><br><span class="line">    &#125;;</span><br><span class="line">    num = <span class="number">200</span>;</span><br><span class="line">    block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> blockFunc2()</span><br><span class="line">&#123;</span><br><span class="line">    __block <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">void</span> (^block)() = ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"num equal %d"</span>, num);</span><br><span class="line">    &#125;;</span><br><span class="line">    num = <span class="number">200</span>;</span><br><span class="line">    block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blockFunc1 : num equal 100</span><br><span class="line">blockFunc2 : num equal 200</span><br></pre></td></tr></table></figure></p><p>是不是有人答错了？再来两个函数。这两个的结果与blockFunc2一样，打印出来的 num 为 200<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">void</span> blockFunc3()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> (^block)() = ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"num equal %d"</span>, num);</span><br><span class="line">    &#125;;</span><br><span class="line">    num = <span class="number">200</span>;</span><br><span class="line">    block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> blockFunc4()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">void</span> (^block)() = ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"num equal %d"</span>, num);</span><br><span class="line">    &#125;;</span><br><span class="line">    num = <span class="number">200</span>;</span><br><span class="line">    block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>疑问：<br>我们发现num做为局部变量时加上 _ _block 修饰符、num做为全局变量以及num为静态局部变量时在block中输出结果是一样的，皆为被修改之后的值，而做为局部变量并且未加上__block的num在block中输出的值却还是未赋值之前的值。这是为什么呢？探索这个问题我们就需要看看底层结构是如何实现的了</p></blockquote><h2 id="探索内部原理"><a href="#探索内部原理" class="headerlink" title="探索内部原理"></a>探索内部原理</h2><p>Objective-C是一个全动态语言，它的一切都是基于runtime实现的！在运行时会将OC转换成C，我们可以利用这个来查看关于block在内部是如何实现的<br>新建一个Command Line Tool项目，将以上代码放入main.m中，如图</p><p><img src="/images/2017/09/iOS - 揭露Block的内部实现原理/1.png" alt="main.m"></p><p>这里我们打开终端，cd到项目目录下，然后将用下面的命令将OC重写为C<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -rewrite-objc main.m</span><br></pre></td></tr></table></figure></p><p><img src="/images/2017/09/iOS - 揭露Block的内部实现原理/2.png" alt="rewrite-objc"><br>这时我们可以发现当前目录下多了一个main.cpp文件，打开它并滚到最下面<br><img src="/images/2017/09/iOS - 揭露Block的内部实现原理/3.png" alt="打开main.cpp"></p><p><img src="/images/2017/09/iOS - 揭露Block的内部实现原理/4.png" alt="main.cpp"><br>这里我们可以看到blockFunc1的C语言实现方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blockFunc1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">void</span> (*block)() = ((<span class="keyword">void</span> (*)())&amp;__blockFunc1_block_impl_0((<span class="keyword">void</span> *)__blockFunc1_block_func_0, &amp;__blockFunc1_block_desc_0_DATA, num));</span><br><span class="line">    num = <span class="number">200</span>;</span><br><span class="line">    ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去掉类型转换<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blockFunc1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// *************************重点句***********************</span></span><br><span class="line">    <span class="keyword">void</span> (*block)() = &amp;__blockFunc1_block_impl_0(__blockFunc1_block_func_0, &amp;__blockFunc1_block_desc_0_DATA, num));</span><br><span class="line">    <span class="comment">// *****************************************************</span></span><br><span class="line">    num = <span class="number">200</span>;</span><br><span class="line">    ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们可以看到</p><blockquote><p>block实际上是指向结构体的指针</p></blockquote><p>该结构体为<br><img src="/images/2017/09/iOS - 揭露Block的内部实现原理/5.png" alt="__blockFunc1_block_impl_0"></p><p>我们来看下带__block的blockFunc2</p><p><img src="/images/2017/09/iOS - 揭露Block的内部实现原理/6.png" alt="blockFunc2"><br>在 blockFunc1 中，block指向了一个名为<strong>blockFunc1_block_impl_0的结构体，并且在初始化时输入了三个参数(</strong>blockFunc1_block_impl_0最后的flags有默认参数，所以可以不用传参)，第三个参数就是我们写的num，与blockFunc2相比较，这里的num并没有带*号，所以说在这里它只是传值而非传址，而下面的【num = 200;】也就没什么卵用了。这就是blockFunc2、blockFunc3与blockFunc4为什么能打印出num改变后的值，而blockFunc1不行的原因。</p><p><img src="/images/2017/09/iOS - 揭露Block的内部实现原理/7.png" alt=""></p><p>在这里我们也可以看出：</p><blockquote><p>编译器会将block的内部代码生成对应的函数</p></blockquote><p><strong> SO </strong></p><blockquote><p>我们总结下，block在内部会作为一个指向结构体的指针，当调用block的时候其实就是根据block对应的指针找到相应的函数，进而进行调用，并传入自身</p></blockquote><h2 id="block的实现"><a href="#block的实现" class="headerlink" title="__block的实现"></a>__block的实现</h2><p>我们再来看看 _ <em>block，</em> _block也被转换成了结构体，并含有5个变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct __Block_byref_num_0 &#123;</span><br><span class="line">  void *__isa;  // isa指针</span><br><span class="line">__Block_byref_num_0 *__forwarding;  // 实例本身</span><br><span class="line"> int __flags; </span><br><span class="line"> int __size;</span><br><span class="line"> int num;  // 我们的num值</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2017/09/iOS - 揭露Block的内部实现原理/8.png" alt=""><br>图片对应着blockFunc2中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__block int num = 100;</span><br></pre></td></tr></table></figure><p>当创建num并用__block修饰的时候，会初始化这五个变量<br>当我们执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = 200;</span><br></pre></td></tr></table></figure></p><p>对应着<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(num.__forwarding-&gt;num) = 200;</span><br></pre></td></tr></table></figure></p><p>上面刚刚提到过 _ _forwarding是实例本身，即类型结构体__Block_byref_num_0的&amp;num，再找到对应的num变量，将其原来的100修改为200~~</p><p>到此，关于Block内部实现的揭晓也就到此结束了，希望本文能让你对block有更深的理解，感谢你耐心的阅读！</p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - Swift 面向协议编程（二）</title>
      <link href="/2017/09/12/iOS-Swift-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2017/09/12/iOS-Swift-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>上一篇文章<a href="/2017/09/12/iOS-Swift-面向协议编程（一）/">iOS - Swift 面向协议编程（一）</a>已经对Swift的面向协议编程做了介绍，接下来该篇文章将使用面向协议开发(POP)来做下实际的应用</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>上一篇文章<a href="/2017/09/12/iOS-Swift-面向协议编程（一）/">iOS - Swift 面向协议编程（一）</a>已经对Swift的面向协议编程做了介绍，接下来该篇文章将使用面向协议开发(POP)来做下实际的应用</p></blockquote><p>在实际开发中，自定义View基本上是必须的，相信这对我们来说都是比较简单，不过我们还是来回顾一下下~</p><h1 id="面向对象开发"><a href="#面向对象开发" class="headerlink" title="面向对象开发"></a>面向对象开发</h1><p>1 新建一个UIView的FirstTypeView<br><img src="/images/2017/09/iOS - Swift 面向协议编程（二）/1.png" alt="FirstTypeView"></p><p>2 创建一个View的xib文件<br><img src="/images/2017/09/iOS - Swift 面向协议编程（二）/2.png" alt="xib"><br>3 设置xib对应的class进行绑定</p><p><img src="/images/2017/09/iOS - Swift 面向协议编程（二）/3.png" alt="xib class"></p><p>4 在FirstTypeView.swift 中实现一个类方法，方便我们外部用xib来初始化FirstTypeView<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstTypeView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">FirstTypeView</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">loadFromNib</span>() -&gt; <span class="title">FirstTypeView</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Bundle</span>.main.loadNibNamed(<span class="string">"<span class="subst">\(<span class="keyword">self</span>)</span>"</span>, owner: <span class="literal">nil</span>, options: <span class="literal">nil</span>)?.first <span class="keyword">as</span>! <span class="type">FirstTypeView</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在外部只要调用FirstTypeView的loadFromNib方法就可以初始化一个View来使用了。好，现在又有一个类SecondTypeView，也是要求使用xib来初始化view。这时我们就会想，一样的加载xib的方法，那我们就把它抽取出来放到父类就可以了。这里的父类以BaseView.swift为例<br>父类的主要实现代码<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BaseView</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">loadFromNib</span>() -&gt; <span class="title">BaseView</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Bundle</span>.main.loadNibNamed(<span class="string">"<span class="subst">\(<span class="keyword">self</span>)</span>"</span>, owner: <span class="literal">nil</span>, options: <span class="literal">nil</span>)?.first <span class="keyword">as</span>! <span class="type">BaseView</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那我们的FirstTypeView和SecondTypeView只需要直接继承于BaseView就可以了，在其它地方初始化view也很方便<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let firstView = FirstTypeView.loadFromNib()</span><br><span class="line">view.addSubview(firstView)</span><br><span class="line"></span><br><span class="line">let secondView = SecondTypeView.loadFromNib()</span><br><span class="line">view.addSubview(secondView)</span><br></pre></td></tr></table></figure></p><p>好，现在FirstTypeView里声明了一个属性name，SecondTypeView声明的属性为age，假如我们现在要使用各自对应的属性，这时是直接点不出来的，需要先进行强转<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstView = <span class="type">FirstTypeView</span>.loadFromNib() <span class="keyword">as</span>! <span class="type">FirstTypeView</span></span><br><span class="line">firstView.name = <span class="string">"LXF"</span></span><br><span class="line">view.addSubview(firstView)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> secondView = <span class="type">SecondTypeView</span>.loadFromNib() <span class="keyword">as</span>! <span class="type">SecondTypeView</span></span><br><span class="line">secondView.age = <span class="number">100</span></span><br><span class="line">view.addSubview(secondView)</span><br></pre></td></tr></table></figure></p><p>但是这样觉得不是很方便，还需要进行强转，我们能不能在BaseView里面搞定它呢？如果是Swift 2.x 的话是可以的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extension BaseView &#123;</span><br><span class="line">    class func loadFromNib() -&gt; Self &#123; // 注意这里是大写的S</span><br><span class="line">        return Bundle.main.loadNibNamed(&quot;\(self)&quot;, owner: nil, options: nil)?.first as! Self</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是现在Swift 3.0已经不支持这种写法了，会报错。这个时候如果使用面向协议的开发就很方便了。</p><h2 id="面向协议开发"><a href="#面向协议开发" class="headerlink" title="面向协议开发"></a>面向协议开发</h2><blockquote><p>将BaseView删除，FirstTypeView和SecondTypeView改回继承于UIView</p></blockquote><p>1 新建一个Swift文件 Nibloadable.swift<br><img src="/images/2017/09/iOS - Swift 面向协议编程（二）/4.png" alt="Nibloadable"></p><p>2 实现协议方法</p><p><strong>协议中不允许定义类方法，需改为静态方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">protocol Nibloadable &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension Nibloadable &#123;</span><br><span class="line">    static func loadFromNib() -&gt; Self &#123;</span><br><span class="line">        return Bundle.main.loadNibNamed(&quot;\(self)&quot;, owner: nil, options: nil)?.first as! Self</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3 遵守协议<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class SecondTypeView: UIView, Nibloadable &#123;</span><br><span class="line">    var age: Int = 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就可以了，而且你在调用loadFromNib方法时可以发现，类型是对应上的</p><p><img src="/images/2017/09/iOS - Swift 面向协议编程（二）/5.png" alt="loadFromNib协议方法"></p><p>好了，面向协议开发的应用就记录到这里，希望能帮助到大家！</p><p><a href="https://github.com/LinXunFeng/LXFPOP" target="_blank" rel="noopener">Demo</a></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - Swift 面向协议编程（一）</title>
      <link href="/2017/09/12/iOS-Swift-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2017/09/12/iOS-Swift-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>传统的面向对象开发思维方式是将类中实现的相似方法抽取出来，接着放入一个Base类，然后继承于Base类后各个类即可找拥有相同的方法，不用再一个个手动实现。<br>比如：一个Person类，一个Dog类，它们都拥有方法eat，那么就可以新建一个Animal类，将eat方法抽取出来放入其中，然后将Person类和Dog类都继承于Animal。<br>但是，如果现在又有一个Robot类，也需要拥有eat方法，而此时也将其继承于Animal的话显然是不合理的，于是我们就需要转换思维，面向协议开发~</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><blockquote><p>OC无法做到面向协议开发，而Swift可以，因为Swift可以做到协议方法的具体实现，而OC不行</p></blockquote><h2 id="面向对象开发"><a href="#面向对象开发" class="headerlink" title="面向对象开发"></a>面向对象开发</h2><p>传统的面向对象开发思维方式是将类中实现的相似方法抽取出来，接着放入一个Base类，然后继承于Base类后各个类即可找拥有相同的方法，不用再一个个手动实现。<br>比如：一个Person类，一个Dog类，它们都拥有方法eat，那么就可以新建一个Animal类，将eat方法抽取出来放入其中，然后将Person类和Dog类都继承于Animal。<br>但是，如果现在又有一个Robot类，也需要拥有eat方法，而此时也将其继承于Animal的话显然是不合理的，于是我们就需要转换思维，面向协议开发~</p><h2 id="面向协议开发"><a href="#面向协议开发" class="headerlink" title="面向协议开发"></a>面向协议开发</h2><p>面向协议开发的核心是：<strong> 模块化（组件化） </strong><br>我们先来回顾下协议的一般使用，新建一个Swift文件LXFProtocol.swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Foundation</span><br><span class="line"></span><br><span class="line">protocol LXFProtocol &#123;</span><br><span class="line">    func eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们的Person类遵守协议LXFProtocol，需要我们实现协议中的方法，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Person: NSObject, LXFProtocol &#123;</span><br><span class="line">    func eat() &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那我们每个类都这样做的话跟直接复制粘贴代码并没什么不同~~<br>而开头已经提到一点：</p><blockquote><p>Swift可以做到协议方法的具体实现</p></blockquote><p>那么现在，我们新建一个Swift文件Eatable.swift，以区分LXFProtocol.swift<br>Eatable.swift中的代码实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Foundation</span><br><span class="line"></span><br><span class="line">protocol Eatable &#123;</span><br><span class="line">    // 可声明变量</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension Eatable &#123;</span><br><span class="line">    func eat() &#123;</span><br><span class="line">        // 实现具体的功能</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有2个注意点</p><ul><li>protocol中可以声明变量，方便在协议方法中使用</li><li>协议方法的具体实现需要在extension中来实现</li></ul><p>使Dog类遵守Eatable<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Dog: NSObject, Eatable &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们就可以在其它地方轻松调用dog的eat方法，Person类与Robot类也是如法炮制<br><img src="/images/2017/09/iOS-Swift-面向协议编程（一）/1.png" alt=""></p><p>至此，我们就可以通过面向协议的方式给类定制不同的功能，也就是模块化。可以发现Swift的面向协议编程跟c++的多继承很相似</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>现在的这个Eatable协议是可以被任意遵守的，如果我们有这么个需求，我们创建的协议只是被UIViewController遵守，那我们该怎么做呢？<br>【当然，Eatable协议只能被UIViewController遵守很扯淡，这里只是举例，不要太在意咯~~】</p><blockquote><p>在 extension 后面加上约束关键字【where】，并注明该协议只能被UIViewController这个类（包括子类）所遵守，而且此时我们还可以拿到遵守该协议的控制器的view</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//import Foundation</span><br><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">protocol Eatable &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension Eatable where Self : UIViewController &#123;</span><br><span class="line">    func eat() &#123;</span><br><span class="line">        view.backgroundColor = UIColor.red</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/LinXunFeng/LXFPOP" target="_blank" rel="noopener">Demo</a><br>接下来以一个实际应用来巩固下吧 <a href="/2017/09/12/iOS-Swift-面向协议编程（二）/">iOS - Swift 面向协议编程（二）</a></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - Swift 高仿微信</title>
      <link href="/2017/09/12/iOS-Swift-%E9%AB%98%E4%BB%BF%E5%BE%AE%E4%BF%A1/"/>
      <url>/2017/09/12/iOS-Swift-%E9%AB%98%E4%BB%BF%E5%BE%AE%E4%BF%A1/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>从2016年12月份开始做到 2017年2月16，虽说这个项目看起来不大，但是锻炼人的地方还真是很多的，微信通讯录联系人的按拼音排序，自定义表情键盘中遇到的分页滚动，微信聊天界面的图片显示、语音信息的动画等。挑战着各种各样的需求，本人也将遇到的问题的解决方案做了记录并整理了一下，希望能给iOS程序员同胞们带来帮助。目前基本的聊天已完成，实现了一部分个人信息的修改，功能我会尽快完善的！</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="LXFWeChat"><a href="#LXFWeChat" class="headerlink" title="LXFWeChat"></a>LXFWeChat</h1><p>Swift 3.0 高仿微信</p><blockquote><p>两个测试账号： lxf lqr  密码都是123456 </p></blockquote><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p>码云<br><a href="http://git.oschina.net/LinXunFeng/LXFWeChat" target="_blank" rel="noopener">http://git.oschina.net/LinXunFeng/LXFWeChat</a></p><p>GitHub<br><a href="https://github.com/LinXunFeng/LXFWeChat" target="_blank" rel="noopener">https://github.com/LinXunFeng/LXFWeChat</a></p><p>在此提供存放于百度云的完整项目<a href="https://pan.baidu.com/s/1bpB55Bx" target="_blank" rel="noopener">【高仿微信】- 百度云</a><br>希望各位能在我的项目上献出一个宝贵的Star<br>谢谢</p><blockquote><p>从2016年12月份开始做到现在，虽说这个项目看起来不大，但是锻炼人的地方还真是很多的，微信通讯录联系人的按拼音排序，自定义表情键盘中遇到的分页滚动，微信聊天界面的图片显示、语音信息的动画等。挑战着各种各样的需求，本人也将遇到的问题的解决方案做了记录并整理了一下，希望能给iOS程序员同胞们带来帮助。目前基本的聊天已完成，实现了一部分个人信息的修改，功能我会尽快完善的！</p></blockquote><h2 id="模仿微信的导航栏"><a href="#模仿微信的导航栏" class="headerlink" title="模仿微信的导航栏"></a>模仿微信的导航栏</h2><p>在navigationBar底部添加一个添加了渐变层的view<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> blurBackView = <span class="type">UIView</span>()</span><br><span class="line">blurBackView.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: -<span class="number">20</span>, width: kScreenW, height: <span class="number">64</span>)</span><br><span class="line"><span class="keyword">let</span> gradintLayer = <span class="type">CAGradientLayer</span>()</span><br><span class="line">gradintLayer.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: kScreenW, height: <span class="number">64</span>)</span><br><span class="line">gradintLayer.colors = [</span><br><span class="line">    <span class="type">UIColor</span>.hexInt(<span class="number">0x040012</span>).withAlphaComponent(<span class="number">0.76</span>).cgColor,</span><br><span class="line">    <span class="type">UIColor</span>.hexInt(<span class="number">0x040012</span>).withAlphaComponent(<span class="number">0.28</span>).cgColor</span><br><span class="line">]</span><br><span class="line">gradintLayer.startPoint = <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)</span><br><span class="line">gradintLayer.endPoint = <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">1.0</span>)</span><br><span class="line">blurBackView.layer.addSublayer(gradintLayer)</span><br><span class="line">blurBackView.isUserInteractionEnabled = <span class="literal">false</span></span><br><span class="line">blurBackView.alpha = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置导航栏样式</span></span><br><span class="line">navigationBar.barStyle = .black</span><br><span class="line">navigationBar.insertSubview(blurBackView, at: <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><h2 id="表情面板和更多面板"><a href="#表情面板和更多面板" class="headerlink" title="表情面板和更多面板"></a>表情面板和更多面板</h2><p>遇到的问题总结了一下，可以参考下以下总结的文章</p><p><a href="http://www.jianshu.com/p/18d7d0f5e3e2" target="_blank" rel="noopener">《iOS - Swift UICollectionView横向分页滚动，cell左右排版》</a></p><p><a href="http://www.jianshu.com/p/60da3b52d64c" target="_blank" rel="noopener">《iOS - Swift UICollectionView横向分页的问题》</a></p><h2 id="聊天界面"><a href="#聊天界面" class="headerlink" title="聊天界面"></a>聊天界面</h2><p><a href="http://www.jianshu.com/p/4c570cd79bd3" target="_blank" rel="noopener">《iOS - Swift 仿微信聊天图片显示》</a></p><p><a href="http://www.jianshu.com/p/aa139463eb4b" target="_blank" rel="noopener">《iOS - Swift UITableView的scrollToRow的”坑”》</a></p><p><a href="http://www.jianshu.com/p/412a2e23b5b6" target="_blank" rel="noopener">《iOS - Swift UIButton中ImageView的animationImages动画执行完毕后，图标变暗》</a></p><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p><a href="http://www.jianshu.com/p/807cddad469a" target="_blank" rel="noopener">《iOS - Swift 仿微信小红点(无数字)》</a></p><h2 id="目前完成的功能"><a href="#目前完成的功能" class="headerlink" title="目前完成的功能"></a>目前完成的功能</h2><h3 id="微信界面"><a href="#微信界面" class="headerlink" title="微信界面"></a>微信界面</h3><ol><li>显示右上角的菜单</li><li>显示最近联系人</li><li>最近联系人信息未读数的显示</li></ol><h3 id="通讯录界面"><a href="#通讯录界面" class="headerlink" title="通讯录界面"></a>通讯录界面</h3><ol><li>联系人的排序</li><li>联系人总数显示</li></ol><h3 id="发现界面"><a href="#发现界面" class="headerlink" title="发现界面"></a>发现界面</h3><ol><li>动态小红点的显示</li><li>购物选项的链接跳转</li></ol><h3 id="我界面"><a href="#我界面" class="headerlink" title="我界面"></a>我界面</h3><ol><li>个人头像的上传与设置，及头像的保存</li><li>我的二维码界面的显示及二维码的保存</li></ol><h3 id="聊天界面-1"><a href="#聊天界面-1" class="headerlink" title="聊天界面"></a>聊天界面</h3><ol><li>小视频的录制与发送</li><li>小视频的播放</li><li>聊天时间</li><li>图片的发送与显示</li><li>未发送成功的重发功能</li><li>语音的录制与发送</li><li>语音的播放动态效果</li></ol><h2 id="已知BUG"><a href="#已知BUG" class="headerlink" title="已知BUG"></a>已知BUG</h2><ul><li>小视频和图片发送出去后不能立即更新显示缩略图</li><li>更换头像模拟器测试正常，真机无效。。</li></ul><h2 id="2017-07-24-更新"><a href="#2017-07-24-更新" class="headerlink" title="2017-07-24 更新"></a>2017-07-24 更新</h2><p>抽空出来添加了一个简单的直播功能（对方需要先进入到对应的聊天界面）<br>相关博文：<a href="http://www.jianshu.com/p/022b9044decc" target="_blank" rel="noopener">iOS - 给高仿微信添加直播聊天功能</a><br>需要用到<a href="https://github.com/LinXunFeng/IJKFramework" target="_blank" rel="noopener">编译好的B站开源库ijkplayer</a> ，由于打包好的文件太大，传不上来，所以需要各位去自己编译集成进去。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><h3 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h3><p><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/1.gif" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/2.gif" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/3.gif" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/4.gif" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/5.gif" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/6.gif" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/7.gif" alt=""></p><h3 id="静态图"><a href="#静态图" class="headerlink" title="静态图"></a>静态图</h3><p><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/Snip20170206_1.png" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/Snip20170214_1.png" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/Snip20170214_2.png" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/Snip20170214_3.png" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/Snip20170214_4.png" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/Snip20170214_5.png" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/Snip20170214_6.png" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/Snip20170214_7.png" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/Snip20170214_8.png" alt=""><br><img src="https://github.com/LinXunFeng/LXFWeChat/raw/master/Screenshots/Snip20170214_9.png" alt=""></p><div class="github-widget" data-repo="LinXunFeng/LXFWeChat"></div></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> iOS项目 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - ARC与MRC的单例设计模式</title>
      <link href="/2017/09/12/iOS-ARC%E4%B8%8EMRC%E7%9A%84%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/09/12/iOS-ARC%E4%B8%8EMRC%E7%9A%84%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>单例设计模式(Singleton) 就是保证某个类创建出来的对象从始到终只有一个的一种方案</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="单例设计模式-Singleton"><a href="#单例设计模式-Singleton" class="headerlink" title="单例设计模式(Singleton)"></a>单例设计模式(Singleton)</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>就是保证某个类创建出来的对象从始到终只有一个的一种方案</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>节省内存开销</li><li>保证整个程序中使用同一份资源</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>首先将我们的环境设置为非ARC环境，即MRC，如图<br><img src="/images/2017/09/iOS - ARC与MRC的单例设计模式/1.png" alt="MRC环境"></p><blockquote><p>在MRC模式下，我们得自己手动释放资源，所以得重写一些与资源创建与释放相关的方法，以保证单例对象的唯一。</p></blockquote><p>新建一个继承于NSObject的类 LXFFileTool，我直接上代码，并写上注释<br>LXFFileTool.h<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LXFFileTool</span> : <span class="title">NSObject</span></span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedFileTool;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p><p>LXFFileTool.m<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"LXFFileTool.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LXFFileTool</span></span></span><br><span class="line"><span class="keyword">static</span> LXFFileTool *_fileTools = <span class="literal">nil</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  alloc方法内部会调用allocWithZone:</span></span><br><span class="line"><span class="comment"> *  @param zone 系统分配给app的内存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)allocWithZone:(<span class="keyword">struct</span> _NSZone *)zone &#123;</span><br><span class="line">    <span class="keyword">if</span> (_fileTools == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">        <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;    <span class="comment">// 安全(这个代码只会被调用一次)</span></span><br><span class="line">            _fileTools = [<span class="keyword">super</span> allocWithZone:zone];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _fileTools;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">oneway</span> <span class="keyword">void</span>)release &#123;</span><br><span class="line">    <span class="comment">// 在allocWithZone中使用了GCD令创建对象的代码只执行一次，如果_fileTools被释放则无法再创建</span></span><br><span class="line">    <span class="comment">// 重写release方法，防止_fileTools被释放</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写retain方法</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)<span class="keyword">retain</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写retainCount锁定引用计数</span></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)retainCount &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写init方法，防止单例所拥有的属性值被重置</span></span><br><span class="line"><span class="comment">// 让初始化的方法只能执行一次，自然属性值就没有机会被重置</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        _fileTools = [<span class="keyword">super</span> init];  <span class="comment">// init会先调用alloc方法</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _fileTools;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 仿造系统的单例创建方式，提供类方法</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedFileTool &#123;</span><br><span class="line">    <span class="comment">// 由于我们已经重写了init方法保证了单例对象的唯一了，所以这里直接调用init方法即可。</span></span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p><blockquote><p>MRC下就是这样，我们的目的就是只能创建和初始化一次对象，不给机会释放，也不给机会重新初始化，从而保证了该对象的唯一。</p></blockquote><p>那现在来看看ARC下是如何实现单例的吧。其实ARC下与MRC的区别就是ARC下我们不用自己再手动去释放资源了，从而使代码上大同小异，如下所示。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"LXFFileTool.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LXFFileTool</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> LXFFileTool *_fileTools = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)allocWithZone:(<span class="keyword">struct</span> _NSZone *)zone &#123;</span><br><span class="line">    <span class="keyword">if</span> (_fileTools == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">        <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">            _fileTools = [<span class="keyword">super</span> allocWithZone:zone];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _fileTools;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        _fileTools = [<span class="keyword">super</span> init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _fileTools;</span><br><span class="line">&#125;</span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedFileTool &#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="批量创建单例"><a href="#批量创建单例" class="headerlink" title="批量创建单例"></a>批量创建单例</h2><blockquote><p>现在我们已经知道了ARC与MRC下分别是如何创建单例的了，但是如果我们一个项目里需要多个单例，那我们只能把代码复制粘贴再改改就完事吗？这未免也太麻烦了吧。那我们能不能做到快速且方便的创建单例对象呢？可以的，利用宏</p></blockquote><p>首先先说下一些关于宏的知识吧</p><ul><li>使用 #define 关键字来定义宏</li><li>宏定义只能是单行的，不能换行</li></ul><p>那现在来讨论下一些疑惑吧，你说宏只能单行，可是创建单例的代码可是有很多行呀！还有我们如何做到自定义类方法名(就是 sharedXXX )？好，我们来介绍下宏下的两个特殊符号</p><h3 id="宏的特殊符号"><a href="#宏的特殊符号" class="headerlink" title="宏的特殊符号"></a>宏的特殊符号</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">用来转译换行符，即屏蔽换行符</td></tr><tr><td style="text-align:center">##</td><td style="text-align:center">将两个相邻的标记(token)连接为一个单独的标记</td></tr></tbody></table><p>想了解其它关于宏的预处理命令可以自行百度参考”C语言的预处理命令”</p><blockquote><p>简单来说，\用于取消换行，##用来连接，而我们就用##来实现自定义类方法名</p></blockquote><p>创建一个头文件Singleton.h用来存放宏定义<br>先来看看定义.h中 sharedXXX 是如何通过宏来定义的<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .h文件的实现</span></span><br><span class="line"><span class="meta">#define SingletonH(methodName) + (instancetype)shared##methodName;</span></span><br></pre></td></tr></table></figure></p><p>现在回到LXFFileTool.h中，直接一行定义sharedFileTool这个类方法<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"Singleton.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LXFFileTool</span> : <span class="title">NSObject</span></span></span><br><span class="line">SingletonH(FileTool)</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p><p>我们只需要将方法名FileTool传入SingletonH()中就可以拼接为sharedFileTool</p><p>那现在再来看看定义.m中创建单例的方式，以ARC为例<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define SingletonM(methodName) \</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> _instance = <span class="literal">nil</span>; \</span><br><span class="line">+ (<span class="keyword">instancetype</span>)allocWithZone:(<span class="keyword">struct</span> _NSZone *)zAone &#123; \</span><br><span class="line">    <span class="keyword">if</span> (_instance == <span class="literal">nil</span>) &#123; \</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken; \</span><br><span class="line">        <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123; \</span><br><span class="line">            _instance = [<span class="keyword">super</span> allocWithZone:zone]; \</span><br><span class="line">        &#125;); \</span><br><span class="line">    &#125; \</span><br><span class="line">    <span class="keyword">return</span> _instance; \</span><br><span class="line">&#125; \</span><br><span class="line">\</span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123; \</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken; \</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123; \</span><br><span class="line">        _instance = [<span class="keyword">super</span> init]; \</span><br><span class="line">    &#125;); \</span><br><span class="line">    <span class="keyword">return</span> _instance; \</span><br><span class="line">&#125; \</span><br><span class="line">\</span><br><span class="line">+ (<span class="keyword">instancetype</span>)shared<span class="meta">##methodName &#123; \</span></span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] init]; \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>在每一个行后面加上(反斜杠)取消换行，使用##来拼接传入的方法名，但还有一点需要注意：最后一行不能加反斜杠</p></blockquote><p>回到LXFFileTool.m中，一行实现创建单例<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"LXFFileTool.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LXFFileTool</span></span></span><br><span class="line">SingletonM(FileTool)</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p><p>好，现在还有一个问题，就是如果我的项目中有个别文件是需要MRC环境的，那我该怎么办才能让创建单例也是如此简单呢？很简单，加个判断就好了，大致判断如下，详情看文章最后附上的Demo<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#if __has_feature(objc_arc) // ARC</span></span><br><span class="line"><span class="comment">// 写上ARC下的定义代码</span></span><br><span class="line"><span class="meta">#else   // 非ARC</span></span><br><span class="line"><span class="comment">// 写上MRC下的定义代码</span></span><br><span class="line"><span class="meta">#endif</span></span><br></pre></td></tr></table></figure></p><blockquote><p>好了，现在用起来是不是方便多了？我们只要创建一个类，然后在.h文件中写SingletonH(XXX)，再在.m文件中写SingletonM(XXX)就可以实现单例了~</p></blockquote><h3 id="指定环境"><a href="#指定环境" class="headerlink" title="指定环境"></a>指定环境</h3><p>顺便提下如何在MRC下指定某个类文件使用的环境为ARC<br><img src="/images/2017/09/iOS - ARC与MRC的单例设计模式/2.png" alt="指定环境"><br>如图，可以在 Build Phases -&gt; Compile Sources 中双击某个需要ARC环境的类文件，然后写上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-fobjc-arc</span><br></pre></td></tr></table></figure><p>如果是指定MRC，则写上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-fno-objc-arc</span><br></pre></td></tr></table></figure></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>最后，附上Demo: <a href="https://github.com/LinXunFeng/LXFSingleton" target="_blank" rel="noopener">LXFSingleton</a></p><div class="github-widget" data-repo="LinXunFeng/LXFSingleton"></div></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - Swift UIButton中ImageView的animationImages动画执行完毕后，图标变暗</title>
      <link href="/2017/09/12/iOS-Swift-UIButton%E4%B8%ADImageView%E7%9A%84animationImages%E5%8A%A8%E7%94%BB%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%E5%90%8E%EF%BC%8C%E5%9B%BE%E6%A0%87%E5%8F%98%E6%9A%97/"/>
      <url>/2017/09/12/iOS-Swift-UIButton%E4%B8%ADImageView%E7%9A%84animationImages%E5%8A%A8%E7%94%BB%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%E5%90%8E%EF%BC%8C%E5%9B%BE%E6%A0%87%E5%8F%98%E6%9A%97/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>查看官方文档的说明 当该属性设置为true时，按钮在高亮状态下，图片会绘制成高亮（前提是没有手动设置高亮图片）。并且该值的默认值为true<br>所以我们也可以将属性adjustsImageWhenHighlighted设置为false，不让系统自动帮我们设置高亮状态下显示的图片即可。</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h2><p><img src="/images/2017/09/iOS - Swift UIButton中ImageView的animationImages动画执行完毕后，图标变暗/1.gif" alt="变暗"><br>贴出重要代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置按钮图片动画数组</span></span><br><span class="line">voiceButton.imageView?.animationImages = [</span><br><span class="line">    #imageLiteral(resourceName: <span class="string">"message_voice_sender_playing_1"</span>),</span><br><span class="line">    #imageLiteral(resourceName: <span class="string">"message_voice_sender_playing_2"</span>),</span><br><span class="line">    #imageLiteral(resourceName: <span class="string">"message_voice_sender_playing_3"</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始动画</span></span><br><span class="line">voiceButton.imageView?.startAnimating()</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 停止动画</span></span><br><span class="line">voiceButton.imageView?.stopAnimating()</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>这个按钮在结束动画之后之所以会变暗，是因为它在动画结束之后自动显示为高亮图片，不信？那只好上证据了~<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置语音按钮的高亮图片</span></span><br><span class="line">voiceButton.setImage(#imageLiteral(resourceName: <span class="string">"message_voice_sender_normal"</span>), <span class="keyword">for</span>: .highlighted)</span><br></pre></td></tr></table></figure></p><p><img src="/images/2017/09/iOS - Swift UIButton中ImageView的animationImages动画执行完毕后，图标变暗/2.gif" alt=""></p><p>那知道原因之后就很好解决了</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一：设置按钮的高亮图片"><a href="#方案一：设置按钮的高亮图片" class="headerlink" title="方案一：设置按钮的高亮图片"></a>方案一：设置按钮的高亮图片</h3><p>将按钮的高亮图片与普通状态下的一致即可。这里就再赘述了</p><h3 id="方案二：adjustsImageWhenHighlighted-false"><a href="#方案二：adjustsImageWhenHighlighted-false" class="headerlink" title="方案二：adjustsImageWhenHighlighted = false"></a>方案二：adjustsImageWhenHighlighted = false</h3><p>在UIButton中有这么一个属性<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adjustsImageWhenHighlighted</span><br></pre></td></tr></table></figure></p><p>查看官方文档的说明<br><img src="/images/2017/09/iOS - Swift UIButton中ImageView的animationImages动画执行完毕后，图标变暗/3.png" alt=""><br>当该属性设置为true时，按钮在高亮状态下，图片会绘制成高亮（前提是没有手动设置高亮图片）。并且该值的默认值为true<br>所以我们也可以将属性adjustsImageWhenHighlighted设置为false，不让系统自动帮我们设置高亮状态下显示的图片即可。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/images/2017/09/iOS - Swift UIButton中ImageView的animationImages动画执行完毕后，图标变暗/4.gif" alt="完美"></p><p>附上相关项目：<a href="https://github.com/LinXunFeng/LXFWeChat" target="_blank" rel="noopener">Swift 3.0 高仿微信</a></p><div class="github-widget" data-repo="LinXunFeng/LXFWeChat"></div></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift 3.0 高仿喜马拉雅FM</title>
      <link href="/2017/09/12/Swift-3-0-%E9%AB%98%E4%BB%BF%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85FM/"/>
      <url>/2017/09/12/Swift-3-0-%E9%AB%98%E4%BB%BF%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85FM/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>基于Swift 3.0 编写而成,运行环境要求: Xcode 8.0</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="高仿喜马拉雅FM"><a href="#高仿喜马拉雅FM" class="headerlink" title="高仿喜马拉雅FM"></a>高仿喜马拉雅FM</h1><p>gitHub: <a href="https://github.com/LinXunFeng/LXFFM" target="_blank" rel="noopener">https://github.com/LinXunFeng/LXFFM</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>基于Swift 3.0 编写而成,运行环境要求: Xcode 8.0</p><h2 id="LXFFM"><a href="#LXFFM" class="headerlink" title="LXFFM"></a>LXFFM</h2><p>原OC版: <a href="https://github.com/Eastwu5788/XMLYFM" target="_blank" rel="noopener">https://github.com/Eastwu5788/XMLYFM</a><br>从原版作者的源代码上学到了很多,十分感谢.<br>由于只是本人OC转Swift的试练项目,所以有些内容并没有实现,哈哈</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://github.com/LinXunFeng/LXFFM/raw/master/Screenshots/1.gif" alt="推荐"></p><p><img src="https://github.com/LinXunFeng/LXFFM/raw/master/Screenshots/2.gif" alt="分类"></p><p><img src="https://github.com/LinXunFeng/LXFFM/raw/master/Screenshots/3.gif" alt="广播"></p><p><img src="https://github.com/LinXunFeng/LXFFM/raw/master/Screenshots/4.gif" alt="榜单"></p><p><img src="https://github.com/LinXunFeng/LXFFM/raw/master/Screenshots/5.gif" alt="主播"></p><p><img src="https://github.com/LinXunFeng/LXFFM/raw/master/Screenshots/6.gif" alt="订阅听"></p><p><img src="https://github.com/LinXunFeng/LXFFM/raw/master/Screenshots/7.gif" alt="下载听"></p><p><img src="https://github.com/LinXunFeng/LXFFM/raw/master/Screenshots/8.gif" alt="我的"></p><div class="github-widget" data-repo="LinXunFeng/LXFFM"></div></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - Swift UITableView的scrollToRow的坑</title>
      <link href="/2017/09/12/iOS-Swift-UITableView%E7%9A%84scrollToRow%E7%9A%84%E5%9D%91/"/>
      <url>/2017/09/12/iOS-Swift-UITableView%E7%9A%84scrollToRow%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>今天鄙人使用SnapKit来布局cell，然后用scrollToRow来滚到底部就遇到了一个很奇葩的现象。<br>我设置了在键盘弹出后聊天消息列表会自动滚到底部。<br>1.随便输入一条消息，点发送后，在聊天消息列表中并没有滚到最新消息那一行。<br>2.退出键盘不做任何操作再打开键盘也是滚到刚才那里(即最新消息的上一条所在位置)<br>3.只有在退出键盘后把聊天消息列表的消息向上拉一点距离露出最新消息所在的cell之后，再点击才有用</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在tableView中，我们一般会用到scrollToRow这个来控制tableView滚到指定的某一行。一般写法如下所示<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: 滚到底部</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollToBottom</span><span class="params">(animated: Bool = <span class="literal">false</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> dataArr.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">        tableView.scrollToRow(at: <span class="type">IndexPath</span>(row: dataArr.<span class="built_in">count</span> - <span class="number">1</span>, section: <span class="number">0</span>), at: .bottom, animated: animated)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h2><p>今天鄙人使用SnapKit来布局cell，然后用scrollToRow来滚到底部就遇到了一个很奇葩的现象。<br>我设置了在键盘弹出后聊天消息列表会自动滚到底部。<br>1.随便输入一条消息，点发送后，在聊天消息列表中并没有滚到最新消息那一行。<br>2.退出键盘不做任何操作再打开键盘也是滚到刚才那里(即最新消息的上一条所在位置)<br>3.只有在退出键盘后把聊天消息列表的消息向上拉一点距离露出最新消息所在的cell之后，再点击才有用<br><img src="/images/2017/09/iOS - Swift UITableView的scrollToRow的&quot;坑&quot;/1.gif" alt=""></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在无奈之下，经过了一步步的探索，终于发现了问题的所在<br>首先我们要了解一下scrollToRow执行后会调用哪些函数及顺序<br><strong>会调用这两个方法</strong><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span></span><br></pre></td></tr></table></figure></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, heightForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">CGFloat</span></span><br></pre></td></tr></table></figure><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>我在 heightForRow 中写了具体的数据，也就是把高度写死，不再是动态获取。接着执行程序得到如下结果<br>比如我原本有10条数据，现在加入了一条后执行了scrollToRow，它会<br>1.先调用 heightForRow 11次，<strong>即包括最新加入的那一条</strong><br>2.然后再调用 cellForRow<br>3.最后在调一次 heightForRow<br>后面的2和3是针对最新消息的</p><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><p>我在 heightForRow 中不再写死高度，而是从模型数据中动态获取高度(高度是在cell布局后获取的，再赋值到模型数据中的cellHeight变量)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行程序得到这个结果：调用 heightForRow 11次，然后就没了</span><br></pre></td></tr></table></figure></p><p>好吧，问题就出现在对heightForRow的第11次调用，前10次都有返回具体的高度，而最后一次是0~。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><strong>现在清楚了，要想在调用 scrollToRow 到指定的那一行，前提条件是那一行的高度不能为0。</strong><br>所以在上面的情况中，发送完消息后，最新消息的cell的确是插入到了tableView，也有显示出来(后面我自己测的)，但就是无法滚到最新消息那一行，就是因为 heightForRow 返回的高度为0<br>在上面的情况中，向上拉一点距离露出cell后scrollToRow才有效就是因为此时heightForRow返回的高度不再为0</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>按本人自身的情况来说，有两种解决方法</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>在传入的模型数据中给予明确计算出来的数值就好。</p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>我使用SnapKit来自动布局cell的位置然后再来获取高度，这做法主要就是为了避免运算。所以我不选用第一种解决方法<br>好了，方法如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dataArr是用来存放模型的数组</span></span><br><span class="line"><span class="keyword">let</span> indexPath = <span class="type">IndexPath</span>(row: dataArr.<span class="built_in">count</span> - <span class="number">1</span>, section: <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 调用tableView的数据源办法</span></span><br><span class="line"><span class="number">_</span> = <span class="keyword">self</span>.tableView(tableView, cellForRowAt: indexPath)</span><br></pre></td></tr></table></figure></p><p>在插入最新消息后，调用tableView的数据源方法来让它先对cell进行布局，这样就获取到了cell的高度，然后再执行 scrollToRow 就好了。<br><img src="/images/2017/09/iOS - Swift UITableView的scrollToRow的&quot;坑&quot;/2.gif" alt="完美"></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - Swift 仿微信聊天图片显示</title>
      <link href="/2017/09/12/iOS-Swift-%E4%BB%BF%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/"/>
      <url>/2017/09/12/iOS-Swift-%E4%BB%BF%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>其实原理比较简单，准备一张图片MaskImgae，先对其进行拉伸，然后按照其轮廓对图片进行裁剪就行了</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>如图所示，图片左侧有个小箭头<br><img src="/images/2017/09/iOS - Swift 仿微信聊天图片显示/1.png" alt="效果图"></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>其实原理比较简单，准备一张图片MaskImgae，先对其进行拉伸，然后按照其轮廓对图片进行裁剪就行了<br><img src="/images/2017/09/iOS - Swift 仿微信聊天图片显示/2.png" alt="MaskImgae"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>这里摘重点说，布局什么的按自己意愿去弄吧。我固定了图片的显示大小为 102 * 152</p><h3 id="1、对MaskImgae进行拉伸"><a href="#1、对MaskImgae进行拉伸" class="headerlink" title="1、对MaskImgae进行拉伸"></a>1、对MaskImgae进行拉伸</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置拉伸范围</span></span><br><span class="line"><span class="keyword">let</span> stretchInsets = <span class="type">UIEdgeInsetsMake</span>(<span class="number">30</span>, <span class="number">28</span>, <span class="number">23</span>, <span class="number">28</span>)</span><br><span class="line"><span class="comment">// 待拉伸的图片</span></span><br><span class="line"><span class="keyword">let</span> stretchImage = <span class="type">UIImage</span>(named: <span class="string">"SenderImageNodeMask"</span>)</span><br><span class="line"><span class="comment">// 进行拉伸</span></span><br><span class="line"><span class="keyword">let</span> bubbleMaskImage = stretchImage.resizableImage(withCapInsets: stretchInsets, resizingMode: .stretch)</span><br></pre></td></tr></table></figure><p>拉伸的效果如图<br><img src="/images/2017/09/iOS - Swift 仿微信聊天图片显示/3.png" alt="拉伸效果"></p><h3 id="2、对imageView设置裁剪区域"><a href="#2、对imageView设置裁剪区域" class="headerlink" title="2、对imageView设置裁剪区域"></a>2、对imageView设置裁剪区域</h3><p>这里我的 imageView 叫   chatImgView<br>上面的拉伸效果图是临时把拉伸好的图片赋值给了chatImgView，只是为了给大家看到效果而已，各位看官如果有赋值请记得改回来~~</p><p><strong>好，下面进行裁剪</strong><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个图层</span></span><br><span class="line"><span class="keyword">let</span> layer = <span class="type">CALayer</span>()</span><br><span class="line"><span class="comment">// 设置图层显示的内容为拉伸过的MaskImgae</span></span><br><span class="line">layer.contents = bubbleMaskImage.cgImage</span><br><span class="line"><span class="comment">// 设置拉伸范围(注意：这里contentsCenter的CGRect是比例（不是绝对坐标）)</span></span><br><span class="line">layer.contentsCenter = <span class="keyword">self</span>.<span class="type">CGRectCenterRectForResizableImage</span>(bubbleMaskImage)</span><br><span class="line"><span class="comment">// 设置图层大小与chatImgView相同</span></span><br><span class="line">layer.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">102</span>, height: <span class="number">152</span>)</span><br><span class="line"><span class="comment">// 设置比例</span></span><br><span class="line">layer.contentsScale = <span class="type">UIScreen</span>.main.scale</span><br><span class="line"><span class="comment">// 设置不透明度</span></span><br><span class="line">layer.opacity = <span class="number">1</span></span><br><span class="line"><span class="comment">// 设置裁剪范围</span></span><br><span class="line"><span class="keyword">self</span>.chatImgView.layer.mask = layer</span><br><span class="line"><span class="comment">// 设置裁剪掉超出的区域</span></span><br><span class="line"><span class="keyword">self</span>.chatImgView.layer.masksToBounds = <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CGRectCenterRectForResizableImage</span><span class="params">(<span class="number">_</span> image: UIImage)</span></span> -&gt; <span class="type">CGRect</span> &#123;</span><br><span class="line">    <span class="comment">// LXFLog("\(image.capInsets)")</span></span><br><span class="line">    <span class="comment">// 这里的image.capInsets就是UIEdgeInsetsMake(30, 28, 23, 28)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">CGRect</span>(</span><br><span class="line">        x: image.capInsets.<span class="keyword">left</span> / image.size.width,</span><br><span class="line">        y: image.capInsets.top / image.size.height,</span><br><span class="line">        width: (image.size.width - image.capInsets.<span class="keyword">right</span> - image.capInsets.<span class="keyword">left</span>) / image.size.width,</span><br><span class="line">        height: (image.size.height - image.capInsets.bottom - image.capInsets.top) / image.size.height</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了</p><h2 id="解释一下下"><a href="#解释一下下" class="headerlink" title="解释一下下"></a>解释一下下</h2><h3 id="UIEdgeInsetsMake"><a href="#UIEdgeInsetsMake" class="headerlink" title="UIEdgeInsetsMake"></a>UIEdgeInsetsMake</h3><p>MaskImgae 的大小为 56 * 50<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UIEdgeInsetsMake(top: CGFloat, left: CGFloat, bottom: CGFloat, right: CGFloat)</span></span><br><span class="line"><span class="type">UIEdgeInsetsMake</span>(<span class="number">30</span>, <span class="number">28</span>, <span class="number">23</span>, <span class="number">28</span>)</span><br></pre></td></tr></table></figure></p><p>红色范围就是要拉伸的范围(随手一扣，不太准确，意思意思下就好了~~)<br><img src="/images/2017/09/iOS - Swift 仿微信聊天图片显示/4.png" alt="拉伸区域"></p><h3 id="contentsCenter"><a href="#contentsCenter" class="headerlink" title="contentsCenter"></a>contentsCenter</h3><p>这是对某个区域进行全面拉伸，如果不设置的话默认值为<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">1</span>, height: <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>就是直接进行缩放<br>那我们先来看看，如果不对contentsCenter这个值进行设置会是什么效果<br><img src="/images/2017/09/iOS - Swift 仿微信聊天图片显示/5.png" alt="直接拉伸"><br>我们来看下官方解释</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> contentsCenter: <span class="type">CGRect</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line"><span class="type">Description</span></span><br><span class="line"><span class="type">The</span> rectangle that defines how the layer contents are scaled</span><br><span class="line"><span class="keyword">if</span> the layer’s contents are resized. <span class="type">Animatable</span>.</span><br></pre></td></tr></table></figure><p>翻译：如果图层的内容是重新设置了尺寸的，那定义的这个矩形(contentsCenter)是为了告诉图层，图层的内容是如何被缩放的</p><p>那明了，我们的图片是被拉伸后再绘制到layer上的，为了正确显示我们的图片，我们得告诉layer它是怎么被进行拉伸的。是的，就是下面代码所指定的范围<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIEdgeInsetsMake</span>(<span class="number">30</span>, <span class="number">28</span>, <span class="number">23</span>, <span class="number">28</span>)</span><br></pre></td></tr></table></figure></p><p>但是，正如上面提到过的，contentsCenter所要赋值的CGRect是比例，不是绝对坐标，所以现在我们得通过(30, 28, 23, 28)获取比例值，转换方法已经在上面给出了，就是CGRectCenterRectForResizableImage<br>我们来打印下 image.capInsets的内容<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LXFLog</span>(<span class="string">"<span class="subst">\(image.capInsets)</span>"</span>)</span><br><span class="line"><span class="type">LXFLog</span>(<span class="string">"<span class="subst">\(image.capInsets.top)</span>"</span>)</span><br><span class="line"><span class="type">LXFLog</span>(<span class="string">"<span class="subst">\(image.capInsets.bottom)</span>"</span>)</span><br><span class="line"><span class="type">LXFLog</span>(<span class="string">"<span class="subst">\(image.capInsets.<span class="keyword">left</span>)</span>"</span>)</span><br><span class="line"><span class="type">LXFLog</span>(<span class="string">"<span class="subst">\(image.capInsets.<span class="keyword">right</span>)</span>"</span>)</span><br></pre></td></tr></table></figure></p><p>打印结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UIEdgeInsets(top: 30.0, left: 28.0, bottom: 23.0, right: 28.0)</span><br><span class="line">30.0</span><br><span class="line">23.0</span><br><span class="line">28.0</span><br><span class="line">28.0</span><br></pre></td></tr></table></figure></p><p>好，现在结合 下面的图 与 CGRectCenterRectForResizableImage 方法中的代码就很明确比例是怎么取到的了<br><img src="/images/2017/09/iOS - Swift 仿微信聊天图片显示/6.png" alt="拉伸区域"></p><p>附上相关项目：<a href="https://github.com/LinXunFeng/LXFWeChat" target="_blank" rel="noopener">Swift 3.0 高仿微信</a></p><div class="github-widget" data-repo="LinXunFeng/LXFWeChat"></div></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - Swift UICollectionView横向分页的问题</title>
      <link href="/2017/09/12/iOS-Swift-UICollectionView%E6%A8%AA%E5%90%91%E5%88%86%E9%A1%B5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2017/09/12/iOS-Swift-UICollectionView%E6%A8%AA%E5%90%91%E5%88%86%E9%A1%B5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>有两种方式可以解决，数据只有11个，要分两页需要16个，那我们可以直接添加数据到16个，然后在dataSource中返回cell时进行判断及处理即可。不过对于现在来说太小题大做了，我选第二种方式~</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="UICollectionView横向分页的问题"><a href="#UICollectionView横向分页的问题" class="headerlink" title="UICollectionView横向分页的问题"></a>UICollectionView横向分页的问题</h1><h2 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h2><p>直接看图<br><img src="/images/2017/09/iOS - Swift UICollectionView横向分页的问题/1.png" alt="滚前"><br><img src="/images/2017/09/iOS - Swift UICollectionView横向分页的问题/2.png" alt="滚后"><br>已经设置collectionView的isPagingEnabled为true了，可是出现了这种情况，原因就是collectionView的contentSize不够。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;UICollectionView: 0x7fc565076000; </span><br><span class="line">frame = (0 0; 375 197); </span><br><span class="line">clipsToBounds = YES; </span><br><span class="line">gestureRecognizers = &lt;NSArray: 0x6180000557e0&gt;; </span><br><span class="line">layer = &lt;CALayer: 0x61000022a5a0&gt;; </span><br><span class="line">contentOffset: &#123;187.5, 0&#125;; </span><br><span class="line">contentSize: &#123;562.5, 192.25&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>有两种方式可以解决，数据只有11个，要分两页需要16个，那我们可以直接添加数据到16个，然后在dataSource中返回cell时进行判断及处理即可。不过对于现在来说太小题大做了，我选第二种方式~</p><h3 id="直接修改contentSize"><a href="#直接修改contentSize" class="headerlink" title="直接修改contentSize"></a>直接修改contentSize</h3><p>我自定义了一个继承于UICollectionViewFlowLayout的Layout(LXFChatMoreCollectionLayout)，让UICollectionView在创建的时候使用了它</p><p>在 LXFChatMoreCollectionLayout.swift 中我们需要重写父类的collectionViewContentSize，将contentSize取出来修改为我们自己创建的newSize就可以了代码如下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> collectionViewContentSize: <span class="type">CGSize</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> size: <span class="type">CGSize</span> = <span class="keyword">super</span>.collectionViewContentSize</span><br><span class="line">    <span class="keyword">let</span> collectionViewWidth: <span class="type">CGFloat</span> = <span class="keyword">self</span>.collectionView!.frame.size.width</span><br><span class="line">    <span class="keyword">let</span> nbOfScreen: <span class="type">Int</span> = <span class="type">Int</span>(ceil(size.width / collectionViewWidth))</span><br><span class="line">    <span class="keyword">let</span> newSize: <span class="type">CGSize</span> = <span class="type">CGSize</span>(width: collectionViewWidth * <span class="type">CGFloat</span>(nbOfScreen), height: size.height)</span><br><span class="line">    <span class="keyword">return</span> newSize</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注：ceil函数的作用是求不小于给定实数的最小整数。ceil(2)=ceil(1.2)=cei(1.5)=2.00</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/2017/09/iOS - Swift UICollectionView横向分页的问题/3.png" alt=""></p><p>至于如何让item水平布局，请参考<a href="/2017/09/12/[iOS - Swift UICollectionView横向分页滚动，cell左右排版](http://linxunfeng.top/2017/09/12/iOS-Swift-UICollectionView横向分页滚动，cell左右排版/">《iOS - Swift UICollectionView横向分页滚动，cell左右排版》</a></p><p>附上相关项目：<a href="https://github.com/LinXunFeng/LXFWeChat" target="_blank" rel="noopener">Swift 3.0 高仿微信</a></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - Swift UICollectionView横向分页滚动，cell左右排版</title>
      <link href="/2017/09/12/iOS-Swift-UICollectionView%E6%A8%AA%E5%90%91%E5%88%86%E9%A1%B5%E6%BB%9A%E5%8A%A8%EF%BC%8Ccell%E5%B7%A6%E5%8F%B3%E6%8E%92%E7%89%88/"/>
      <url>/2017/09/12/iOS-Swift-UICollectionView%E6%A8%AA%E5%90%91%E5%88%86%E9%A1%B5%E6%BB%9A%E5%8A%A8%EF%BC%8Ccell%E5%B7%A6%E5%8F%B3%E6%8E%92%E7%89%88/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>最近在做表情键盘时遇到一个问题，我用UICollectionView来布局表情，使用横向分页滚动，但在最后一页出现了如图所示的情况</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h2><p>最近在做表情键盘时遇到一个问题，我用UICollectionView来布局表情，使用横向分页滚动，但在最后一页出现了如图所示的情况<br><img src="/images/2017/09/iOS-Swift-UICollectionView横向分页滚动，cell左右排版/1.png" alt="只显示一半"></p><h3 id="情况分析图"><a href="#情况分析图" class="headerlink" title="情况分析图"></a>情况分析图</h3><p>是的，现在的item分布就是这个鬼样子<br><img src="/images/2017/09/iOS-Swift-UICollectionView横向分页滚动，cell左右排版/2.jpeg" alt="从上到下，从左到右"><br>现在想要做的，就是将现在这个鬼样子变成另外一种样子，如图<br><img src="/images/2017/09/iOS-Swift-UICollectionView横向分页滚动，cell左右排版/3.jpeg" alt="从左到右，从上到下"><br>那怎么办？只好重新布局item了</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我是自定了一个Layout(LXFChatEmotionCollectionLayout)，让UICollectionView在创建的时候使用了它</p><p>在 LXFChatEmotionCollectionLayout.swift 中</p><h3 id="添加一个属性来保存所有item的attributes"><a href="#添加一个属性来保存所有item的attributes" class="headerlink" title="添加一个属性来保存所有item的attributes"></a>添加一个属性来保存所有item的attributes</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存所有item的attributes</span></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> attributesArr: [<span class="type">UICollectionViewLayoutAttributes</span>] = []</span><br></pre></td></tr></table></figure><h3 id="重新布局"><a href="#重新布局" class="headerlink" title="重新布局"></a>重新布局</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK:- 重新布局</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.prepare()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> itemWH: <span class="type">CGFloat</span> = kScreenW / <span class="type">CGFloat</span>(kEmotionCellNumberOfOneRow)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置itemSize</span></span><br><span class="line">    itemSize = <span class="type">CGSize</span>(width: itemWH, height: itemWH)</span><br><span class="line">    minimumLineSpacing = <span class="number">0</span></span><br><span class="line">    minimumInteritemSpacing = <span class="number">0</span></span><br><span class="line">    scrollDirection = .horizontal</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置collectionView属性</span></span><br><span class="line">    collectionView?.isPagingEnabled = <span class="literal">true</span></span><br><span class="line">    collectionView?.showsHorizontalScrollIndicator = <span class="literal">false</span></span><br><span class="line">    collectionView?.showsVerticalScrollIndicator = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">let</span> insertMargin = (collectionView!.bounds.height - <span class="number">3</span> * itemWH) * <span class="number">0.5</span></span><br><span class="line">    collectionView?.contentInset = <span class="type">UIEdgeInsetsMake</span>(insertMargin, <span class="number">0</span>, insertMargin, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 重点在这里</span></span><br><span class="line">    <span class="keyword">var</span> page = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> itemsCount = collectionView?.numberOfItems(inSection: <span class="number">0</span>) ?? <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> itemIndex <span class="keyword">in</span> <span class="number">0</span>..&lt;itemsCount &#123;</span><br><span class="line">        <span class="keyword">let</span> indexPath = <span class="type">IndexPath</span>(item: itemIndex, section: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">let</span> attributes = <span class="type">UICollectionViewLayoutAttributes</span>(forCellWith: indexPath)</span><br><span class="line">        </span><br><span class="line">        page = itemIndex / (kEmotionCellNumberOfOneRow * kEmotionCellRow)</span><br><span class="line">        <span class="comment">// 通过一系列计算, 得到x, y值</span></span><br><span class="line">        <span class="keyword">let</span> x = itemSize.width * <span class="type">CGFloat</span>(itemIndex % <span class="type">Int</span>(kEmotionCellNumberOfOneRow)) + (<span class="type">CGFloat</span>(page) * kScreenW)</span><br><span class="line">        <span class="keyword">let</span> y = itemSize.height * <span class="type">CGFloat</span>((itemIndex - page * kEmotionCellRow * kEmotionCellNumberOfOneRow) / kEmotionCellNumberOfOneRow)</span><br><span class="line">        </span><br><span class="line">        attributes.frame = <span class="type">CGRect</span>(x: x, y: y, width: itemSize.width, height: itemSize.height)</span><br><span class="line">        <span class="comment">// 把每一个新的属性保存起来</span></span><br><span class="line">        attributesArr.append(attributes)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回所有当前可见的Attributes"><a href="#返回所有当前可见的Attributes" class="headerlink" title="返回所有当前可见的Attributes"></a>返回所有当前可见的Attributes</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutAttributesForElements</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> -&gt; [<span class="type">UICollectionViewLayoutAttributes</span>]? &#123;</span><br><span class="line">    <span class="keyword">var</span> rectAttributes: [<span class="type">UICollectionViewLayoutAttributes</span>] = []</span><br><span class="line">    <span class="number">_</span> = attributesArr.<span class="built_in">map</span>(&#123;</span><br><span class="line">        <span class="keyword">if</span> rect.<span class="built_in">contains</span>($<span class="number">0</span>.frame) &#123;</span><br><span class="line">            rectAttributes.append($<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> rectAttributes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p><img src="/images/2017/09/iOS-Swift-UICollectionView横向分页滚动，cell左右排版/4.gif" alt=""></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> kEmotionCellNumberOfOneRow = <span class="number">8</span></span><br><span class="line"><span class="keyword">let</span> kEmotionCellRow = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LXFChatEmotionCollectionLayout</span>: <span class="title">UICollectionViewFlowLayout</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保存所有item</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> attributesArr: [<span class="type">UICollectionViewLayoutAttributes</span>] = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK:- 重新布局</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.prepare()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> itemWH: <span class="type">CGFloat</span> = kScreenW / <span class="type">CGFloat</span>(kEmotionCellNumberOfOneRow)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置itemSize</span></span><br><span class="line">        itemSize = <span class="type">CGSize</span>(width: itemWH, height: itemWH)</span><br><span class="line">        minimumLineSpacing = <span class="number">0</span></span><br><span class="line">        minimumInteritemSpacing = <span class="number">0</span></span><br><span class="line">        scrollDirection = .horizontal</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置collectionView属性</span></span><br><span class="line">        collectionView?.isPagingEnabled = <span class="literal">true</span></span><br><span class="line">        collectionView?.showsHorizontalScrollIndicator = <span class="literal">false</span></span><br><span class="line">        collectionView?.showsVerticalScrollIndicator = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">let</span> insertMargin = (collectionView!.bounds.height - <span class="number">3</span> * itemWH) * <span class="number">0.5</span></span><br><span class="line">        collectionView?.contentInset = <span class="type">UIEdgeInsetsMake</span>(insertMargin, <span class="number">0</span>, insertMargin, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> page = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> itemsCount = collectionView?.numberOfItems(inSection: <span class="number">0</span>) ?? <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> itemIndex <span class="keyword">in</span> <span class="number">0</span>..&lt;itemsCount &#123;</span><br><span class="line">            <span class="keyword">let</span> indexPath = <span class="type">IndexPath</span>(item: itemIndex, section: <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">let</span> attributes = <span class="type">UICollectionViewLayoutAttributes</span>(forCellWith: indexPath)</span><br><span class="line">            </span><br><span class="line">            page = itemIndex / (kEmotionCellNumberOfOneRow * kEmotionCellRow)</span><br><span class="line">            <span class="comment">// 通过一系列计算, 得到x, y值</span></span><br><span class="line">            <span class="keyword">let</span> x = itemSize.width * <span class="type">CGFloat</span>(itemIndex % <span class="type">Int</span>(kEmotionCellNumberOfOneRow)) + (<span class="type">CGFloat</span>(page) * kScreenW)</span><br><span class="line">            <span class="keyword">let</span> y = itemSize.height * <span class="type">CGFloat</span>((itemIndex - page * kEmotionCellRow * kEmotionCellNumberOfOneRow) / kEmotionCellNumberOfOneRow)</span><br><span class="line">            </span><br><span class="line">            attributes.frame = <span class="type">CGRect</span>(x: x, y: y, width: itemSize.width, height: itemSize.height)</span><br><span class="line">            <span class="comment">// 把每一个新的属性保存起来</span></span><br><span class="line">            attributesArr.append(attributes)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutAttributesForElements</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> -&gt; [<span class="type">UICollectionViewLayoutAttributes</span>]? &#123;</span><br><span class="line">        <span class="keyword">var</span> rectAttributes: [<span class="type">UICollectionViewLayoutAttributes</span>] = []</span><br><span class="line">        <span class="number">_</span> = attributesArr.<span class="built_in">map</span>(&#123;</span><br><span class="line">            <span class="keyword">if</span> rect.<span class="built_in">contains</span>($<span class="number">0</span>.frame) &#123;</span><br><span class="line">                rectAttributes.append($<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> rectAttributes</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上相关项目：<a href="https://github.com/LinXunFeng/LXFWeChat" target="_blank" rel="noopener">Swift 3.0 高仿微信</a></p><div class="github-widget" data-repo="LinXunFeng/LXFWeChat"></div></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - 通过runtime获取某个类中所有的变量和方法</title>
      <link href="/2017/09/12/iOS-%E9%80%9A%E8%BF%87runtime%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E7%B1%BB%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2017/09/12/iOS-%E9%80%9A%E8%BF%87runtime%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E7%B1%BB%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>苹果官方的类中只提供给我们一小部分成员变量和方法,但有时候我们需要的恰好就没有提供,这样就会令开发人员十分懊恼了,那怎样才能获取该类中所有的变量及方法,用来查找是否有相对应的变量和方法呢?<br>我们可以使用苹果自带的 运行时(runtime) 来获取<br>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><p>苹果官方的类中只提供给我们一小部分成员变量和方法,但有时候我们需要的恰好就没有提供,这样就会令开发人员十分懊恼了,那怎样才能获取该类中所有的变量及方法,用来查找是否有相对应的变量和方法呢?<br>我们可以使用苹果自带的 运行时(runtime) 来获取</p><h2 id="运行时-Runtime"><a href="#运行时-Runtime" class="headerlink" title="运行时(Runtime):"></a>运行时(Runtime):</h2><ul><li>苹果官方一套<a href="http://lib.csdn.net/base/c" target="_blank" rel="noopener">C语言</a>库 </li><li>能做很多底层操作(比如访问隐藏的一些成员变量\成员方法….)</li></ul><p>以下以 UITextField 为例</p><h3 id="一-包含运行时头文件"><a href="#一-包含运行时头文件" class="headerlink" title="一. 包含运行时头文件"></a>一. 包含运行时头文件</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="二-获取所有的成员变量"><a href="#二-获取所有的成员变量" class="headerlink" title="二. 获取所有的成员变量"></a>二. 获取所有的成员变量</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 拷贝出所胡的成员变量列表</span></span><br><span class="line">Ivar *ivars = class_copyIvarList([<span class="built_in">UITextField</span> <span class="keyword">class</span>], &amp;count);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;count; i++) &#123;</span><br><span class="line">    <span class="comment">// 取出成员变量</span></span><br><span class="line">    Ivar ivar = *(ivars + i);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 打印成员变量名字</span></span><br><span class="line">    LXFLog(<span class="string">@"%s"</span>, ivar_getName(ivar));</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 打印成员变量的数据类型</span></span><br><span class="line">    LXFLog(<span class="string">@"%s"</span>, ivar_getTypeEncoding(ivar));</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 释放</span></span><br><span class="line">free(ivars);</span><br></pre></td></tr></table></figure><p>Swift的写法如下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">UInt32</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> ivars = class_copyIvarList(<span class="type">UIViewController</span>.<span class="keyword">self</span>, &amp;<span class="built_in">count</span>)!</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> namePoint = ivar_getName(ivars[<span class="type">Int</span>(i)])!</span><br><span class="line">    <span class="keyword">let</span> name = <span class="type">String</span>(cString: namePoint)</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="三-获取所有的成员方法"><a href="#三-获取所有的成员方法" class="headerlink" title="三. 获取所有的成员方法"></a>三. 获取所有的成员方法</h3><p>// 下面的UITextField改为你想获取所有属性的类名<br>// methCount: 这个类所有属性的个数<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> methCount = <span class="number">0</span>;</span><br><span class="line">Method *meths = class_copyMethodList([<span class="built_in">UITextField</span> <span class="keyword">class</span>], &amp;methCount);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methCount; i++) &#123;</span><br><span class="line">        </span><br><span class="line">    Method meth = meths[i];</span><br><span class="line">        </span><br><span class="line">    SEL sel = method_getName(meth);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = sel_getName(sel);</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">free(meths);</span><br></pre></td></tr></table></figure></p><p>最后,通过KVC的方式给相应的成员变量赋值即可!<br>如:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改点位文字颜色</span></span><br><span class="line"><span class="built_in">UILabel</span> *placeholderLabel = [<span class="keyword">self</span> valueForKeyPath:<span class="string">@"_placeholderLabel"</span>];</span><br><span class="line">placeholderLabel.textColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line"><span class="comment">// 或者这样</span></span><br><span class="line">[<span class="keyword">self</span> setValue:[<span class="built_in">UIColor</span> grayColor] forKeyPath:<span class="string">@"_placeholderLabel.textColor"</span>];</span><br></pre></td></tr></table></figure></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - 实现UINavigation全屏动返回(二)</title>
      <link href="/2017/09/12/iOS-%E5%AE%9E%E7%8E%B0UINavigation%E5%85%A8%E5%B1%8F%E5%8A%A8%E8%BF%94%E5%9B%9E-%E4%BA%8C/"/>
      <url>/2017/09/12/iOS-%E5%AE%9E%E7%8E%B0UINavigation%E5%85%A8%E5%B1%8F%E5%8A%A8%E8%BF%94%E5%9B%9E-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>在 <a href="/2017/09/11/iOS-实现UINavigation全屏动返回-一">iOS - 实现UINavigation全屏滑动返回(一)</a> 中我们实现了滑动返回的功能，但不是全屏滑动返回，得在左侧边缘轻扫才能滑动返回~UINavigationController自带的只能在边缘轻扫才能滑动返回，这用户体验是不好的，接下来实现全屏滑动返回!</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>在 <a href="/2017/09/11/iOS-实现UINavigation全屏动返回-一/">iOS - 实现UINavigation全屏滑动返回(一)</a> 中我们实现了滑动返回的功能，但不是全屏滑动返回，得在左侧边缘轻扫才能滑动返回~UINavigationController自带的只能在边缘轻扫才能滑动返回，这用户体验是不好的，接下来实现全屏滑动返回!</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>既然自带的滑动返回只能是在边缘，那我们能不能修改使它触摸范围变大甚至全屏呢？先来看下系统手势有没有提供属性或方法供我们使用<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="keyword">self</span>.interactivePopGestureRecognizer);</span><br></pre></td></tr></table></figure></p><p>打印信息：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;UIScreenEdgePanGestureRecognizer: 0x7fd542611e20; state = Possible;</span></span><br><span class="line"><span class="comment"> delaysTouchesBegan = YES; view = &lt;UILayoutContainerView 0x7fd542706300&gt;; target= </span></span><br><span class="line"><span class="comment">&lt;(action=handleNavigationTransition:, target=&lt;_UINavigationInteractiveTransition </span></span><br><span class="line"><span class="comment">0x7fd542611ce0&gt;)&gt;&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>原来系统手势的类型为 UIScreenEdgePanGestureRecognizer ，转到定义，发现有一个属性<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIRectEdge</span> edges</span><br></pre></td></tr></table></figure></p><p>是个结构体<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">UIRectEdge</span>) &#123; </span><br><span class="line">   <span class="built_in">UIRectEdgeNone</span> = <span class="number">0</span>,</span><br><span class="line">   <span class="built_in">UIRectEdgeTop</span> = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">   <span class="built_in">UIRectEdgeLeft</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">   <span class="built_in">UIRectEdgeBottom</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">   <span class="built_in">UIRectEdgeRight</span> = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">   <span class="built_in">UIRectEdgeAll</span> = <span class="built_in">UIRectEdgeTop</span> | <span class="built_in">UIRectEdgeLeft</span> | <span class="built_in">UIRectEdgeBottom</span> | <span class="built_in">UIRectEdgeRight</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只提供了这几样，都是边缘的，这样就只好另寻他路了。<br>既然没有提供方式给我们现实要求，那我们就自己添加一个拖动手势 UIPanGestureRecognizer来替它执行滑动返回功能。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIPanGestureRecognizer</span> *pan = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:target action:<span class="keyword">@selector</span>(handleNavigationTransition:)];</span><br><span class="line">[<span class="keyword">self</span>.view addGestureRecognizer:pan];</span><br></pre></td></tr></table></figure></p><p>添加一个拖动手势，让他执行系统手势的操作，调用handleNavigationTransition:方法（刚才打印的信息中可以得知），现在的问题就是target是谁？<br>我们可以看看UIScreenEdgePanGestureRecognizer中是否有线索呢？<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIScreenEdgePanGestureRecognizer</span> *gest = <span class="keyword">self</span>.interactivePopGestureRecognizer;</span><br></pre></td></tr></table></figure></p><p>找了半天没找着，但是UIScreenEdgePanGestureRecognizer继承于UIPanGestureRecognizer，而UIPanGestureRecognizer又继承于UIGestureRecognizer，在UIGestureRecognizer提供的方法中我们可以推断出一定有target，而且还是强引用的私有属性！那我们就可以用OC强大的杀手锏KVC来得到这个属性，但是前提是我们得知道target所指属性是什么名字<br>参照我的另一篇文章：<a href="/2017/09/12/iOS-通过runtime获取某个类中所有的变量和方法">iOS - 通过runtime获取某个类中所有的变量和方法</a><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OC runtime 机制</span></span><br><span class="line"><span class="comment">// 只能动态获取当前类的成员属性，不能获取其子类，或者父类的属性</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">// 拷贝出所胡的成员变量列表</span></span><br><span class="line">Ivar *ivars = class_copyIvarList([<span class="built_in">UIGestureRecognizer</span> <span class="keyword">class</span>], &amp;count);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;count; i++) &#123;</span><br><span class="line">   <span class="comment">// 取出成员变量</span></span><br><span class="line">   Ivar ivar = *(ivars + i); </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 打印成员变量名字</span></span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, ivar_getName(ivar)); </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 打印成员变量的数据类型</span></span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, ivar_getTypeEncoding(ivar));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 释放</span></span><br><span class="line"> free(ivars);</span><br></pre></td></tr></table></figure></p><p>在打印中我们找到了UIGestureRecognizer的私有属性 _targets，是个数组，而且只有一个元素，元素的类型如图所示<br><img src="/images/2017/09/iOS-实现UINavigation全屏动返回-二/1.png" alt="target"><br>那就好办了，这样我们就可以得到target了<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *targets = [gest valueForKeyPath:<span class="string">@"_targets"</span>]; <span class="comment">// 打印可以发现里面就一个元素</span></span><br><span class="line"><span class="keyword">id</span> target = [targets[<span class="number">0</span>] valueForKeyPath:<span class="string">@"_target"</span>];</span><br></pre></td></tr></table></figure></p><p>这样我们就差不多实现全屏滑动返回的功能，但是有个bug<br><img src="/images/2017/09/iOS-实现UINavigation全屏动返回-二/2.gif" alt="向右滑动，接着点击Button"><br>如图所示，在最后里回到根控制器界面后我再一次向右滑动，接着点击Button，它没有将FirstVC弹出，这就是传说中的bug，那我们现在在做的，就是在根控制器不让滑动返回生效，即禁用手势。<br>监听手势，遵守协议UIGestureRecognizerDelegate，实现代理方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当当前控制器是是根控制器时不让移除当前控制器(换句话说就是禁止手势)</span></span><br><span class="line">pan.delegate = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma mark - UIGestureRecognizerDelegate// 当开始滑动时调用</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer &#123;</span><br><span class="line">   <span class="comment">// 当为根控制器是不让移除当前控制器，非根控制器时允许移除</span></span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>, <span class="keyword">self</span>.viewControllers.count);</span><br><span class="line">   <span class="built_in">BOOL</span> open = <span class="keyword">self</span>.viewControllers.count &gt; <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">return</span> open;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h2><p>这样就可以全屏滑动了，不过让我们来看看我们添加手势的习惯<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIPanGestureRecognizer</span> *myPan = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(pan)];</span><br><span class="line">[<span class="keyword">self</span>.view addGestureRecognizer:myPan];</span><br><span class="line">myPan.delegate = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure></p><p>我们在添加手势时设置了target为self，而delegate也为self<br>那是不是可以推断出系统手势的delegate就是我们刚刚想要的target呢，答案是是的<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> target = <span class="keyword">self</span>.interactivePopGestureRecognizer.delegate;</span><br></pre></td></tr></table></figure></p><p>所以我们的target就可以通过这种方式获得，不用KVC的方式<br>哦，最后别忘了禁用系统手势<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁止系统的手势</span></span><br><span class="line"><span class="keyword">self</span>.interactivePopGestureRecognizer.enabled = <span class="literal">NO</span>;</span><br></pre></td></tr></table></figure></p><p>这样，我们就实现了全屏滑动返回的功能了~</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><blockquote><p>Objective-C</p></blockquote><p>记得遵守协议： UIGestureRecognizerDelegate<br>LXFNavigationController.m<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">   [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">   <span class="comment">// 系统的手势</span></span><br><span class="line">   <span class="built_in">UIScreenEdgePanGestureRecognizer</span> *gest = <span class="keyword">self</span>.interactivePopGestureRecognizer;</span><br><span class="line">   <span class="comment">// target</span></span><br><span class="line">   <span class="keyword">id</span> target = <span class="keyword">self</span>.interactivePopGestureRecognizer.delegate;</span><br><span class="line">   <span class="comment">// 禁止系统的手势 </span></span><br><span class="line">   <span class="keyword">self</span>.interactivePopGestureRecognizer.enabled = <span class="literal">NO</span>;</span><br><span class="line">   <span class="built_in">UIPanGestureRecognizer</span> *pan = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:target action:<span class="keyword">@selector</span>(handleNavigationTransition:)];</span><br><span class="line">   [<span class="keyword">self</span>.view addGestureRecognizer:pan]; </span><br><span class="line">   <span class="comment">// 监听代理</span></span><br><span class="line">   pan.delegate = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma mark - UIGestureRecognizerDelegate</span></span><br><span class="line"><span class="comment">// 当开始滑动时调用</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer &#123;</span><br><span class="line">   <span class="comment">// 当为根控制器是不让移除当前控制器，非根控制器时允许移除</span></span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>, <span class="keyword">self</span>.viewControllers.count);</span><br><span class="line">   <span class="built_in">BOOL</span> open = <span class="keyword">self</span>.viewControllers.count &gt; <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">return</span> open;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Swift</p></blockquote><p>LXFNavigationController.swift<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">override func viewDidLoad() &#123;</span><br><span class="line">    super.viewDidLoad()</span><br><span class="line">    </span><br><span class="line">    guard let targets = interactivePopGestureRecognizer!.value(forKey: &quot;_targets&quot;) as? [NSObject] else &#123; return &#125;</span><br><span class="line">    let targetObjc = targets.first</span><br><span class="line">    let target = targetObjc?.value(forKey: &quot;target&quot;)</span><br><span class="line">    let action = Selector((&quot;handleNavigationTransition:&quot;))</span><br><span class="line">    </span><br><span class="line">    let panGes = UIPanGestureRecognizer(target: target, action: action)</span><br><span class="line">    view.addGestureRecognizer(panGes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS - 实现UINavigation全屏动返回(一)</title>
      <link href="/2017/09/11/iOS-%E5%AE%9E%E7%8E%B0UINavigation%E5%85%A8%E5%B1%8F%E5%8A%A8%E8%BF%94%E5%9B%9E-%E4%B8%80/"/>
      <url>/2017/09/11/iOS-%E5%AE%9E%E7%8E%B0UINavigation%E5%85%A8%E5%B1%8F%E5%8A%A8%E8%BF%94%E5%9B%9E-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>interactivePopGestureRecognizer 是UINavigationController自带手势，当我们自定义了导航条的返回按钮后，这个手势就自动失效了，也就是说无法滑动返回。<br>+<a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><p>interactivePopGestureRecognizer 是UINavigationController自带手势，当我们自定义了导航条的返回按钮后，这个手势就自动失效了，也就是说无法滑动返回。</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>很多情况下我们不得不自定义导航条的返回按钮，但是我们也要滑动返回上一级的效果。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>既然自动失效，那我们就告诉它什么时候生效。</p><ul><li>在非根控制器下生效(用于滑动返回上一级)</li><li>在根控制器下失效(防止根控制器被移除，当然系统不会让我们把它移除，只是会出现bug)<br><img src="/images/2017/09/iOS-实现UINavigation全屏动返回-一/1.png" alt="苹果官方文档说明">翻译：第一个被添加的控制器成为永远不会被出栈的根控制器</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>自定义一个 UINavigationController ，即继承于 UINavigationController ，名字为 LXFNavigationController ，将代理设为自己，遵守协议 UINavigationControllerDelegate ，实现代理方法 navigationController:didShowViewController:animated:</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>LXFNavigationController.m</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 系统手势代理 */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> popGesture;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line"> [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 记录系统手势代理</span></span><br><span class="line">  <span class="keyword">self</span>.popGesture = <span class="keyword">self</span>.interactivePopGestureRecognizer;</span><br><span class="line">  <span class="keyword">self</span>.delegate = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma mark - UINavigationControllerDelegate</span></span><br><span class="line"><span class="comment">// 当控制器显示完毕的时候调用</span></span><br><span class="line">- (<span class="keyword">void</span>)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController didShowViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="comment">// 根据 栈 先进后出</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.viewControllers[<span class="number">0</span>] == viewController) &#123; <span class="comment">// 根控制器</span></span><br><span class="line">        <span class="comment">// 还原代理</span></span><br><span class="line">        <span class="keyword">self</span>.interactivePopGestureRecognizer.delegate = <span class="keyword">self</span>.popGesture;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 非控制器</span></span><br><span class="line">        <span class="comment">// 清空手势代理就能实现滑动返回，iOS6不支持</span></span><br><span class="line">        <span class="keyword">self</span>.interactivePopGestureRecognizer.delegate = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果当前控制器为根控制器，则使手势失效，不然手势会将根控制器移除</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.viewControllers.count == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.interactivePopGestureRecognizer.enabled = <span class="literal">NO</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.interactivePopGestureRecognizer.enabled = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/2017/09/iOS-实现UINavigation全屏动返回-一/2.gif" alt="只有左侧边缘滑动才有效"></p><p><a href="https://github.com/LinXunFeng/LXFNavigationControllerDemo" target="_blank" rel="noopener">附上Demo</a></p><h3 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h3><p>这样就可以了，但是注意了，现在实现的是滑动返回功能，并没有全屏滑动返回~~接下来看下一篇吧<br> <a href="/2017/09/12/iOS-实现UINavigation全屏动返回-二/">iOS - 实现UINavigation全屏滑动返回(二)</a></p><div class="github-widget" data-repo="LinXunFeng/LXFNavigationControllerDemo"></div></the>]]></content>
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
